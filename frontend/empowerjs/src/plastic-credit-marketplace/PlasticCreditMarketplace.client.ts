/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.25.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint64, Uint128, Addr, Decimal, Coin, Share, QueryMsg, Config, ListingResponse, Listing, ListingsResponse } from "./PlasticCreditMarketplace.types";
export interface PlasticCreditMarketplaceReadOnlyInterface {
  contractAddress: string;
  listings: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: Addr[][];
  }) => Promise<ListingsResponse>;
  listing: ({
    denom,
    owner
  }: {
    denom: string;
    owner: Addr;
  }) => Promise<ListingResponse>;
  feeSplitConfig: () => Promise<Config>;
}
export class PlasticCreditMarketplaceQueryClient implements PlasticCreditMarketplaceReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.listings = this.listings.bind(this);
    this.listing = this.listing.bind(this);
    this.feeSplitConfig = this.feeSplitConfig.bind(this);
  }

  listings = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: Addr[][];
  }): Promise<ListingsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      listings: {
        limit,
        start_after: startAfter
      }
    });
  };
  listing = async ({
    denom,
    owner
  }: {
    denom: string;
    owner: Addr;
  }): Promise<ListingResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      listing: {
        denom,
        owner
      }
    });
  };
  feeSplitConfig = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      fee_split_config: {}
    });
  };
}
export interface PlasticCreditMarketplaceInterface extends PlasticCreditMarketplaceReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createListing: ({
    denom,
    numberOfCredits,
    pricePerCredit
  }: {
    denom: string;
    numberOfCredits: Uint64;
    pricePerCredit: Coin;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateListing: ({
    denom,
    numberOfCredits,
    pricePerCredit
  }: {
    denom: string;
    numberOfCredits: Uint64;
    pricePerCredit: Coin;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  buyCredits: ({
    denom,
    numberOfCreditsToBuy,
    owner
  }: {
    denom: string;
    numberOfCreditsToBuy: number;
    owner: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  cancelListing: ({
    denom
  }: {
    denom: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  editFeeSplitConfig: ({
    feePercentage,
    shares
  }: {
    feePercentage: Decimal;
    shares: Share[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class PlasticCreditMarketplaceClient extends PlasticCreditMarketplaceQueryClient implements PlasticCreditMarketplaceInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createListing = this.createListing.bind(this);
    this.updateListing = this.updateListing.bind(this);
    this.buyCredits = this.buyCredits.bind(this);
    this.cancelListing = this.cancelListing.bind(this);
    this.editFeeSplitConfig = this.editFeeSplitConfig.bind(this);
  }

  createListing = async ({
    denom,
    numberOfCredits,
    pricePerCredit
  }: {
    denom: string;
    numberOfCredits: Uint64;
    pricePerCredit: Coin;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_listing: {
        denom,
        number_of_credits: numberOfCredits,
        price_per_credit: pricePerCredit
      }
    }, fee, memo, funds);
  };
  updateListing = async ({
    denom,
    numberOfCredits,
    pricePerCredit
  }: {
    denom: string;
    numberOfCredits: Uint64;
    pricePerCredit: Coin;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_listing: {
        denom,
        number_of_credits: numberOfCredits,
        price_per_credit: pricePerCredit
      }
    }, fee, memo, funds);
  };
  buyCredits = async ({
    denom,
    numberOfCreditsToBuy,
    owner
  }: {
    denom: string;
    numberOfCreditsToBuy: number;
    owner: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      buy_credits: {
        denom,
        number_of_credits_to_buy: numberOfCreditsToBuy,
        owner
      }
    }, fee, memo, funds);
  };
  cancelListing = async ({
    denom
  }: {
    denom: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel_listing: {
        denom
      }
    }, fee, memo, funds);
  };
  editFeeSplitConfig = async ({
    feePercentage,
    shares
  }: {
    feePercentage: Decimal;
    shares: Share[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      edit_fee_split_config: {
        fee_percentage: feePercentage,
        shares
      }
    }, fee, memo, funds);
  };
}