{
  "version": 3,
  "sources": ["../../node_modules/@empower-plastic/empowerjs/module/codegen/ibc/applications/transfer/v1/tx.rpc.msg.js", "../../node_modules/@empower-plastic/empowerjs/module/codegen/ibc/applications/transfer/v1/tx.js"],
  "sourcesContent": ["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { MsgTransfer, MsgTransferResponse } from \"./tx\";\n/** Msg defines the ibc/transfer Msg service. */\n\nexport class MsgClientImpl {\n  constructor(rpc) {\n    _defineProperty(this, \"rpc\", void 0);\n    this.rpc = rpc;\n    this.transfer = this.transfer.bind(this);\n  }\n  transfer(request) {\n    const data = MsgTransfer.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.applications.transfer.v1.Msg\", \"Transfer\", data);\n    return promise.then(data => MsgTransferResponse.decode(new _m0.Reader(data)));\n  }\n}", "import { Coin } from \"../../../../cosmos/base/v1beta1/coin\";\nimport { Height } from \"../../../core/client/v1/client\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Long, isSet } from \"../../../../helpers\";\n/**\n * MsgTransfer defines a msg to transfer fungible tokens (i.e Coins) between\n * ICS20 enabled chains. See ICS Spec here:\n * https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures\n */\n\n/**\n * MsgTransfer defines a msg to transfer fungible tokens (i.e Coins) between\n * ICS20 enabled chains. See ICS Spec here:\n * https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures\n */\n\n/** MsgTransferResponse defines the Msg/Transfer response type. */\n\n/** MsgTransferResponse defines the Msg/Transfer response type. */\n\nfunction createBaseMsgTransfer() {\n  return {\n    sourcePort: \"\",\n    sourceChannel: \"\",\n    token: undefined,\n    sender: \"\",\n    receiver: \"\",\n    timeoutHeight: undefined,\n    timeoutTimestamp: BigInt(\"0\"),\n    memo: \"\"\n  };\n}\nexport const MsgTransfer = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.sourcePort !== \"\") {\n      writer.uint32(10).string(message.sourcePort);\n    }\n    if (message.sourceChannel !== \"\") {\n      writer.uint32(18).string(message.sourceChannel);\n    }\n    if (message.token !== undefined) {\n      Coin.encode(message.token, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.sender !== \"\") {\n      writer.uint32(34).string(message.sender);\n    }\n    if (message.receiver !== \"\") {\n      writer.uint32(42).string(message.receiver);\n    }\n    if (message.timeoutHeight !== undefined) {\n      Height.encode(message.timeoutHeight, writer.uint32(50).fork()).ldelim();\n    }\n    if (message.timeoutTimestamp !== BigInt(0)) {\n      writer.uint32(56).uint64(Long.fromString(message.timeoutTimestamp.toString()));\n    }\n    if (message.memo !== \"\") {\n      writer.uint32(66).string(message.memo);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgTransfer();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.sourcePort = reader.string();\n          break;\n        case 2:\n          message.sourceChannel = reader.string();\n          break;\n        case 3:\n          message.token = Coin.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.sender = reader.string();\n          break;\n        case 5:\n          message.receiver = reader.string();\n          break;\n        case 6:\n          message.timeoutHeight = Height.decode(reader, reader.uint32());\n          break;\n        case 7:\n          message.timeoutTimestamp = BigInt(reader.uint64().toString());\n          break;\n        case 8:\n          message.memo = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      sourcePort: isSet(object.sourcePort) ? String(object.sourcePort) : \"\",\n      sourceChannel: isSet(object.sourceChannel) ? String(object.sourceChannel) : \"\",\n      token: isSet(object.token) ? Coin.fromJSON(object.token) : undefined,\n      sender: isSet(object.sender) ? String(object.sender) : \"\",\n      receiver: isSet(object.receiver) ? String(object.receiver) : \"\",\n      timeoutHeight: isSet(object.timeoutHeight) ? Height.fromJSON(object.timeoutHeight) : undefined,\n      timeoutTimestamp: isSet(object.timeoutTimestamp) ? BigInt(object.timeoutTimestamp.toString()) : BigInt(\"0\"),\n      memo: isSet(object.memo) ? String(object.memo) : \"\"\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.sourcePort !== undefined && (obj.sourcePort = message.sourcePort);\n    message.sourceChannel !== undefined && (obj.sourceChannel = message.sourceChannel);\n    message.token !== undefined && (obj.token = message.token ? Coin.toJSON(message.token) : undefined);\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.receiver !== undefined && (obj.receiver = message.receiver);\n    message.timeoutHeight !== undefined && (obj.timeoutHeight = message.timeoutHeight ? Height.toJSON(message.timeoutHeight) : undefined);\n    message.timeoutTimestamp !== undefined && (obj.timeoutTimestamp = (message.timeoutTimestamp || BigInt(\"0\")).toString());\n    message.memo !== undefined && (obj.memo = message.memo);\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$sourcePort, _object$sourceChannel, _object$sender, _object$receiver, _object$memo;\n    const message = createBaseMsgTransfer();\n    message.sourcePort = (_object$sourcePort = object.sourcePort) !== null && _object$sourcePort !== void 0 ? _object$sourcePort : \"\";\n    message.sourceChannel = (_object$sourceChannel = object.sourceChannel) !== null && _object$sourceChannel !== void 0 ? _object$sourceChannel : \"\";\n    message.token = object.token !== undefined && object.token !== null ? Coin.fromPartial(object.token) : undefined;\n    message.sender = (_object$sender = object.sender) !== null && _object$sender !== void 0 ? _object$sender : \"\";\n    message.receiver = (_object$receiver = object.receiver) !== null && _object$receiver !== void 0 ? _object$receiver : \"\";\n    message.timeoutHeight = object.timeoutHeight !== undefined && object.timeoutHeight !== null ? Height.fromPartial(object.timeoutHeight) : undefined;\n    message.timeoutTimestamp = object.timeoutTimestamp !== undefined && object.timeoutTimestamp !== null ? BigInt(object.timeoutTimestamp.toString()) : BigInt(\"0\");\n    message.memo = (_object$memo = object.memo) !== null && _object$memo !== void 0 ? _object$memo : \"\";\n    return message;\n  }\n};\nfunction createBaseMsgTransferResponse() {\n  return {\n    sequence: BigInt(\"0\")\n  };\n}\nexport const MsgTransferResponse = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.sequence !== BigInt(0)) {\n      writer.uint32(8).uint64(Long.fromString(message.sequence.toString()));\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgTransferResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.sequence = BigInt(reader.uint64().toString());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      sequence: isSet(object.sequence) ? BigInt(object.sequence.toString()) : BigInt(\"0\")\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.sequence !== undefined && (obj.sequence = (message.sequence || BigInt(\"0\")).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = createBaseMsgTransferResponse();\n    message.sequence = object.sequence !== undefined && object.sequence !== null ? BigInt(object.sequence.toString()) : BigInt(\"0\");\n    return message;\n  }\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA,IAAAA,OAAqB;;;ACDrB;AAAA;AAAA;AAAA;AAAA;AAEA,UAAqB;AAkBrB,SAAS,wBAAwB;AAC/B,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,eAAe;AAAA,IACf,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,eAAe;AAAA,IACf,kBAAkB,OAAO,GAAG;AAAA,IAC5B,MAAM;AAAA,EACR;AACF;AACO,IAAM,cAAc;AAAA,EACzB,OAAO,SAAS,SAAa,WAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,eAAe,IAAI;AAC7B,aAAO,OAAO,EAAE,EAAE,OAAO,QAAQ,UAAU;AAAA,IAC7C;AACA,QAAI,QAAQ,kBAAkB,IAAI;AAChC,aAAO,OAAO,EAAE,EAAE,OAAO,QAAQ,aAAa;AAAA,IAChD;AACA,QAAI,QAAQ,UAAU,QAAW;AAC/B,WAAK,OAAO,QAAQ,OAAO,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IAC9D;AACA,QAAI,QAAQ,WAAW,IAAI;AACzB,aAAO,OAAO,EAAE,EAAE,OAAO,QAAQ,MAAM;AAAA,IACzC;AACA,QAAI,QAAQ,aAAa,IAAI;AAC3B,aAAO,OAAO,EAAE,EAAE,OAAO,QAAQ,QAAQ;AAAA,IAC3C;AACA,QAAI,QAAQ,kBAAkB,QAAW;AACvC,aAAO,OAAO,QAAQ,eAAe,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACxE;AACA,QAAI,QAAQ,qBAAqB,OAAO,CAAC,GAAG;AAC1C,aAAO,OAAO,EAAE,EAAE,OAAO,YAAAC,QAAK,WAAW,QAAQ,iBAAiB,SAAS,CAAC,CAAC;AAAA,IAC/E;AACA,QAAI,QAAQ,SAAS,IAAI;AACvB,aAAO,OAAO,EAAE,EAAE,OAAO,QAAQ,IAAI;AAAA,IACvC;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,aAAS,QAAQ,IAAQ,WAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,sBAAsB;AACtC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,aAAa,OAAO,OAAO;AACnC;AAAA,QACF,KAAK;AACH,kBAAQ,gBAAgB,OAAO,OAAO;AACtC;AAAA,QACF,KAAK;AACH,kBAAQ,QAAQ,KAAK,OAAO,QAAQ,OAAO,OAAO,CAAC;AACnD;AAAA,QACF,KAAK;AACH,kBAAQ,SAAS,OAAO,OAAO;AAC/B;AAAA,QACF,KAAK;AACH,kBAAQ,WAAW,OAAO,OAAO;AACjC;AAAA,QACF,KAAK;AACH,kBAAQ,gBAAgB,OAAO,OAAO,QAAQ,OAAO,OAAO,CAAC;AAC7D;AAAA,QACF,KAAK;AACH,kBAAQ,mBAAmB,OAAO,OAAO,OAAO,EAAE,SAAS,CAAC;AAC5D;AAAA,QACF,KAAK;AACH,kBAAQ,OAAO,OAAO,OAAO;AAC7B;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,YAAY,MAAM,OAAO,UAAU,IAAI,OAAO,OAAO,UAAU,IAAI;AAAA,MACnE,eAAe,MAAM,OAAO,aAAa,IAAI,OAAO,OAAO,aAAa,IAAI;AAAA,MAC5E,OAAO,MAAM,OAAO,KAAK,IAAI,KAAK,SAAS,OAAO,KAAK,IAAI;AAAA,MAC3D,QAAQ,MAAM,OAAO,MAAM,IAAI,OAAO,OAAO,MAAM,IAAI;AAAA,MACvD,UAAU,MAAM,OAAO,QAAQ,IAAI,OAAO,OAAO,QAAQ,IAAI;AAAA,MAC7D,eAAe,MAAM,OAAO,aAAa,IAAI,OAAO,SAAS,OAAO,aAAa,IAAI;AAAA,MACrF,kBAAkB,MAAM,OAAO,gBAAgB,IAAI,OAAO,OAAO,iBAAiB,SAAS,CAAC,IAAI,OAAO,GAAG;AAAA,MAC1G,MAAM,MAAM,OAAO,IAAI,IAAI,OAAO,OAAO,IAAI,IAAI;AAAA,IACnD;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,eAAe,WAAc,IAAI,aAAa,QAAQ;AAC9D,YAAQ,kBAAkB,WAAc,IAAI,gBAAgB,QAAQ;AACpE,YAAQ,UAAU,WAAc,IAAI,QAAQ,QAAQ,QAAQ,KAAK,OAAO,QAAQ,KAAK,IAAI;AACzF,YAAQ,WAAW,WAAc,IAAI,SAAS,QAAQ;AACtD,YAAQ,aAAa,WAAc,IAAI,WAAW,QAAQ;AAC1D,YAAQ,kBAAkB,WAAc,IAAI,gBAAgB,QAAQ,gBAAgB,OAAO,OAAO,QAAQ,aAAa,IAAI;AAC3H,YAAQ,qBAAqB,WAAc,IAAI,oBAAoB,QAAQ,oBAAoB,OAAO,GAAG,GAAG,SAAS;AACrH,YAAQ,SAAS,WAAc,IAAI,OAAO,QAAQ;AAClD,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI,oBAAoB,uBAAuB,gBAAgB,kBAAkB;AACjF,UAAM,UAAU,sBAAsB;AACtC,YAAQ,cAAc,qBAAqB,OAAO,gBAAgB,QAAQ,uBAAuB,SAAS,qBAAqB;AAC/H,YAAQ,iBAAiB,wBAAwB,OAAO,mBAAmB,QAAQ,0BAA0B,SAAS,wBAAwB;AAC9I,YAAQ,QAAQ,OAAO,UAAU,UAAa,OAAO,UAAU,OAAO,KAAK,YAAY,OAAO,KAAK,IAAI;AACvG,YAAQ,UAAU,iBAAiB,OAAO,YAAY,QAAQ,mBAAmB,SAAS,iBAAiB;AAC3G,YAAQ,YAAY,mBAAmB,OAAO,cAAc,QAAQ,qBAAqB,SAAS,mBAAmB;AACrH,YAAQ,gBAAgB,OAAO,kBAAkB,UAAa,OAAO,kBAAkB,OAAO,OAAO,YAAY,OAAO,aAAa,IAAI;AACzI,YAAQ,mBAAmB,OAAO,qBAAqB,UAAa,OAAO,qBAAqB,OAAO,OAAO,OAAO,iBAAiB,SAAS,CAAC,IAAI,OAAO,GAAG;AAC9J,YAAQ,QAAQ,eAAe,OAAO,UAAU,QAAQ,iBAAiB,SAAS,eAAe;AACjG,WAAO;AAAA,EACT;AACF;AACA,SAAS,gCAAgC;AACvC,SAAO;AAAA,IACL,UAAU,OAAO,GAAG;AAAA,EACtB;AACF;AACO,IAAM,sBAAsB;AAAA,EACjC,OAAO,SAAS,SAAa,WAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,aAAa,OAAO,CAAC,GAAG;AAClC,aAAO,OAAO,CAAC,EAAE,OAAO,YAAAA,QAAK,WAAW,QAAQ,SAAS,SAAS,CAAC,CAAC;AAAA,IACtE;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,aAAS,QAAQ,IAAQ,WAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,8BAA8B;AAC9C,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,WAAW,OAAO,OAAO,OAAO,EAAE,SAAS,CAAC;AACpD;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,UAAU,MAAM,OAAO,QAAQ,IAAI,OAAO,OAAO,SAAS,SAAS,CAAC,IAAI,OAAO,GAAG;AAAA,IACpF;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,aAAa,WAAc,IAAI,YAAY,QAAQ,YAAY,OAAO,GAAG,GAAG,SAAS;AAC7F,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,UAAM,UAAU,8BAA8B;AAC9C,YAAQ,WAAW,OAAO,aAAa,UAAa,OAAO,aAAa,OAAO,OAAO,OAAO,SAAS,SAAS,CAAC,IAAI,OAAO,GAAG;AAC9H,WAAO;AAAA,EACT;AACF;;;AD/KO,IAAM,gBAAN,MAAoB;AAAA,EACzB,YAAY,KAAK;AACf,oBAAgB,MAAM,OAAO,MAAM;AACnC,SAAK,MAAM;AACX,SAAK,WAAW,KAAK,SAAS,KAAK,IAAI;AAAA,EACzC;AAAA,EACA,SAAS,SAAS;AAChB,UAAM,OAAO,YAAY,OAAO,OAAO,EAAE,OAAO;AAChD,UAAM,UAAU,KAAK,IAAI,QAAQ,oCAAoC,YAAY,IAAI;AACrF,WAAO,QAAQ,KAAK,CAAAC,UAAQ,oBAAoB,OAAO,IAAQ,YAAOA,KAAI,CAAC,CAAC;AAAA,EAC9E;AACF;",
  "names": ["_m0", "Long", "data"]
}
