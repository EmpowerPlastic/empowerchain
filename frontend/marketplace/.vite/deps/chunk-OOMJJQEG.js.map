{
  "version": 3,
  "sources": ["../../node_modules/@empower-plastic/empowerjs/module/codegen/tendermint/crypto/proof.js", "../../node_modules/@empower-plastic/empowerjs/module/codegen/tendermint/version/types.js", "../../node_modules/@empower-plastic/empowerjs/module/codegen/tendermint/crypto/keys.js", "../../node_modules/@empower-plastic/empowerjs/module/codegen/tendermint/types/validator.js", "../../node_modules/@empower-plastic/empowerjs/module/codegen/tendermint/types/types.js"],
  "sourcesContent": ["import * as _m0 from \"protobufjs/minimal\";\nimport { Long, isSet, bytesFromBase64, base64FromBytes } from \"../../helpers\";\n\n/**\n * ProofOp defines an operation used for calculating Merkle root\n * The data could be arbitrary format, providing nessecary data\n * for example neighbouring node hash\n */\n\n/**\n * ProofOp defines an operation used for calculating Merkle root\n * The data could be arbitrary format, providing nessecary data\n * for example neighbouring node hash\n */\n\n/** ProofOps is Merkle proof defined by the list of ProofOps */\n\n/** ProofOps is Merkle proof defined by the list of ProofOps */\n\nfunction createBaseProof() {\n  return {\n    total: BigInt(\"0\"),\n    index: BigInt(\"0\"),\n    leafHash: new Uint8Array(),\n    aunts: []\n  };\n}\nexport const Proof = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.total !== BigInt(0)) {\n      writer.uint32(8).int64(Long.fromString(message.total.toString()));\n    }\n    if (message.index !== BigInt(0)) {\n      writer.uint32(16).int64(Long.fromString(message.index.toString()));\n    }\n    if (message.leafHash.length !== 0) {\n      writer.uint32(26).bytes(message.leafHash);\n    }\n    for (const v of message.aunts) {\n      writer.uint32(34).bytes(v);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseProof();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.total = BigInt(reader.int64().toString());\n          break;\n        case 2:\n          message.index = BigInt(reader.int64().toString());\n          break;\n        case 3:\n          message.leafHash = reader.bytes();\n          break;\n        case 4:\n          message.aunts.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      total: isSet(object.total) ? BigInt(object.total.toString()) : BigInt(\"0\"),\n      index: isSet(object.index) ? BigInt(object.index.toString()) : BigInt(\"0\"),\n      leafHash: isSet(object.leafHash) ? bytesFromBase64(object.leafHash) : new Uint8Array(),\n      aunts: Array.isArray(object === null || object === void 0 ? void 0 : object.aunts) ? object.aunts.map(e => bytesFromBase64(e)) : []\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.total !== undefined && (obj.total = (message.total || BigInt(\"0\")).toString());\n    message.index !== undefined && (obj.index = (message.index || BigInt(\"0\")).toString());\n    message.leafHash !== undefined && (obj.leafHash = base64FromBytes(message.leafHash !== undefined ? message.leafHash : new Uint8Array()));\n    if (message.aunts) {\n      obj.aunts = message.aunts.map(e => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n    } else {\n      obj.aunts = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$leafHash, _object$aunts;\n    const message = createBaseProof();\n    message.total = object.total !== undefined && object.total !== null ? BigInt(object.total.toString()) : BigInt(\"0\");\n    message.index = object.index !== undefined && object.index !== null ? BigInt(object.index.toString()) : BigInt(\"0\");\n    message.leafHash = (_object$leafHash = object.leafHash) !== null && _object$leafHash !== void 0 ? _object$leafHash : new Uint8Array();\n    message.aunts = ((_object$aunts = object.aunts) === null || _object$aunts === void 0 ? void 0 : _object$aunts.map(e => e)) || [];\n    return message;\n  }\n};\nfunction createBaseValueOp() {\n  return {\n    key: new Uint8Array(),\n    proof: undefined\n  };\n}\nexport const ValueOp = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n    if (message.proof !== undefined) {\n      Proof.encode(message.proof, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseValueOp();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n        case 2:\n          message.proof = Proof.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(),\n      proof: isSet(object.proof) ? Proof.fromJSON(object.proof) : undefined\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.key !== undefined && (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n    message.proof !== undefined && (obj.proof = message.proof ? Proof.toJSON(message.proof) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$key;\n    const message = createBaseValueOp();\n    message.key = (_object$key = object.key) !== null && _object$key !== void 0 ? _object$key : new Uint8Array();\n    message.proof = object.proof !== undefined && object.proof !== null ? Proof.fromPartial(object.proof) : undefined;\n    return message;\n  }\n};\nfunction createBaseDominoOp() {\n  return {\n    key: \"\",\n    input: \"\",\n    output: \"\"\n  };\n}\nexport const DominoOp = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.key !== \"\") {\n      writer.uint32(10).string(message.key);\n    }\n    if (message.input !== \"\") {\n      writer.uint32(18).string(message.input);\n    }\n    if (message.output !== \"\") {\n      writer.uint32(26).string(message.output);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDominoOp();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.string();\n          break;\n        case 2:\n          message.input = reader.string();\n          break;\n        case 3:\n          message.output = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      key: isSet(object.key) ? String(object.key) : \"\",\n      input: isSet(object.input) ? String(object.input) : \"\",\n      output: isSet(object.output) ? String(object.output) : \"\"\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.key !== undefined && (obj.key = message.key);\n    message.input !== undefined && (obj.input = message.input);\n    message.output !== undefined && (obj.output = message.output);\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$key2, _object$input, _object$output;\n    const message = createBaseDominoOp();\n    message.key = (_object$key2 = object.key) !== null && _object$key2 !== void 0 ? _object$key2 : \"\";\n    message.input = (_object$input = object.input) !== null && _object$input !== void 0 ? _object$input : \"\";\n    message.output = (_object$output = object.output) !== null && _object$output !== void 0 ? _object$output : \"\";\n    return message;\n  }\n};\nfunction createBaseProofOp() {\n  return {\n    type: \"\",\n    key: new Uint8Array(),\n    data: new Uint8Array()\n  };\n}\nexport const ProofOp = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.type !== \"\") {\n      writer.uint32(10).string(message.type);\n    }\n    if (message.key.length !== 0) {\n      writer.uint32(18).bytes(message.key);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(26).bytes(message.data);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseProofOp();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.string();\n          break;\n        case 2:\n          message.key = reader.bytes();\n          break;\n        case 3:\n          message.data = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      type: isSet(object.type) ? String(object.type) : \"\",\n      key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(),\n      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array()\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.type !== undefined && (obj.type = message.type);\n    message.key !== undefined && (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$type, _object$key3, _object$data;\n    const message = createBaseProofOp();\n    message.type = (_object$type = object.type) !== null && _object$type !== void 0 ? _object$type : \"\";\n    message.key = (_object$key3 = object.key) !== null && _object$key3 !== void 0 ? _object$key3 : new Uint8Array();\n    message.data = (_object$data = object.data) !== null && _object$data !== void 0 ? _object$data : new Uint8Array();\n    return message;\n  }\n};\nfunction createBaseProofOps() {\n  return {\n    ops: []\n  };\n}\nexport const ProofOps = {\n  encode(message, writer = _m0.Writer.create()) {\n    for (const v of message.ops) {\n      ProofOp.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseProofOps();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.ops.push(ProofOp.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      ops: Array.isArray(object === null || object === void 0 ? void 0 : object.ops) ? object.ops.map(e => ProofOp.fromJSON(e)) : []\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.ops) {\n      obj.ops = message.ops.map(e => e ? ProofOp.toJSON(e) : undefined);\n    } else {\n      obj.ops = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$ops;\n    const message = createBaseProofOps();\n    message.ops = ((_object$ops = object.ops) === null || _object$ops === void 0 ? void 0 : _object$ops.map(e => ProofOp.fromPartial(e))) || [];\n    return message;\n  }\n};", "import * as _m0 from \"protobufjs/minimal\";\nimport { Long, isSet } from \"../../helpers\";\n/**\n * App includes the protocol and software version for the application.\n * This information is included in ResponseInfo. The App.Protocol can be\n * updated in ResponseEndBlock.\n */\n\n/**\n * App includes the protocol and software version for the application.\n * This information is included in ResponseInfo. The App.Protocol can be\n * updated in ResponseEndBlock.\n */\n\n/**\n * Consensus captures the consensus rules for processing a block in the blockchain,\n * including all blockchain data structures and the rules of the application's\n * state transition machine.\n */\n\n/**\n * Consensus captures the consensus rules for processing a block in the blockchain,\n * including all blockchain data structures and the rules of the application's\n * state transition machine.\n */\n\nfunction createBaseApp() {\n  return {\n    protocol: BigInt(\"0\"),\n    software: \"\"\n  };\n}\nexport const App = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.protocol !== BigInt(0)) {\n      writer.uint32(8).uint64(Long.fromString(message.protocol.toString()));\n    }\n    if (message.software !== \"\") {\n      writer.uint32(18).string(message.software);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseApp();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.protocol = BigInt(reader.uint64().toString());\n          break;\n        case 2:\n          message.software = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      protocol: isSet(object.protocol) ? BigInt(object.protocol.toString()) : BigInt(\"0\"),\n      software: isSet(object.software) ? String(object.software) : \"\"\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.protocol !== undefined && (obj.protocol = (message.protocol || BigInt(\"0\")).toString());\n    message.software !== undefined && (obj.software = message.software);\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$software;\n    const message = createBaseApp();\n    message.protocol = object.protocol !== undefined && object.protocol !== null ? BigInt(object.protocol.toString()) : BigInt(\"0\");\n    message.software = (_object$software = object.software) !== null && _object$software !== void 0 ? _object$software : \"\";\n    return message;\n  }\n};\nfunction createBaseConsensus() {\n  return {\n    block: BigInt(\"0\"),\n    app: BigInt(\"0\")\n  };\n}\nexport const Consensus = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.block !== BigInt(0)) {\n      writer.uint32(8).uint64(Long.fromString(message.block.toString()));\n    }\n    if (message.app !== BigInt(0)) {\n      writer.uint32(16).uint64(Long.fromString(message.app.toString()));\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseConsensus();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.block = BigInt(reader.uint64().toString());\n          break;\n        case 2:\n          message.app = BigInt(reader.uint64().toString());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      block: isSet(object.block) ? BigInt(object.block.toString()) : BigInt(\"0\"),\n      app: isSet(object.app) ? BigInt(object.app.toString()) : BigInt(\"0\")\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.block !== undefined && (obj.block = (message.block || BigInt(\"0\")).toString());\n    message.app !== undefined && (obj.app = (message.app || BigInt(\"0\")).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = createBaseConsensus();\n    message.block = object.block !== undefined && object.block !== null ? BigInt(object.block.toString()) : BigInt(\"0\");\n    message.app = object.app !== undefined && object.app !== null ? BigInt(object.app.toString()) : BigInt(\"0\");\n    return message;\n  }\n};", "import * as _m0 from \"protobufjs/minimal\";\nimport { isSet, bytesFromBase64, base64FromBytes } from \"../../helpers\";\n/** PublicKey defines the keys available for use with Validators */\n\n/** PublicKey defines the keys available for use with Validators */\n\nfunction createBasePublicKey() {\n  return {\n    ed25519: undefined,\n    secp256k1: undefined\n  };\n}\nexport const PublicKey = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.ed25519 !== undefined) {\n      writer.uint32(10).bytes(message.ed25519);\n    }\n    if (message.secp256k1 !== undefined) {\n      writer.uint32(18).bytes(message.secp256k1);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBasePublicKey();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.ed25519 = reader.bytes();\n          break;\n        case 2:\n          message.secp256k1 = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      ed25519: isSet(object.ed25519) ? bytesFromBase64(object.ed25519) : undefined,\n      secp256k1: isSet(object.secp256k1) ? bytesFromBase64(object.secp256k1) : undefined\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.ed25519 !== undefined && (obj.ed25519 = message.ed25519 !== undefined ? base64FromBytes(message.ed25519) : undefined);\n    message.secp256k1 !== undefined && (obj.secp256k1 = message.secp256k1 !== undefined ? base64FromBytes(message.secp256k1) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$ed, _object$secp256k;\n    const message = createBasePublicKey();\n    message.ed25519 = (_object$ed = object.ed25519) !== null && _object$ed !== void 0 ? _object$ed : undefined;\n    message.secp256k1 = (_object$secp256k = object.secp256k1) !== null && _object$secp256k !== void 0 ? _object$secp256k : undefined;\n    return message;\n  }\n};", "import { PublicKey } from \"../crypto/keys\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Long, isSet, bytesFromBase64, base64FromBytes } from \"../../helpers\";\nfunction createBaseValidatorSet() {\n  return {\n    validators: [],\n    proposer: undefined,\n    totalVotingPower: BigInt(\"0\")\n  };\n}\nexport const ValidatorSet = {\n  encode(message, writer = _m0.Writer.create()) {\n    for (const v of message.validators) {\n      Validator.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.proposer !== undefined) {\n      Validator.encode(message.proposer, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.totalVotingPower !== BigInt(0)) {\n      writer.uint32(24).int64(Long.fromString(message.totalVotingPower.toString()));\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseValidatorSet();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.validators.push(Validator.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.proposer = Validator.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.totalVotingPower = BigInt(reader.int64().toString());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      validators: Array.isArray(object === null || object === void 0 ? void 0 : object.validators) ? object.validators.map(e => Validator.fromJSON(e)) : [],\n      proposer: isSet(object.proposer) ? Validator.fromJSON(object.proposer) : undefined,\n      totalVotingPower: isSet(object.totalVotingPower) ? BigInt(object.totalVotingPower.toString()) : BigInt(\"0\")\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.validators) {\n      obj.validators = message.validators.map(e => e ? Validator.toJSON(e) : undefined);\n    } else {\n      obj.validators = [];\n    }\n    message.proposer !== undefined && (obj.proposer = message.proposer ? Validator.toJSON(message.proposer) : undefined);\n    message.totalVotingPower !== undefined && (obj.totalVotingPower = (message.totalVotingPower || BigInt(\"0\")).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$validators;\n    const message = createBaseValidatorSet();\n    message.validators = ((_object$validators = object.validators) === null || _object$validators === void 0 ? void 0 : _object$validators.map(e => Validator.fromPartial(e))) || [];\n    message.proposer = object.proposer !== undefined && object.proposer !== null ? Validator.fromPartial(object.proposer) : undefined;\n    message.totalVotingPower = object.totalVotingPower !== undefined && object.totalVotingPower !== null ? BigInt(object.totalVotingPower.toString()) : BigInt(\"0\");\n    return message;\n  }\n};\nfunction createBaseValidator() {\n  return {\n    address: new Uint8Array(),\n    pubKey: undefined,\n    votingPower: BigInt(\"0\"),\n    proposerPriority: BigInt(\"0\")\n  };\n}\nexport const Validator = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.address.length !== 0) {\n      writer.uint32(10).bytes(message.address);\n    }\n    if (message.pubKey !== undefined) {\n      PublicKey.encode(message.pubKey, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.votingPower !== BigInt(0)) {\n      writer.uint32(24).int64(Long.fromString(message.votingPower.toString()));\n    }\n    if (message.proposerPriority !== BigInt(0)) {\n      writer.uint32(32).int64(Long.fromString(message.proposerPriority.toString()));\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseValidator();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.address = reader.bytes();\n          break;\n        case 2:\n          message.pubKey = PublicKey.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.votingPower = BigInt(reader.int64().toString());\n          break;\n        case 4:\n          message.proposerPriority = BigInt(reader.int64().toString());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      address: isSet(object.address) ? bytesFromBase64(object.address) : new Uint8Array(),\n      pubKey: isSet(object.pubKey) ? PublicKey.fromJSON(object.pubKey) : undefined,\n      votingPower: isSet(object.votingPower) ? BigInt(object.votingPower.toString()) : BigInt(\"0\"),\n      proposerPriority: isSet(object.proposerPriority) ? BigInt(object.proposerPriority.toString()) : BigInt(\"0\")\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.address !== undefined && (obj.address = base64FromBytes(message.address !== undefined ? message.address : new Uint8Array()));\n    message.pubKey !== undefined && (obj.pubKey = message.pubKey ? PublicKey.toJSON(message.pubKey) : undefined);\n    message.votingPower !== undefined && (obj.votingPower = (message.votingPower || BigInt(\"0\")).toString());\n    message.proposerPriority !== undefined && (obj.proposerPriority = (message.proposerPriority || BigInt(\"0\")).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$address;\n    const message = createBaseValidator();\n    message.address = (_object$address = object.address) !== null && _object$address !== void 0 ? _object$address : new Uint8Array();\n    message.pubKey = object.pubKey !== undefined && object.pubKey !== null ? PublicKey.fromPartial(object.pubKey) : undefined;\n    message.votingPower = object.votingPower !== undefined && object.votingPower !== null ? BigInt(object.votingPower.toString()) : BigInt(\"0\");\n    message.proposerPriority = object.proposerPriority !== undefined && object.proposerPriority !== null ? BigInt(object.proposerPriority.toString()) : BigInt(\"0\");\n    return message;\n  }\n};\nfunction createBaseSimpleValidator() {\n  return {\n    pubKey: undefined,\n    votingPower: BigInt(\"0\")\n  };\n}\nexport const SimpleValidator = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.pubKey !== undefined) {\n      PublicKey.encode(message.pubKey, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.votingPower !== BigInt(0)) {\n      writer.uint32(16).int64(Long.fromString(message.votingPower.toString()));\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSimpleValidator();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.pubKey = PublicKey.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.votingPower = BigInt(reader.int64().toString());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      pubKey: isSet(object.pubKey) ? PublicKey.fromJSON(object.pubKey) : undefined,\n      votingPower: isSet(object.votingPower) ? BigInt(object.votingPower.toString()) : BigInt(\"0\")\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.pubKey !== undefined && (obj.pubKey = message.pubKey ? PublicKey.toJSON(message.pubKey) : undefined);\n    message.votingPower !== undefined && (obj.votingPower = (message.votingPower || BigInt(\"0\")).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = createBaseSimpleValidator();\n    message.pubKey = object.pubKey !== undefined && object.pubKey !== null ? PublicKey.fromPartial(object.pubKey) : undefined;\n    message.votingPower = object.votingPower !== undefined && object.votingPower !== null ? BigInt(object.votingPower.toString()) : BigInt(\"0\");\n    return message;\n  }\n};", "import { Proof } from \"../crypto/proof\";\nimport { Consensus } from \"../version/types\";\nimport { Timestamp } from \"../../google/protobuf/timestamp\";\nimport { ValidatorSet } from \"./validator\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { isSet, bytesFromBase64, base64FromBytes, Long, toTimestamp, fromTimestamp, fromJsonTimestamp } from \"../../helpers\";\n/** BlockIdFlag indicates which BlcokID the signature is for */\nexport let BlockIDFlag = /*#__PURE__*/function (BlockIDFlag) {\n  BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_UNKNOWN\"] = 0] = \"BLOCK_ID_FLAG_UNKNOWN\";\n  BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_ABSENT\"] = 1] = \"BLOCK_ID_FLAG_ABSENT\";\n  BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_COMMIT\"] = 2] = \"BLOCK_ID_FLAG_COMMIT\";\n  BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_NIL\"] = 3] = \"BLOCK_ID_FLAG_NIL\";\n  BlockIDFlag[BlockIDFlag[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n  return BlockIDFlag;\n}({});\nexport const BlockIDFlagSDKType = BlockIDFlag;\nexport function blockIDFlagFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"BLOCK_ID_FLAG_UNKNOWN\":\n      return BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN;\n    case 1:\n    case \"BLOCK_ID_FLAG_ABSENT\":\n      return BlockIDFlag.BLOCK_ID_FLAG_ABSENT;\n    case 2:\n    case \"BLOCK_ID_FLAG_COMMIT\":\n      return BlockIDFlag.BLOCK_ID_FLAG_COMMIT;\n    case 3:\n    case \"BLOCK_ID_FLAG_NIL\":\n      return BlockIDFlag.BLOCK_ID_FLAG_NIL;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return BlockIDFlag.UNRECOGNIZED;\n  }\n}\nexport function blockIDFlagToJSON(object) {\n  switch (object) {\n    case BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN:\n      return \"BLOCK_ID_FLAG_UNKNOWN\";\n    case BlockIDFlag.BLOCK_ID_FLAG_ABSENT:\n      return \"BLOCK_ID_FLAG_ABSENT\";\n    case BlockIDFlag.BLOCK_ID_FLAG_COMMIT:\n      return \"BLOCK_ID_FLAG_COMMIT\";\n    case BlockIDFlag.BLOCK_ID_FLAG_NIL:\n      return \"BLOCK_ID_FLAG_NIL\";\n    case BlockIDFlag.UNRECOGNIZED:\n    default:\n      return \"UNRECOGNIZED\";\n  }\n}\n/** SignedMsgType is a type of signed message in the consensus. */\nexport let SignedMsgType = /*#__PURE__*/function (SignedMsgType) {\n  SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_UNKNOWN\"] = 0] = \"SIGNED_MSG_TYPE_UNKNOWN\";\n  SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_PREVOTE\"] = 1] = \"SIGNED_MSG_TYPE_PREVOTE\";\n  SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_PRECOMMIT\"] = 2] = \"SIGNED_MSG_TYPE_PRECOMMIT\";\n  SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_PROPOSAL\"] = 32] = \"SIGNED_MSG_TYPE_PROPOSAL\";\n  SignedMsgType[SignedMsgType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n  return SignedMsgType;\n}({});\nexport const SignedMsgTypeSDKType = SignedMsgType;\nexport function signedMsgTypeFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"SIGNED_MSG_TYPE_UNKNOWN\":\n      return SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN;\n    case 1:\n    case \"SIGNED_MSG_TYPE_PREVOTE\":\n      return SignedMsgType.SIGNED_MSG_TYPE_PREVOTE;\n    case 2:\n    case \"SIGNED_MSG_TYPE_PRECOMMIT\":\n      return SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT;\n    case 32:\n    case \"SIGNED_MSG_TYPE_PROPOSAL\":\n      return SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return SignedMsgType.UNRECOGNIZED;\n  }\n}\nexport function signedMsgTypeToJSON(object) {\n  switch (object) {\n    case SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN:\n      return \"SIGNED_MSG_TYPE_UNKNOWN\";\n    case SignedMsgType.SIGNED_MSG_TYPE_PREVOTE:\n      return \"SIGNED_MSG_TYPE_PREVOTE\";\n    case SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT:\n      return \"SIGNED_MSG_TYPE_PRECOMMIT\";\n    case SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL:\n      return \"SIGNED_MSG_TYPE_PROPOSAL\";\n    case SignedMsgType.UNRECOGNIZED:\n    default:\n      return \"UNRECOGNIZED\";\n  }\n}\n/** PartsetHeader */\n\n/** PartsetHeader */\n\n/** BlockID */\n\n/** BlockID */\n\n/** Header defines the structure of a block header. */\n\n/** Header defines the structure of a block header. */\n\n/** Data contains the set of transactions included in the block */\n\n/** Data contains the set of transactions included in the block */\n\n/**\n * Vote represents a prevote, precommit, or commit vote from validators for\n * consensus.\n */\n\n/**\n * Vote represents a prevote, precommit, or commit vote from validators for\n * consensus.\n */\n\n/** Commit contains the evidence that a block was committed by a set of validators. */\n\n/** Commit contains the evidence that a block was committed by a set of validators. */\n\n/** CommitSig is a part of the Vote included in a Commit. */\n\n/** CommitSig is a part of the Vote included in a Commit. */\n\n/** TxProof represents a Merkle proof of the presence of a transaction in the Merkle tree. */\n\n/** TxProof represents a Merkle proof of the presence of a transaction in the Merkle tree. */\n\nfunction createBasePartSetHeader() {\n  return {\n    total: 0,\n    hash: new Uint8Array()\n  };\n}\nexport const PartSetHeader = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.total !== 0) {\n      writer.uint32(8).uint32(message.total);\n    }\n    if (message.hash.length !== 0) {\n      writer.uint32(18).bytes(message.hash);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBasePartSetHeader();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.total = reader.uint32();\n          break;\n        case 2:\n          message.hash = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      total: isSet(object.total) ? Number(object.total) : 0,\n      hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array()\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.total !== undefined && (obj.total = Math.round(message.total));\n    message.hash !== undefined && (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$total, _object$hash;\n    const message = createBasePartSetHeader();\n    message.total = (_object$total = object.total) !== null && _object$total !== void 0 ? _object$total : 0;\n    message.hash = (_object$hash = object.hash) !== null && _object$hash !== void 0 ? _object$hash : new Uint8Array();\n    return message;\n  }\n};\nfunction createBasePart() {\n  return {\n    index: 0,\n    bytes: new Uint8Array(),\n    proof: undefined\n  };\n}\nexport const Part = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.index !== 0) {\n      writer.uint32(8).uint32(message.index);\n    }\n    if (message.bytes.length !== 0) {\n      writer.uint32(18).bytes(message.bytes);\n    }\n    if (message.proof !== undefined) {\n      Proof.encode(message.proof, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBasePart();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.index = reader.uint32();\n          break;\n        case 2:\n          message.bytes = reader.bytes();\n          break;\n        case 3:\n          message.proof = Proof.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      index: isSet(object.index) ? Number(object.index) : 0,\n      bytes: isSet(object.bytes) ? bytesFromBase64(object.bytes) : new Uint8Array(),\n      proof: isSet(object.proof) ? Proof.fromJSON(object.proof) : undefined\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.index !== undefined && (obj.index = Math.round(message.index));\n    message.bytes !== undefined && (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n    message.proof !== undefined && (obj.proof = message.proof ? Proof.toJSON(message.proof) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$index, _object$bytes;\n    const message = createBasePart();\n    message.index = (_object$index = object.index) !== null && _object$index !== void 0 ? _object$index : 0;\n    message.bytes = (_object$bytes = object.bytes) !== null && _object$bytes !== void 0 ? _object$bytes : new Uint8Array();\n    message.proof = object.proof !== undefined && object.proof !== null ? Proof.fromPartial(object.proof) : undefined;\n    return message;\n  }\n};\nfunction createBaseBlockID() {\n  return {\n    hash: new Uint8Array(),\n    partSetHeader: undefined\n  };\n}\nexport const BlockID = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.hash.length !== 0) {\n      writer.uint32(10).bytes(message.hash);\n    }\n    if (message.partSetHeader !== undefined) {\n      PartSetHeader.encode(message.partSetHeader, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseBlockID();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.hash = reader.bytes();\n          break;\n        case 2:\n          message.partSetHeader = PartSetHeader.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(),\n      partSetHeader: isSet(object.partSetHeader) ? PartSetHeader.fromJSON(object.partSetHeader) : undefined\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.hash !== undefined && (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n    message.partSetHeader !== undefined && (obj.partSetHeader = message.partSetHeader ? PartSetHeader.toJSON(message.partSetHeader) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$hash2;\n    const message = createBaseBlockID();\n    message.hash = (_object$hash2 = object.hash) !== null && _object$hash2 !== void 0 ? _object$hash2 : new Uint8Array();\n    message.partSetHeader = object.partSetHeader !== undefined && object.partSetHeader !== null ? PartSetHeader.fromPartial(object.partSetHeader) : undefined;\n    return message;\n  }\n};\nfunction createBaseHeader() {\n  return {\n    version: undefined,\n    chainId: \"\",\n    height: BigInt(\"0\"),\n    time: undefined,\n    lastBlockId: undefined,\n    lastCommitHash: new Uint8Array(),\n    dataHash: new Uint8Array(),\n    validatorsHash: new Uint8Array(),\n    nextValidatorsHash: new Uint8Array(),\n    consensusHash: new Uint8Array(),\n    appHash: new Uint8Array(),\n    lastResultsHash: new Uint8Array(),\n    evidenceHash: new Uint8Array(),\n    proposerAddress: new Uint8Array()\n  };\n}\nexport const Header = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.version !== undefined) {\n      Consensus.encode(message.version, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.chainId !== \"\") {\n      writer.uint32(18).string(message.chainId);\n    }\n    if (message.height !== BigInt(0)) {\n      writer.uint32(24).int64(Long.fromString(message.height.toString()));\n    }\n    if (message.time !== undefined) {\n      Timestamp.encode(toTimestamp(message.time), writer.uint32(34).fork()).ldelim();\n    }\n    if (message.lastBlockId !== undefined) {\n      BlockID.encode(message.lastBlockId, writer.uint32(42).fork()).ldelim();\n    }\n    if (message.lastCommitHash.length !== 0) {\n      writer.uint32(50).bytes(message.lastCommitHash);\n    }\n    if (message.dataHash.length !== 0) {\n      writer.uint32(58).bytes(message.dataHash);\n    }\n    if (message.validatorsHash.length !== 0) {\n      writer.uint32(66).bytes(message.validatorsHash);\n    }\n    if (message.nextValidatorsHash.length !== 0) {\n      writer.uint32(74).bytes(message.nextValidatorsHash);\n    }\n    if (message.consensusHash.length !== 0) {\n      writer.uint32(82).bytes(message.consensusHash);\n    }\n    if (message.appHash.length !== 0) {\n      writer.uint32(90).bytes(message.appHash);\n    }\n    if (message.lastResultsHash.length !== 0) {\n      writer.uint32(98).bytes(message.lastResultsHash);\n    }\n    if (message.evidenceHash.length !== 0) {\n      writer.uint32(106).bytes(message.evidenceHash);\n    }\n    if (message.proposerAddress.length !== 0) {\n      writer.uint32(114).bytes(message.proposerAddress);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseHeader();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.version = Consensus.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.chainId = reader.string();\n          break;\n        case 3:\n          message.height = BigInt(reader.int64().toString());\n          break;\n        case 4:\n          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n          break;\n        case 5:\n          message.lastBlockId = BlockID.decode(reader, reader.uint32());\n          break;\n        case 6:\n          message.lastCommitHash = reader.bytes();\n          break;\n        case 7:\n          message.dataHash = reader.bytes();\n          break;\n        case 8:\n          message.validatorsHash = reader.bytes();\n          break;\n        case 9:\n          message.nextValidatorsHash = reader.bytes();\n          break;\n        case 10:\n          message.consensusHash = reader.bytes();\n          break;\n        case 11:\n          message.appHash = reader.bytes();\n          break;\n        case 12:\n          message.lastResultsHash = reader.bytes();\n          break;\n        case 13:\n          message.evidenceHash = reader.bytes();\n          break;\n        case 14:\n          message.proposerAddress = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      version: isSet(object.version) ? Consensus.fromJSON(object.version) : undefined,\n      chainId: isSet(object.chainId) ? String(object.chainId) : \"\",\n      height: isSet(object.height) ? BigInt(object.height.toString()) : BigInt(\"0\"),\n      time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,\n      lastBlockId: isSet(object.lastBlockId) ? BlockID.fromJSON(object.lastBlockId) : undefined,\n      lastCommitHash: isSet(object.lastCommitHash) ? bytesFromBase64(object.lastCommitHash) : new Uint8Array(),\n      dataHash: isSet(object.dataHash) ? bytesFromBase64(object.dataHash) : new Uint8Array(),\n      validatorsHash: isSet(object.validatorsHash) ? bytesFromBase64(object.validatorsHash) : new Uint8Array(),\n      nextValidatorsHash: isSet(object.nextValidatorsHash) ? bytesFromBase64(object.nextValidatorsHash) : new Uint8Array(),\n      consensusHash: isSet(object.consensusHash) ? bytesFromBase64(object.consensusHash) : new Uint8Array(),\n      appHash: isSet(object.appHash) ? bytesFromBase64(object.appHash) : new Uint8Array(),\n      lastResultsHash: isSet(object.lastResultsHash) ? bytesFromBase64(object.lastResultsHash) : new Uint8Array(),\n      evidenceHash: isSet(object.evidenceHash) ? bytesFromBase64(object.evidenceHash) : new Uint8Array(),\n      proposerAddress: isSet(object.proposerAddress) ? bytesFromBase64(object.proposerAddress) : new Uint8Array()\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.version !== undefined && (obj.version = message.version ? Consensus.toJSON(message.version) : undefined);\n    message.chainId !== undefined && (obj.chainId = message.chainId);\n    message.height !== undefined && (obj.height = (message.height || BigInt(\"0\")).toString());\n    message.time !== undefined && (obj.time = message.time.toISOString());\n    message.lastBlockId !== undefined && (obj.lastBlockId = message.lastBlockId ? BlockID.toJSON(message.lastBlockId) : undefined);\n    message.lastCommitHash !== undefined && (obj.lastCommitHash = base64FromBytes(message.lastCommitHash !== undefined ? message.lastCommitHash : new Uint8Array()));\n    message.dataHash !== undefined && (obj.dataHash = base64FromBytes(message.dataHash !== undefined ? message.dataHash : new Uint8Array()));\n    message.validatorsHash !== undefined && (obj.validatorsHash = base64FromBytes(message.validatorsHash !== undefined ? message.validatorsHash : new Uint8Array()));\n    message.nextValidatorsHash !== undefined && (obj.nextValidatorsHash = base64FromBytes(message.nextValidatorsHash !== undefined ? message.nextValidatorsHash : new Uint8Array()));\n    message.consensusHash !== undefined && (obj.consensusHash = base64FromBytes(message.consensusHash !== undefined ? message.consensusHash : new Uint8Array()));\n    message.appHash !== undefined && (obj.appHash = base64FromBytes(message.appHash !== undefined ? message.appHash : new Uint8Array()));\n    message.lastResultsHash !== undefined && (obj.lastResultsHash = base64FromBytes(message.lastResultsHash !== undefined ? message.lastResultsHash : new Uint8Array()));\n    message.evidenceHash !== undefined && (obj.evidenceHash = base64FromBytes(message.evidenceHash !== undefined ? message.evidenceHash : new Uint8Array()));\n    message.proposerAddress !== undefined && (obj.proposerAddress = base64FromBytes(message.proposerAddress !== undefined ? message.proposerAddress : new Uint8Array()));\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$chainId, _object$time, _object$lastCommitHas, _object$dataHash, _object$validatorsHas, _object$nextValidator, _object$consensusHash, _object$appHash, _object$lastResultsHa, _object$evidenceHash, _object$proposerAddre;\n    const message = createBaseHeader();\n    message.version = object.version !== undefined && object.version !== null ? Consensus.fromPartial(object.version) : undefined;\n    message.chainId = (_object$chainId = object.chainId) !== null && _object$chainId !== void 0 ? _object$chainId : \"\";\n    message.height = object.height !== undefined && object.height !== null ? BigInt(object.height.toString()) : BigInt(\"0\");\n    message.time = (_object$time = object.time) !== null && _object$time !== void 0 ? _object$time : undefined;\n    message.lastBlockId = object.lastBlockId !== undefined && object.lastBlockId !== null ? BlockID.fromPartial(object.lastBlockId) : undefined;\n    message.lastCommitHash = (_object$lastCommitHas = object.lastCommitHash) !== null && _object$lastCommitHas !== void 0 ? _object$lastCommitHas : new Uint8Array();\n    message.dataHash = (_object$dataHash = object.dataHash) !== null && _object$dataHash !== void 0 ? _object$dataHash : new Uint8Array();\n    message.validatorsHash = (_object$validatorsHas = object.validatorsHash) !== null && _object$validatorsHas !== void 0 ? _object$validatorsHas : new Uint8Array();\n    message.nextValidatorsHash = (_object$nextValidator = object.nextValidatorsHash) !== null && _object$nextValidator !== void 0 ? _object$nextValidator : new Uint8Array();\n    message.consensusHash = (_object$consensusHash = object.consensusHash) !== null && _object$consensusHash !== void 0 ? _object$consensusHash : new Uint8Array();\n    message.appHash = (_object$appHash = object.appHash) !== null && _object$appHash !== void 0 ? _object$appHash : new Uint8Array();\n    message.lastResultsHash = (_object$lastResultsHa = object.lastResultsHash) !== null && _object$lastResultsHa !== void 0 ? _object$lastResultsHa : new Uint8Array();\n    message.evidenceHash = (_object$evidenceHash = object.evidenceHash) !== null && _object$evidenceHash !== void 0 ? _object$evidenceHash : new Uint8Array();\n    message.proposerAddress = (_object$proposerAddre = object.proposerAddress) !== null && _object$proposerAddre !== void 0 ? _object$proposerAddre : new Uint8Array();\n    return message;\n  }\n};\nfunction createBaseData() {\n  return {\n    txs: []\n  };\n}\nexport const Data = {\n  encode(message, writer = _m0.Writer.create()) {\n    for (const v of message.txs) {\n      writer.uint32(10).bytes(v);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseData();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.txs.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      txs: Array.isArray(object === null || object === void 0 ? void 0 : object.txs) ? object.txs.map(e => bytesFromBase64(e)) : []\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.txs) {\n      obj.txs = message.txs.map(e => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n    } else {\n      obj.txs = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$txs;\n    const message = createBaseData();\n    message.txs = ((_object$txs = object.txs) === null || _object$txs === void 0 ? void 0 : _object$txs.map(e => e)) || [];\n    return message;\n  }\n};\nfunction createBaseVote() {\n  return {\n    type: 0,\n    height: BigInt(\"0\"),\n    round: 0,\n    blockId: undefined,\n    timestamp: undefined,\n    validatorAddress: new Uint8Array(),\n    validatorIndex: 0,\n    signature: new Uint8Array()\n  };\n}\nexport const Vote = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.type !== 0) {\n      writer.uint32(8).int32(message.type);\n    }\n    if (message.height !== BigInt(0)) {\n      writer.uint32(16).int64(Long.fromString(message.height.toString()));\n    }\n    if (message.round !== 0) {\n      writer.uint32(24).int32(message.round);\n    }\n    if (message.blockId !== undefined) {\n      BlockID.encode(message.blockId, writer.uint32(34).fork()).ldelim();\n    }\n    if (message.timestamp !== undefined) {\n      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(42).fork()).ldelim();\n    }\n    if (message.validatorAddress.length !== 0) {\n      writer.uint32(50).bytes(message.validatorAddress);\n    }\n    if (message.validatorIndex !== 0) {\n      writer.uint32(56).int32(message.validatorIndex);\n    }\n    if (message.signature.length !== 0) {\n      writer.uint32(66).bytes(message.signature);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseVote();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32();\n          break;\n        case 2:\n          message.height = BigInt(reader.int64().toString());\n          break;\n        case 3:\n          message.round = reader.int32();\n          break;\n        case 4:\n          message.blockId = BlockID.decode(reader, reader.uint32());\n          break;\n        case 5:\n          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n          break;\n        case 6:\n          message.validatorAddress = reader.bytes();\n          break;\n        case 7:\n          message.validatorIndex = reader.int32();\n          break;\n        case 8:\n          message.signature = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      type: isSet(object.type) ? signedMsgTypeFromJSON(object.type) : 0,\n      height: isSet(object.height) ? BigInt(object.height.toString()) : BigInt(\"0\"),\n      round: isSet(object.round) ? Number(object.round) : 0,\n      blockId: isSet(object.blockId) ? BlockID.fromJSON(object.blockId) : undefined,\n      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,\n      validatorAddress: isSet(object.validatorAddress) ? bytesFromBase64(object.validatorAddress) : new Uint8Array(),\n      validatorIndex: isSet(object.validatorIndex) ? Number(object.validatorIndex) : 0,\n      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array()\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.type !== undefined && (obj.type = signedMsgTypeToJSON(message.type));\n    message.height !== undefined && (obj.height = (message.height || BigInt(\"0\")).toString());\n    message.round !== undefined && (obj.round = Math.round(message.round));\n    message.blockId !== undefined && (obj.blockId = message.blockId ? BlockID.toJSON(message.blockId) : undefined);\n    message.timestamp !== undefined && (obj.timestamp = message.timestamp.toISOString());\n    message.validatorAddress !== undefined && (obj.validatorAddress = base64FromBytes(message.validatorAddress !== undefined ? message.validatorAddress : new Uint8Array()));\n    message.validatorIndex !== undefined && (obj.validatorIndex = Math.round(message.validatorIndex));\n    message.signature !== undefined && (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$type, _object$round, _object$timestamp, _object$validatorAddr, _object$validatorInde, _object$signature;\n    const message = createBaseVote();\n    message.type = (_object$type = object.type) !== null && _object$type !== void 0 ? _object$type : 0;\n    message.height = object.height !== undefined && object.height !== null ? BigInt(object.height.toString()) : BigInt(\"0\");\n    message.round = (_object$round = object.round) !== null && _object$round !== void 0 ? _object$round : 0;\n    message.blockId = object.blockId !== undefined && object.blockId !== null ? BlockID.fromPartial(object.blockId) : undefined;\n    message.timestamp = (_object$timestamp = object.timestamp) !== null && _object$timestamp !== void 0 ? _object$timestamp : undefined;\n    message.validatorAddress = (_object$validatorAddr = object.validatorAddress) !== null && _object$validatorAddr !== void 0 ? _object$validatorAddr : new Uint8Array();\n    message.validatorIndex = (_object$validatorInde = object.validatorIndex) !== null && _object$validatorInde !== void 0 ? _object$validatorInde : 0;\n    message.signature = (_object$signature = object.signature) !== null && _object$signature !== void 0 ? _object$signature : new Uint8Array();\n    return message;\n  }\n};\nfunction createBaseCommit() {\n  return {\n    height: BigInt(\"0\"),\n    round: 0,\n    blockId: undefined,\n    signatures: []\n  };\n}\nexport const Commit = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.height !== BigInt(0)) {\n      writer.uint32(8).int64(Long.fromString(message.height.toString()));\n    }\n    if (message.round !== 0) {\n      writer.uint32(16).int32(message.round);\n    }\n    if (message.blockId !== undefined) {\n      BlockID.encode(message.blockId, writer.uint32(26).fork()).ldelim();\n    }\n    for (const v of message.signatures) {\n      CommitSig.encode(v, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCommit();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.height = BigInt(reader.int64().toString());\n          break;\n        case 2:\n          message.round = reader.int32();\n          break;\n        case 3:\n          message.blockId = BlockID.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.signatures.push(CommitSig.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      height: isSet(object.height) ? BigInt(object.height.toString()) : BigInt(\"0\"),\n      round: isSet(object.round) ? Number(object.round) : 0,\n      blockId: isSet(object.blockId) ? BlockID.fromJSON(object.blockId) : undefined,\n      signatures: Array.isArray(object === null || object === void 0 ? void 0 : object.signatures) ? object.signatures.map(e => CommitSig.fromJSON(e)) : []\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.height !== undefined && (obj.height = (message.height || BigInt(\"0\")).toString());\n    message.round !== undefined && (obj.round = Math.round(message.round));\n    message.blockId !== undefined && (obj.blockId = message.blockId ? BlockID.toJSON(message.blockId) : undefined);\n    if (message.signatures) {\n      obj.signatures = message.signatures.map(e => e ? CommitSig.toJSON(e) : undefined);\n    } else {\n      obj.signatures = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$round2, _object$signatures;\n    const message = createBaseCommit();\n    message.height = object.height !== undefined && object.height !== null ? BigInt(object.height.toString()) : BigInt(\"0\");\n    message.round = (_object$round2 = object.round) !== null && _object$round2 !== void 0 ? _object$round2 : 0;\n    message.blockId = object.blockId !== undefined && object.blockId !== null ? BlockID.fromPartial(object.blockId) : undefined;\n    message.signatures = ((_object$signatures = object.signatures) === null || _object$signatures === void 0 ? void 0 : _object$signatures.map(e => CommitSig.fromPartial(e))) || [];\n    return message;\n  }\n};\nfunction createBaseCommitSig() {\n  return {\n    blockIdFlag: 0,\n    validatorAddress: new Uint8Array(),\n    timestamp: undefined,\n    signature: new Uint8Array()\n  };\n}\nexport const CommitSig = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.blockIdFlag !== 0) {\n      writer.uint32(8).int32(message.blockIdFlag);\n    }\n    if (message.validatorAddress.length !== 0) {\n      writer.uint32(18).bytes(message.validatorAddress);\n    }\n    if (message.timestamp !== undefined) {\n      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).ldelim();\n    }\n    if (message.signature.length !== 0) {\n      writer.uint32(34).bytes(message.signature);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCommitSig();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.blockIdFlag = reader.int32();\n          break;\n        case 2:\n          message.validatorAddress = reader.bytes();\n          break;\n        case 3:\n          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n          break;\n        case 4:\n          message.signature = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      blockIdFlag: isSet(object.blockIdFlag) ? blockIDFlagFromJSON(object.blockIdFlag) : 0,\n      validatorAddress: isSet(object.validatorAddress) ? bytesFromBase64(object.validatorAddress) : new Uint8Array(),\n      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,\n      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array()\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.blockIdFlag !== undefined && (obj.blockIdFlag = blockIDFlagToJSON(message.blockIdFlag));\n    message.validatorAddress !== undefined && (obj.validatorAddress = base64FromBytes(message.validatorAddress !== undefined ? message.validatorAddress : new Uint8Array()));\n    message.timestamp !== undefined && (obj.timestamp = message.timestamp.toISOString());\n    message.signature !== undefined && (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$blockIdFlag, _object$validatorAddr2, _object$timestamp2, _object$signature2;\n    const message = createBaseCommitSig();\n    message.blockIdFlag = (_object$blockIdFlag = object.blockIdFlag) !== null && _object$blockIdFlag !== void 0 ? _object$blockIdFlag : 0;\n    message.validatorAddress = (_object$validatorAddr2 = object.validatorAddress) !== null && _object$validatorAddr2 !== void 0 ? _object$validatorAddr2 : new Uint8Array();\n    message.timestamp = (_object$timestamp2 = object.timestamp) !== null && _object$timestamp2 !== void 0 ? _object$timestamp2 : undefined;\n    message.signature = (_object$signature2 = object.signature) !== null && _object$signature2 !== void 0 ? _object$signature2 : new Uint8Array();\n    return message;\n  }\n};\nfunction createBaseProposal() {\n  return {\n    type: 0,\n    height: BigInt(\"0\"),\n    round: 0,\n    polRound: 0,\n    blockId: undefined,\n    timestamp: undefined,\n    signature: new Uint8Array()\n  };\n}\nexport const Proposal = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.type !== 0) {\n      writer.uint32(8).int32(message.type);\n    }\n    if (message.height !== BigInt(0)) {\n      writer.uint32(16).int64(Long.fromString(message.height.toString()));\n    }\n    if (message.round !== 0) {\n      writer.uint32(24).int32(message.round);\n    }\n    if (message.polRound !== 0) {\n      writer.uint32(32).int32(message.polRound);\n    }\n    if (message.blockId !== undefined) {\n      BlockID.encode(message.blockId, writer.uint32(42).fork()).ldelim();\n    }\n    if (message.timestamp !== undefined) {\n      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(50).fork()).ldelim();\n    }\n    if (message.signature.length !== 0) {\n      writer.uint32(58).bytes(message.signature);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseProposal();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32();\n          break;\n        case 2:\n          message.height = BigInt(reader.int64().toString());\n          break;\n        case 3:\n          message.round = reader.int32();\n          break;\n        case 4:\n          message.polRound = reader.int32();\n          break;\n        case 5:\n          message.blockId = BlockID.decode(reader, reader.uint32());\n          break;\n        case 6:\n          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n          break;\n        case 7:\n          message.signature = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      type: isSet(object.type) ? signedMsgTypeFromJSON(object.type) : 0,\n      height: isSet(object.height) ? BigInt(object.height.toString()) : BigInt(\"0\"),\n      round: isSet(object.round) ? Number(object.round) : 0,\n      polRound: isSet(object.polRound) ? Number(object.polRound) : 0,\n      blockId: isSet(object.blockId) ? BlockID.fromJSON(object.blockId) : undefined,\n      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,\n      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array()\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.type !== undefined && (obj.type = signedMsgTypeToJSON(message.type));\n    message.height !== undefined && (obj.height = (message.height || BigInt(\"0\")).toString());\n    message.round !== undefined && (obj.round = Math.round(message.round));\n    message.polRound !== undefined && (obj.polRound = Math.round(message.polRound));\n    message.blockId !== undefined && (obj.blockId = message.blockId ? BlockID.toJSON(message.blockId) : undefined);\n    message.timestamp !== undefined && (obj.timestamp = message.timestamp.toISOString());\n    message.signature !== undefined && (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$type2, _object$round3, _object$polRound, _object$timestamp3, _object$signature3;\n    const message = createBaseProposal();\n    message.type = (_object$type2 = object.type) !== null && _object$type2 !== void 0 ? _object$type2 : 0;\n    message.height = object.height !== undefined && object.height !== null ? BigInt(object.height.toString()) : BigInt(\"0\");\n    message.round = (_object$round3 = object.round) !== null && _object$round3 !== void 0 ? _object$round3 : 0;\n    message.polRound = (_object$polRound = object.polRound) !== null && _object$polRound !== void 0 ? _object$polRound : 0;\n    message.blockId = object.blockId !== undefined && object.blockId !== null ? BlockID.fromPartial(object.blockId) : undefined;\n    message.timestamp = (_object$timestamp3 = object.timestamp) !== null && _object$timestamp3 !== void 0 ? _object$timestamp3 : undefined;\n    message.signature = (_object$signature3 = object.signature) !== null && _object$signature3 !== void 0 ? _object$signature3 : new Uint8Array();\n    return message;\n  }\n};\nfunction createBaseSignedHeader() {\n  return {\n    header: undefined,\n    commit: undefined\n  };\n}\nexport const SignedHeader = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.header !== undefined) {\n      Header.encode(message.header, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.commit !== undefined) {\n      Commit.encode(message.commit, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSignedHeader();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.header = Header.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.commit = Commit.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      header: isSet(object.header) ? Header.fromJSON(object.header) : undefined,\n      commit: isSet(object.commit) ? Commit.fromJSON(object.commit) : undefined\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.header !== undefined && (obj.header = message.header ? Header.toJSON(message.header) : undefined);\n    message.commit !== undefined && (obj.commit = message.commit ? Commit.toJSON(message.commit) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = createBaseSignedHeader();\n    message.header = object.header !== undefined && object.header !== null ? Header.fromPartial(object.header) : undefined;\n    message.commit = object.commit !== undefined && object.commit !== null ? Commit.fromPartial(object.commit) : undefined;\n    return message;\n  }\n};\nfunction createBaseLightBlock() {\n  return {\n    signedHeader: undefined,\n    validatorSet: undefined\n  };\n}\nexport const LightBlock = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.signedHeader !== undefined) {\n      SignedHeader.encode(message.signedHeader, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.validatorSet !== undefined) {\n      ValidatorSet.encode(message.validatorSet, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseLightBlock();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.signedHeader = SignedHeader.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.validatorSet = ValidatorSet.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      signedHeader: isSet(object.signedHeader) ? SignedHeader.fromJSON(object.signedHeader) : undefined,\n      validatorSet: isSet(object.validatorSet) ? ValidatorSet.fromJSON(object.validatorSet) : undefined\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.signedHeader !== undefined && (obj.signedHeader = message.signedHeader ? SignedHeader.toJSON(message.signedHeader) : undefined);\n    message.validatorSet !== undefined && (obj.validatorSet = message.validatorSet ? ValidatorSet.toJSON(message.validatorSet) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = createBaseLightBlock();\n    message.signedHeader = object.signedHeader !== undefined && object.signedHeader !== null ? SignedHeader.fromPartial(object.signedHeader) : undefined;\n    message.validatorSet = object.validatorSet !== undefined && object.validatorSet !== null ? ValidatorSet.fromPartial(object.validatorSet) : undefined;\n    return message;\n  }\n};\nfunction createBaseBlockMeta() {\n  return {\n    blockId: undefined,\n    blockSize: BigInt(\"0\"),\n    header: undefined,\n    numTxs: BigInt(\"0\")\n  };\n}\nexport const BlockMeta = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.blockId !== undefined) {\n      BlockID.encode(message.blockId, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.blockSize !== BigInt(0)) {\n      writer.uint32(16).int64(Long.fromString(message.blockSize.toString()));\n    }\n    if (message.header !== undefined) {\n      Header.encode(message.header, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.numTxs !== BigInt(0)) {\n      writer.uint32(32).int64(Long.fromString(message.numTxs.toString()));\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseBlockMeta();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.blockId = BlockID.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.blockSize = BigInt(reader.int64().toString());\n          break;\n        case 3:\n          message.header = Header.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.numTxs = BigInt(reader.int64().toString());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      blockId: isSet(object.blockId) ? BlockID.fromJSON(object.blockId) : undefined,\n      blockSize: isSet(object.blockSize) ? BigInt(object.blockSize.toString()) : BigInt(\"0\"),\n      header: isSet(object.header) ? Header.fromJSON(object.header) : undefined,\n      numTxs: isSet(object.numTxs) ? BigInt(object.numTxs.toString()) : BigInt(\"0\")\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.blockId !== undefined && (obj.blockId = message.blockId ? BlockID.toJSON(message.blockId) : undefined);\n    message.blockSize !== undefined && (obj.blockSize = (message.blockSize || BigInt(\"0\")).toString());\n    message.header !== undefined && (obj.header = message.header ? Header.toJSON(message.header) : undefined);\n    message.numTxs !== undefined && (obj.numTxs = (message.numTxs || BigInt(\"0\")).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = createBaseBlockMeta();\n    message.blockId = object.blockId !== undefined && object.blockId !== null ? BlockID.fromPartial(object.blockId) : undefined;\n    message.blockSize = object.blockSize !== undefined && object.blockSize !== null ? BigInt(object.blockSize.toString()) : BigInt(\"0\");\n    message.header = object.header !== undefined && object.header !== null ? Header.fromPartial(object.header) : undefined;\n    message.numTxs = object.numTxs !== undefined && object.numTxs !== null ? BigInt(object.numTxs.toString()) : BigInt(\"0\");\n    return message;\n  }\n};\nfunction createBaseTxProof() {\n  return {\n    rootHash: new Uint8Array(),\n    data: new Uint8Array(),\n    proof: undefined\n  };\n}\nexport const TxProof = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.rootHash.length !== 0) {\n      writer.uint32(10).bytes(message.rootHash);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(18).bytes(message.data);\n    }\n    if (message.proof !== undefined) {\n      Proof.encode(message.proof, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseTxProof();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.rootHash = reader.bytes();\n          break;\n        case 2:\n          message.data = reader.bytes();\n          break;\n        case 3:\n          message.proof = Proof.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      rootHash: isSet(object.rootHash) ? bytesFromBase64(object.rootHash) : new Uint8Array(),\n      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(),\n      proof: isSet(object.proof) ? Proof.fromJSON(object.proof) : undefined\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.rootHash !== undefined && (obj.rootHash = base64FromBytes(message.rootHash !== undefined ? message.rootHash : new Uint8Array()));\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    message.proof !== undefined && (obj.proof = message.proof ? Proof.toJSON(message.proof) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$rootHash, _object$data;\n    const message = createBaseTxProof();\n    message.rootHash = (_object$rootHash = object.rootHash) !== null && _object$rootHash !== void 0 ? _object$rootHash : new Uint8Array();\n    message.data = (_object$data = object.data) !== null && _object$data !== void 0 ? _object$data : new Uint8Array();\n    message.proof = object.proof !== undefined && object.proof !== null ? Proof.fromPartial(object.proof) : undefined;\n    return message;\n  }\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAqB;AAmBrB,SAAS,kBAAkB;AACzB,SAAO;AAAA,IACL,OAAO,OAAO,GAAG;AAAA,IACjB,OAAO,OAAO,GAAG;AAAA,IACjB,UAAU,IAAI,WAAW;AAAA,IACzB,OAAO,CAAC;AAAA,EACV;AACF;AACO,IAAM,QAAQ;AAAA,EACnB,OAAO,SAAS,SAAa,WAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,UAAU,OAAO,CAAC,GAAG;AAC/B,aAAO,OAAO,CAAC,EAAE,MAAM,YAAAA,QAAK,WAAW,QAAQ,MAAM,SAAS,CAAC,CAAC;AAAA,IAClE;AACA,QAAI,QAAQ,UAAU,OAAO,CAAC,GAAG;AAC/B,aAAO,OAAO,EAAE,EAAE,MAAM,YAAAA,QAAK,WAAW,QAAQ,MAAM,SAAS,CAAC,CAAC;AAAA,IACnE;AACA,QAAI,QAAQ,SAAS,WAAW,GAAG;AACjC,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,QAAQ;AAAA,IAC1C;AACA,eAAW,KAAK,QAAQ,OAAO;AAC7B,aAAO,OAAO,EAAE,EAAE,MAAM,CAAC;AAAA,IAC3B;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,aAAS,QAAQ,IAAQ,WAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,gBAAgB;AAChC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,QAAQ,OAAO,OAAO,MAAM,EAAE,SAAS,CAAC;AAChD;AAAA,QACF,KAAK;AACH,kBAAQ,QAAQ,OAAO,OAAO,MAAM,EAAE,SAAS,CAAC;AAChD;AAAA,QACF,KAAK;AACH,kBAAQ,WAAW,OAAO,MAAM;AAChC;AAAA,QACF,KAAK;AACH,kBAAQ,MAAM,KAAK,OAAO,MAAM,CAAC;AACjC;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,OAAO,MAAM,OAAO,KAAK,IAAI,OAAO,OAAO,MAAM,SAAS,CAAC,IAAI,OAAO,GAAG;AAAA,MACzE,OAAO,MAAM,OAAO,KAAK,IAAI,OAAO,OAAO,MAAM,SAAS,CAAC,IAAI,OAAO,GAAG;AAAA,MACzE,UAAU,MAAM,OAAO,QAAQ,IAAI,gBAAgB,OAAO,QAAQ,IAAI,IAAI,WAAW;AAAA,MACrF,OAAO,MAAM,QAAQ,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,KAAK,IAAI,OAAO,MAAM,IAAI,OAAK,gBAAgB,CAAC,CAAC,IAAI,CAAC;AAAA,IACpI;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,UAAU,WAAc,IAAI,SAAS,QAAQ,SAAS,OAAO,GAAG,GAAG,SAAS;AACpF,YAAQ,UAAU,WAAc,IAAI,SAAS,QAAQ,SAAS,OAAO,GAAG,GAAG,SAAS;AACpF,YAAQ,aAAa,WAAc,IAAI,WAAW,gBAAgB,QAAQ,aAAa,SAAY,QAAQ,WAAW,IAAI,WAAW,CAAC;AACtI,QAAI,QAAQ,OAAO;AACjB,UAAI,QAAQ,QAAQ,MAAM,IAAI,OAAK,gBAAgB,MAAM,SAAY,IAAI,IAAI,WAAW,CAAC,CAAC;AAAA,IAC5F,OAAO;AACL,UAAI,QAAQ,CAAC;AAAA,IACf;AACA,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI,kBAAkB;AACtB,UAAM,UAAU,gBAAgB;AAChC,YAAQ,QAAQ,OAAO,UAAU,UAAa,OAAO,UAAU,OAAO,OAAO,OAAO,MAAM,SAAS,CAAC,IAAI,OAAO,GAAG;AAClH,YAAQ,QAAQ,OAAO,UAAU,UAAa,OAAO,UAAU,OAAO,OAAO,OAAO,MAAM,SAAS,CAAC,IAAI,OAAO,GAAG;AAClH,YAAQ,YAAY,mBAAmB,OAAO,cAAc,QAAQ,qBAAqB,SAAS,mBAAmB,IAAI,WAAW;AACpI,YAAQ,UAAU,gBAAgB,OAAO,WAAW,QAAQ,kBAAkB,SAAS,SAAS,cAAc,IAAI,OAAK,CAAC,MAAM,CAAC;AAC/H,WAAO;AAAA,EACT;AACF;AACA,SAAS,oBAAoB;AAC3B,SAAO;AAAA,IACL,KAAK,IAAI,WAAW;AAAA,IACpB,OAAO;AAAA,EACT;AACF;AACO,IAAM,UAAU;AAAA,EACrB,OAAO,SAAS,SAAa,WAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,IAAI,WAAW,GAAG;AAC5B,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,GAAG;AAAA,IACrC;AACA,QAAI,QAAQ,UAAU,QAAW;AAC/B,YAAM,OAAO,QAAQ,OAAO,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IAC/D;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,aAAS,QAAQ,IAAQ,WAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,kBAAkB;AAClC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,MAAM,OAAO,MAAM;AAC3B;AAAA,QACF,KAAK;AACH,kBAAQ,QAAQ,MAAM,OAAO,QAAQ,OAAO,OAAO,CAAC;AACpD;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,KAAK,MAAM,OAAO,GAAG,IAAI,gBAAgB,OAAO,GAAG,IAAI,IAAI,WAAW;AAAA,MACtE,OAAO,MAAM,OAAO,KAAK,IAAI,MAAM,SAAS,OAAO,KAAK,IAAI;AAAA,IAC9D;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,QAAQ,WAAc,IAAI,MAAM,gBAAgB,QAAQ,QAAQ,SAAY,QAAQ,MAAM,IAAI,WAAW,CAAC;AAClH,YAAQ,UAAU,WAAc,IAAI,QAAQ,QAAQ,QAAQ,MAAM,OAAO,QAAQ,KAAK,IAAI;AAC1F,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI;AACJ,UAAM,UAAU,kBAAkB;AAClC,YAAQ,OAAO,cAAc,OAAO,SAAS,QAAQ,gBAAgB,SAAS,cAAc,IAAI,WAAW;AAC3G,YAAQ,QAAQ,OAAO,UAAU,UAAa,OAAO,UAAU,OAAO,MAAM,YAAY,OAAO,KAAK,IAAI;AACxG,WAAO;AAAA,EACT;AACF;AACA,SAAS,qBAAqB;AAC5B,SAAO;AAAA,IACL,KAAK;AAAA,IACL,OAAO;AAAA,IACP,QAAQ;AAAA,EACV;AACF;AACO,IAAM,WAAW;AAAA,EACtB,OAAO,SAAS,SAAa,WAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,QAAQ,IAAI;AACtB,aAAO,OAAO,EAAE,EAAE,OAAO,QAAQ,GAAG;AAAA,IACtC;AACA,QAAI,QAAQ,UAAU,IAAI;AACxB,aAAO,OAAO,EAAE,EAAE,OAAO,QAAQ,KAAK;AAAA,IACxC;AACA,QAAI,QAAQ,WAAW,IAAI;AACzB,aAAO,OAAO,EAAE,EAAE,OAAO,QAAQ,MAAM;AAAA,IACzC;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,aAAS,QAAQ,IAAQ,WAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,mBAAmB;AACnC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,MAAM,OAAO,OAAO;AAC5B;AAAA,QACF,KAAK;AACH,kBAAQ,QAAQ,OAAO,OAAO;AAC9B;AAAA,QACF,KAAK;AACH,kBAAQ,SAAS,OAAO,OAAO;AAC/B;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,KAAK,MAAM,OAAO,GAAG,IAAI,OAAO,OAAO,GAAG,IAAI;AAAA,MAC9C,OAAO,MAAM,OAAO,KAAK,IAAI,OAAO,OAAO,KAAK,IAAI;AAAA,MACpD,QAAQ,MAAM,OAAO,MAAM,IAAI,OAAO,OAAO,MAAM,IAAI;AAAA,IACzD;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,QAAQ,WAAc,IAAI,MAAM,QAAQ;AAChD,YAAQ,UAAU,WAAc,IAAI,QAAQ,QAAQ;AACpD,YAAQ,WAAW,WAAc,IAAI,SAAS,QAAQ;AACtD,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI,cAAc,eAAe;AACjC,UAAM,UAAU,mBAAmB;AACnC,YAAQ,OAAO,eAAe,OAAO,SAAS,QAAQ,iBAAiB,SAAS,eAAe;AAC/F,YAAQ,SAAS,gBAAgB,OAAO,WAAW,QAAQ,kBAAkB,SAAS,gBAAgB;AACtG,YAAQ,UAAU,iBAAiB,OAAO,YAAY,QAAQ,mBAAmB,SAAS,iBAAiB;AAC3G,WAAO;AAAA,EACT;AACF;AACA,SAAS,oBAAoB;AAC3B,SAAO;AAAA,IACL,MAAM;AAAA,IACN,KAAK,IAAI,WAAW;AAAA,IACpB,MAAM,IAAI,WAAW;AAAA,EACvB;AACF;AACO,IAAM,UAAU;AAAA,EACrB,OAAO,SAAS,SAAa,WAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,SAAS,IAAI;AACvB,aAAO,OAAO,EAAE,EAAE,OAAO,QAAQ,IAAI;AAAA,IACvC;AACA,QAAI,QAAQ,IAAI,WAAW,GAAG;AAC5B,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,GAAG;AAAA,IACrC;AACA,QAAI,QAAQ,KAAK,WAAW,GAAG;AAC7B,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,IAAI;AAAA,IACtC;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,aAAS,QAAQ,IAAQ,WAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,kBAAkB;AAClC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,OAAO,OAAO,OAAO;AAC7B;AAAA,QACF,KAAK;AACH,kBAAQ,MAAM,OAAO,MAAM;AAC3B;AAAA,QACF,KAAK;AACH,kBAAQ,OAAO,OAAO,MAAM;AAC5B;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,MAAM,MAAM,OAAO,IAAI,IAAI,OAAO,OAAO,IAAI,IAAI;AAAA,MACjD,KAAK,MAAM,OAAO,GAAG,IAAI,gBAAgB,OAAO,GAAG,IAAI,IAAI,WAAW;AAAA,MACtE,MAAM,MAAM,OAAO,IAAI,IAAI,gBAAgB,OAAO,IAAI,IAAI,IAAI,WAAW;AAAA,IAC3E;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,SAAS,WAAc,IAAI,OAAO,QAAQ;AAClD,YAAQ,QAAQ,WAAc,IAAI,MAAM,gBAAgB,QAAQ,QAAQ,SAAY,QAAQ,MAAM,IAAI,WAAW,CAAC;AAClH,YAAQ,SAAS,WAAc,IAAI,OAAO,gBAAgB,QAAQ,SAAS,SAAY,QAAQ,OAAO,IAAI,WAAW,CAAC;AACtH,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI,cAAc,cAAc;AAChC,UAAM,UAAU,kBAAkB;AAClC,YAAQ,QAAQ,eAAe,OAAO,UAAU,QAAQ,iBAAiB,SAAS,eAAe;AACjG,YAAQ,OAAO,eAAe,OAAO,SAAS,QAAQ,iBAAiB,SAAS,eAAe,IAAI,WAAW;AAC9G,YAAQ,QAAQ,eAAe,OAAO,UAAU,QAAQ,iBAAiB,SAAS,eAAe,IAAI,WAAW;AAChH,WAAO;AAAA,EACT;AACF;AACA,SAAS,qBAAqB;AAC5B,SAAO;AAAA,IACL,KAAK,CAAC;AAAA,EACR;AACF;AACO,IAAM,WAAW;AAAA,EACtB,OAAO,SAAS,SAAa,WAAO,OAAO,GAAG;AAC5C,eAAW,KAAK,QAAQ,KAAK;AAC3B,cAAQ,OAAO,GAAG,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACrD;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,aAAS,QAAQ,IAAQ,WAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,mBAAmB;AACnC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,IAAI,KAAK,QAAQ,OAAO,QAAQ,OAAO,OAAO,CAAC,CAAC;AACxD;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,KAAK,MAAM,QAAQ,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,GAAG,IAAI,OAAO,IAAI,IAAI,OAAK,QAAQ,SAAS,CAAC,CAAC,IAAI,CAAC;AAAA,IAC/H;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,QAAI,QAAQ,KAAK;AACf,UAAI,MAAM,QAAQ,IAAI,IAAI,OAAK,IAAI,QAAQ,OAAO,CAAC,IAAI,MAAS;AAAA,IAClE,OAAO;AACL,UAAI,MAAM,CAAC;AAAA,IACb;AACA,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI;AACJ,UAAM,UAAU,mBAAmB;AACnC,YAAQ,QAAQ,cAAc,OAAO,SAAS,QAAQ,gBAAgB,SAAS,SAAS,YAAY,IAAI,OAAK,QAAQ,YAAY,CAAC,CAAC,MAAM,CAAC;AAC1I,WAAO;AAAA,EACT;AACF;;;AChVA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAC,OAAqB;AA0BrB,SAAS,gBAAgB;AACvB,SAAO;AAAA,IACL,UAAU,OAAO,GAAG;AAAA,IACpB,UAAU;AAAA,EACZ;AACF;AACO,IAAM,MAAM;AAAA,EACjB,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,aAAa,OAAO,CAAC,GAAG;AAClC,aAAO,OAAO,CAAC,EAAE,OAAO,YAAAC,QAAK,WAAW,QAAQ,SAAS,SAAS,CAAC,CAAC;AAAA,IACtE;AACA,QAAI,QAAQ,aAAa,IAAI;AAC3B,aAAO,OAAO,EAAE,EAAE,OAAO,QAAQ,QAAQ;AAAA,IAC3C;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,cAAc;AAC9B,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,WAAW,OAAO,OAAO,OAAO,EAAE,SAAS,CAAC;AACpD;AAAA,QACF,KAAK;AACH,kBAAQ,WAAW,OAAO,OAAO;AACjC;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,UAAU,MAAM,OAAO,QAAQ,IAAI,OAAO,OAAO,SAAS,SAAS,CAAC,IAAI,OAAO,GAAG;AAAA,MAClF,UAAU,MAAM,OAAO,QAAQ,IAAI,OAAO,OAAO,QAAQ,IAAI;AAAA,IAC/D;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,aAAa,WAAc,IAAI,YAAY,QAAQ,YAAY,OAAO,GAAG,GAAG,SAAS;AAC7F,YAAQ,aAAa,WAAc,IAAI,WAAW,QAAQ;AAC1D,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI;AACJ,UAAM,UAAU,cAAc;AAC9B,YAAQ,WAAW,OAAO,aAAa,UAAa,OAAO,aAAa,OAAO,OAAO,OAAO,SAAS,SAAS,CAAC,IAAI,OAAO,GAAG;AAC9H,YAAQ,YAAY,mBAAmB,OAAO,cAAc,QAAQ,qBAAqB,SAAS,mBAAmB;AACrH,WAAO;AAAA,EACT;AACF;AACA,SAAS,sBAAsB;AAC7B,SAAO;AAAA,IACL,OAAO,OAAO,GAAG;AAAA,IACjB,KAAK,OAAO,GAAG;AAAA,EACjB;AACF;AACO,IAAM,YAAY;AAAA,EACvB,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,UAAU,OAAO,CAAC,GAAG;AAC/B,aAAO,OAAO,CAAC,EAAE,OAAO,YAAAA,QAAK,WAAW,QAAQ,MAAM,SAAS,CAAC,CAAC;AAAA,IACnE;AACA,QAAI,QAAQ,QAAQ,OAAO,CAAC,GAAG;AAC7B,aAAO,OAAO,EAAE,EAAE,OAAO,YAAAA,QAAK,WAAW,QAAQ,IAAI,SAAS,CAAC,CAAC;AAAA,IAClE;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,oBAAoB;AACpC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,QAAQ,OAAO,OAAO,OAAO,EAAE,SAAS,CAAC;AACjD;AAAA,QACF,KAAK;AACH,kBAAQ,MAAM,OAAO,OAAO,OAAO,EAAE,SAAS,CAAC;AAC/C;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,OAAO,MAAM,OAAO,KAAK,IAAI,OAAO,OAAO,MAAM,SAAS,CAAC,IAAI,OAAO,GAAG;AAAA,MACzE,KAAK,MAAM,OAAO,GAAG,IAAI,OAAO,OAAO,IAAI,SAAS,CAAC,IAAI,OAAO,GAAG;AAAA,IACrE;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,UAAU,WAAc,IAAI,SAAS,QAAQ,SAAS,OAAO,GAAG,GAAG,SAAS;AACpF,YAAQ,QAAQ,WAAc,IAAI,OAAO,QAAQ,OAAO,OAAO,GAAG,GAAG,SAAS;AAC9E,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,UAAM,UAAU,oBAAoB;AACpC,YAAQ,QAAQ,OAAO,UAAU,UAAa,OAAO,UAAU,OAAO,OAAO,OAAO,MAAM,SAAS,CAAC,IAAI,OAAO,GAAG;AAClH,YAAQ,MAAM,OAAO,QAAQ,UAAa,OAAO,QAAQ,OAAO,OAAO,OAAO,IAAI,SAAS,CAAC,IAAI,OAAO,GAAG;AAC1G,WAAO;AAAA,EACT;AACF;;;ACxIA;AAAA;AAAA;AAAA;AAAA,IAAAC,OAAqB;AAMrB,SAAS,sBAAsB;AAC7B,SAAO;AAAA,IACL,SAAS;AAAA,IACT,WAAW;AAAA,EACb;AACF;AACO,IAAM,YAAY;AAAA,EACvB,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,YAAY,QAAW;AACjC,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,OAAO;AAAA,IACzC;AACA,QAAI,QAAQ,cAAc,QAAW;AACnC,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,SAAS;AAAA,IAC3C;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,oBAAoB;AACpC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,UAAU,OAAO,MAAM;AAC/B;AAAA,QACF,KAAK;AACH,kBAAQ,YAAY,OAAO,MAAM;AACjC;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,SAAS,MAAM,OAAO,OAAO,IAAI,gBAAgB,OAAO,OAAO,IAAI;AAAA,MACnE,WAAW,MAAM,OAAO,SAAS,IAAI,gBAAgB,OAAO,SAAS,IAAI;AAAA,IAC3E;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,YAAY,WAAc,IAAI,UAAU,QAAQ,YAAY,SAAY,gBAAgB,QAAQ,OAAO,IAAI;AACnH,YAAQ,cAAc,WAAc,IAAI,YAAY,QAAQ,cAAc,SAAY,gBAAgB,QAAQ,SAAS,IAAI;AAC3H,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI,YAAY;AAChB,UAAM,UAAU,oBAAoB;AACpC,YAAQ,WAAW,aAAa,OAAO,aAAa,QAAQ,eAAe,SAAS,aAAa;AACjG,YAAQ,aAAa,mBAAmB,OAAO,eAAe,QAAQ,qBAAqB,SAAS,mBAAmB;AACvH,WAAO;AAAA,EACT;AACF;;;AC7DA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,IAAAC,OAAqB;AAErB,SAAS,yBAAyB;AAChC,SAAO;AAAA,IACL,YAAY,CAAC;AAAA,IACb,UAAU;AAAA,IACV,kBAAkB,OAAO,GAAG;AAAA,EAC9B;AACF;AACO,IAAM,eAAe;AAAA,EAC1B,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,eAAW,KAAK,QAAQ,YAAY;AAClC,gBAAU,OAAO,GAAG,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACvD;AACA,QAAI,QAAQ,aAAa,QAAW;AAClC,gBAAU,OAAO,QAAQ,UAAU,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACtE;AACA,QAAI,QAAQ,qBAAqB,OAAO,CAAC,GAAG;AAC1C,aAAO,OAAO,EAAE,EAAE,MAAM,YAAAC,QAAK,WAAW,QAAQ,iBAAiB,SAAS,CAAC,CAAC;AAAA,IAC9E;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,uBAAuB;AACvC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,WAAW,KAAK,UAAU,OAAO,QAAQ,OAAO,OAAO,CAAC,CAAC;AACjE;AAAA,QACF,KAAK;AACH,kBAAQ,WAAW,UAAU,OAAO,QAAQ,OAAO,OAAO,CAAC;AAC3D;AAAA,QACF,KAAK;AACH,kBAAQ,mBAAmB,OAAO,OAAO,MAAM,EAAE,SAAS,CAAC;AAC3D;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,YAAY,MAAM,QAAQ,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,UAAU,IAAI,OAAO,WAAW,IAAI,OAAK,UAAU,SAAS,CAAC,CAAC,IAAI,CAAC;AAAA,MACpJ,UAAU,MAAM,OAAO,QAAQ,IAAI,UAAU,SAAS,OAAO,QAAQ,IAAI;AAAA,MACzE,kBAAkB,MAAM,OAAO,gBAAgB,IAAI,OAAO,OAAO,iBAAiB,SAAS,CAAC,IAAI,OAAO,GAAG;AAAA,IAC5G;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,QAAI,QAAQ,YAAY;AACtB,UAAI,aAAa,QAAQ,WAAW,IAAI,OAAK,IAAI,UAAU,OAAO,CAAC,IAAI,MAAS;AAAA,IAClF,OAAO;AACL,UAAI,aAAa,CAAC;AAAA,IACpB;AACA,YAAQ,aAAa,WAAc,IAAI,WAAW,QAAQ,WAAW,UAAU,OAAO,QAAQ,QAAQ,IAAI;AAC1G,YAAQ,qBAAqB,WAAc,IAAI,oBAAoB,QAAQ,oBAAoB,OAAO,GAAG,GAAG,SAAS;AACrH,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI;AACJ,UAAM,UAAU,uBAAuB;AACvC,YAAQ,eAAe,qBAAqB,OAAO,gBAAgB,QAAQ,uBAAuB,SAAS,SAAS,mBAAmB,IAAI,OAAK,UAAU,YAAY,CAAC,CAAC,MAAM,CAAC;AAC/K,YAAQ,WAAW,OAAO,aAAa,UAAa,OAAO,aAAa,OAAO,UAAU,YAAY,OAAO,QAAQ,IAAI;AACxH,YAAQ,mBAAmB,OAAO,qBAAqB,UAAa,OAAO,qBAAqB,OAAO,OAAO,OAAO,iBAAiB,SAAS,CAAC,IAAI,OAAO,GAAG;AAC9J,WAAO;AAAA,EACT;AACF;AACA,SAAS,sBAAsB;AAC7B,SAAO;AAAA,IACL,SAAS,IAAI,WAAW;AAAA,IACxB,QAAQ;AAAA,IACR,aAAa,OAAO,GAAG;AAAA,IACvB,kBAAkB,OAAO,GAAG;AAAA,EAC9B;AACF;AACO,IAAM,YAAY;AAAA,EACvB,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,QAAQ,WAAW,GAAG;AAChC,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,OAAO;AAAA,IACzC;AACA,QAAI,QAAQ,WAAW,QAAW;AAChC,gBAAU,OAAO,QAAQ,QAAQ,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACpE;AACA,QAAI,QAAQ,gBAAgB,OAAO,CAAC,GAAG;AACrC,aAAO,OAAO,EAAE,EAAE,MAAM,YAAAA,QAAK,WAAW,QAAQ,YAAY,SAAS,CAAC,CAAC;AAAA,IACzE;AACA,QAAI,QAAQ,qBAAqB,OAAO,CAAC,GAAG;AAC1C,aAAO,OAAO,EAAE,EAAE,MAAM,YAAAA,QAAK,WAAW,QAAQ,iBAAiB,SAAS,CAAC,CAAC;AAAA,IAC9E;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,oBAAoB;AACpC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,UAAU,OAAO,MAAM;AAC/B;AAAA,QACF,KAAK;AACH,kBAAQ,SAAS,UAAU,OAAO,QAAQ,OAAO,OAAO,CAAC;AACzD;AAAA,QACF,KAAK;AACH,kBAAQ,cAAc,OAAO,OAAO,MAAM,EAAE,SAAS,CAAC;AACtD;AAAA,QACF,KAAK;AACH,kBAAQ,mBAAmB,OAAO,OAAO,MAAM,EAAE,SAAS,CAAC;AAC3D;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,SAAS,MAAM,OAAO,OAAO,IAAI,gBAAgB,OAAO,OAAO,IAAI,IAAI,WAAW;AAAA,MAClF,QAAQ,MAAM,OAAO,MAAM,IAAI,UAAU,SAAS,OAAO,MAAM,IAAI;AAAA,MACnE,aAAa,MAAM,OAAO,WAAW,IAAI,OAAO,OAAO,YAAY,SAAS,CAAC,IAAI,OAAO,GAAG;AAAA,MAC3F,kBAAkB,MAAM,OAAO,gBAAgB,IAAI,OAAO,OAAO,iBAAiB,SAAS,CAAC,IAAI,OAAO,GAAG;AAAA,IAC5G;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,YAAY,WAAc,IAAI,UAAU,gBAAgB,QAAQ,YAAY,SAAY,QAAQ,UAAU,IAAI,WAAW,CAAC;AAClI,YAAQ,WAAW,WAAc,IAAI,SAAS,QAAQ,SAAS,UAAU,OAAO,QAAQ,MAAM,IAAI;AAClG,YAAQ,gBAAgB,WAAc,IAAI,eAAe,QAAQ,eAAe,OAAO,GAAG,GAAG,SAAS;AACtG,YAAQ,qBAAqB,WAAc,IAAI,oBAAoB,QAAQ,oBAAoB,OAAO,GAAG,GAAG,SAAS;AACrH,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI;AACJ,UAAM,UAAU,oBAAoB;AACpC,YAAQ,WAAW,kBAAkB,OAAO,aAAa,QAAQ,oBAAoB,SAAS,kBAAkB,IAAI,WAAW;AAC/H,YAAQ,SAAS,OAAO,WAAW,UAAa,OAAO,WAAW,OAAO,UAAU,YAAY,OAAO,MAAM,IAAI;AAChH,YAAQ,cAAc,OAAO,gBAAgB,UAAa,OAAO,gBAAgB,OAAO,OAAO,OAAO,YAAY,SAAS,CAAC,IAAI,OAAO,GAAG;AAC1I,YAAQ,mBAAmB,OAAO,qBAAqB,UAAa,OAAO,qBAAqB,OAAO,OAAO,OAAO,iBAAiB,SAAS,CAAC,IAAI,OAAO,GAAG;AAC9J,WAAO;AAAA,EACT;AACF;AACA,SAAS,4BAA4B;AACnC,SAAO;AAAA,IACL,QAAQ;AAAA,IACR,aAAa,OAAO,GAAG;AAAA,EACzB;AACF;AACO,IAAM,kBAAkB;AAAA,EAC7B,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,WAAW,QAAW;AAChC,gBAAU,OAAO,QAAQ,QAAQ,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACpE;AACA,QAAI,QAAQ,gBAAgB,OAAO,CAAC,GAAG;AACrC,aAAO,OAAO,EAAE,EAAE,MAAM,YAAAA,QAAK,WAAW,QAAQ,YAAY,SAAS,CAAC,CAAC;AAAA,IACzE;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,0BAA0B;AAC1C,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,SAAS,UAAU,OAAO,QAAQ,OAAO,OAAO,CAAC;AACzD;AAAA,QACF,KAAK;AACH,kBAAQ,cAAc,OAAO,OAAO,MAAM,EAAE,SAAS,CAAC;AACtD;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,QAAQ,MAAM,OAAO,MAAM,IAAI,UAAU,SAAS,OAAO,MAAM,IAAI;AAAA,MACnE,aAAa,MAAM,OAAO,WAAW,IAAI,OAAO,OAAO,YAAY,SAAS,CAAC,IAAI,OAAO,GAAG;AAAA,IAC7F;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,WAAW,WAAc,IAAI,SAAS,QAAQ,SAAS,UAAU,OAAO,QAAQ,MAAM,IAAI;AAClG,YAAQ,gBAAgB,WAAc,IAAI,eAAe,QAAQ,eAAe,OAAO,GAAG,GAAG,SAAS;AACtG,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,UAAM,UAAU,0BAA0B;AAC1C,YAAQ,SAAS,OAAO,WAAW,UAAa,OAAO,WAAW,OAAO,UAAU,YAAY,OAAO,MAAM,IAAI;AAChH,YAAQ,cAAc,OAAO,gBAAgB,UAAa,OAAO,gBAAgB,OAAO,OAAO,OAAO,YAAY,SAAS,CAAC,IAAI,OAAO,GAAG;AAC1I,WAAO;AAAA,EACT;AACF;;;AC3MA,IAAAC,iBAAA;AAAA,SAAAA,gBAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,IAAAC,OAAqB;AAGd,IAAI,cAA2B,SAAUC,cAAa;AAC3D,EAAAA,aAAYA,aAAY,uBAAuB,IAAI,CAAC,IAAI;AACxD,EAAAA,aAAYA,aAAY,sBAAsB,IAAI,CAAC,IAAI;AACvD,EAAAA,aAAYA,aAAY,sBAAsB,IAAI,CAAC,IAAI;AACvD,EAAAA,aAAYA,aAAY,mBAAmB,IAAI,CAAC,IAAI;AACpD,EAAAA,aAAYA,aAAY,cAAc,IAAI,EAAE,IAAI;AAChD,SAAOA;AACT,EAAE,CAAC,CAAC;AACG,IAAM,qBAAqB;AAC3B,SAAS,oBAAoB,QAAQ;AAC1C,UAAQ,QAAQ;AAAA,IACd,KAAK;AAAA,IACL,KAAK;AACH,aAAO,YAAY;AAAA,IACrB,KAAK;AAAA,IACL,KAAK;AACH,aAAO,YAAY;AAAA,IACrB,KAAK;AAAA,IACL,KAAK;AACH,aAAO,YAAY;AAAA,IACrB,KAAK;AAAA,IACL,KAAK;AACH,aAAO,YAAY;AAAA,IACrB,KAAK;AAAA,IACL,KAAK;AAAA,IACL;AACE,aAAO,YAAY;AAAA,EACvB;AACF;AACO,SAAS,kBAAkB,QAAQ;AACxC,UAAQ,QAAQ;AAAA,IACd,KAAK,YAAY;AACf,aAAO;AAAA,IACT,KAAK,YAAY;AACf,aAAO;AAAA,IACT,KAAK,YAAY;AACf,aAAO;AAAA,IACT,KAAK,YAAY;AACf,aAAO;AAAA,IACT,KAAK,YAAY;AAAA,IACjB;AACE,aAAO;AAAA,EACX;AACF;AAEO,IAAI,gBAA6B,SAAUC,gBAAe;AAC/D,EAAAA,eAAcA,eAAc,yBAAyB,IAAI,CAAC,IAAI;AAC9D,EAAAA,eAAcA,eAAc,yBAAyB,IAAI,CAAC,IAAI;AAC9D,EAAAA,eAAcA,eAAc,2BAA2B,IAAI,CAAC,IAAI;AAChE,EAAAA,eAAcA,eAAc,0BAA0B,IAAI,EAAE,IAAI;AAChE,EAAAA,eAAcA,eAAc,cAAc,IAAI,EAAE,IAAI;AACpD,SAAOA;AACT,EAAE,CAAC,CAAC;AACG,IAAM,uBAAuB;AAC7B,SAAS,sBAAsB,QAAQ;AAC5C,UAAQ,QAAQ;AAAA,IACd,KAAK;AAAA,IACL,KAAK;AACH,aAAO,cAAc;AAAA,IACvB,KAAK;AAAA,IACL,KAAK;AACH,aAAO,cAAc;AAAA,IACvB,KAAK;AAAA,IACL,KAAK;AACH,aAAO,cAAc;AAAA,IACvB,KAAK;AAAA,IACL,KAAK;AACH,aAAO,cAAc;AAAA,IACvB,KAAK;AAAA,IACL,KAAK;AAAA,IACL;AACE,aAAO,cAAc;AAAA,EACzB;AACF;AACO,SAAS,oBAAoB,QAAQ;AAC1C,UAAQ,QAAQ;AAAA,IACd,KAAK,cAAc;AACjB,aAAO;AAAA,IACT,KAAK,cAAc;AACjB,aAAO;AAAA,IACT,KAAK,cAAc;AACjB,aAAO;AAAA,IACT,KAAK,cAAc;AACjB,aAAO;AAAA,IACT,KAAK,cAAc;AAAA,IACnB;AACE,aAAO;AAAA,EACX;AACF;AAuCA,SAAS,0BAA0B;AACjC,SAAO;AAAA,IACL,OAAO;AAAA,IACP,MAAM,IAAI,WAAW;AAAA,EACvB;AACF;AACO,IAAM,gBAAgB;AAAA,EAC3B,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,UAAU,GAAG;AACvB,aAAO,OAAO,CAAC,EAAE,OAAO,QAAQ,KAAK;AAAA,IACvC;AACA,QAAI,QAAQ,KAAK,WAAW,GAAG;AAC7B,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,IAAI;AAAA,IACtC;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,wBAAwB;AACxC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,QAAQ,OAAO,OAAO;AAC9B;AAAA,QACF,KAAK;AACH,kBAAQ,OAAO,OAAO,MAAM;AAC5B;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,OAAO,MAAM,OAAO,KAAK,IAAI,OAAO,OAAO,KAAK,IAAI;AAAA,MACpD,MAAM,MAAM,OAAO,IAAI,IAAI,gBAAgB,OAAO,IAAI,IAAI,IAAI,WAAW;AAAA,IAC3E;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,UAAU,WAAc,IAAI,QAAQ,KAAK,MAAM,QAAQ,KAAK;AACpE,YAAQ,SAAS,WAAc,IAAI,OAAO,gBAAgB,QAAQ,SAAS,SAAY,QAAQ,OAAO,IAAI,WAAW,CAAC;AACtH,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI,eAAe;AACnB,UAAM,UAAU,wBAAwB;AACxC,YAAQ,SAAS,gBAAgB,OAAO,WAAW,QAAQ,kBAAkB,SAAS,gBAAgB;AACtG,YAAQ,QAAQ,eAAe,OAAO,UAAU,QAAQ,iBAAiB,SAAS,eAAe,IAAI,WAAW;AAChH,WAAO;AAAA,EACT;AACF;AACA,SAAS,iBAAiB;AACxB,SAAO;AAAA,IACL,OAAO;AAAA,IACP,OAAO,IAAI,WAAW;AAAA,IACtB,OAAO;AAAA,EACT;AACF;AACO,IAAM,OAAO;AAAA,EAClB,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,UAAU,GAAG;AACvB,aAAO,OAAO,CAAC,EAAE,OAAO,QAAQ,KAAK;AAAA,IACvC;AACA,QAAI,QAAQ,MAAM,WAAW,GAAG;AAC9B,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,KAAK;AAAA,IACvC;AACA,QAAI,QAAQ,UAAU,QAAW;AAC/B,YAAM,OAAO,QAAQ,OAAO,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IAC/D;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,eAAe;AAC/B,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,QAAQ,OAAO,OAAO;AAC9B;AAAA,QACF,KAAK;AACH,kBAAQ,QAAQ,OAAO,MAAM;AAC7B;AAAA,QACF,KAAK;AACH,kBAAQ,QAAQ,MAAM,OAAO,QAAQ,OAAO,OAAO,CAAC;AACpD;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,OAAO,MAAM,OAAO,KAAK,IAAI,OAAO,OAAO,KAAK,IAAI;AAAA,MACpD,OAAO,MAAM,OAAO,KAAK,IAAI,gBAAgB,OAAO,KAAK,IAAI,IAAI,WAAW;AAAA,MAC5E,OAAO,MAAM,OAAO,KAAK,IAAI,MAAM,SAAS,OAAO,KAAK,IAAI;AAAA,IAC9D;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,UAAU,WAAc,IAAI,QAAQ,KAAK,MAAM,QAAQ,KAAK;AACpE,YAAQ,UAAU,WAAc,IAAI,QAAQ,gBAAgB,QAAQ,UAAU,SAAY,QAAQ,QAAQ,IAAI,WAAW,CAAC;AAC1H,YAAQ,UAAU,WAAc,IAAI,QAAQ,QAAQ,QAAQ,MAAM,OAAO,QAAQ,KAAK,IAAI;AAC1F,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI,eAAe;AACnB,UAAM,UAAU,eAAe;AAC/B,YAAQ,SAAS,gBAAgB,OAAO,WAAW,QAAQ,kBAAkB,SAAS,gBAAgB;AACtG,YAAQ,SAAS,gBAAgB,OAAO,WAAW,QAAQ,kBAAkB,SAAS,gBAAgB,IAAI,WAAW;AACrH,YAAQ,QAAQ,OAAO,UAAU,UAAa,OAAO,UAAU,OAAO,MAAM,YAAY,OAAO,KAAK,IAAI;AACxG,WAAO;AAAA,EACT;AACF;AACA,SAAS,oBAAoB;AAC3B,SAAO;AAAA,IACL,MAAM,IAAI,WAAW;AAAA,IACrB,eAAe;AAAA,EACjB;AACF;AACO,IAAM,UAAU;AAAA,EACrB,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,KAAK,WAAW,GAAG;AAC7B,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,IAAI;AAAA,IACtC;AACA,QAAI,QAAQ,kBAAkB,QAAW;AACvC,oBAAc,OAAO,QAAQ,eAAe,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IAC/E;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,kBAAkB;AAClC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,OAAO,OAAO,MAAM;AAC5B;AAAA,QACF,KAAK;AACH,kBAAQ,gBAAgB,cAAc,OAAO,QAAQ,OAAO,OAAO,CAAC;AACpE;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,MAAM,MAAM,OAAO,IAAI,IAAI,gBAAgB,OAAO,IAAI,IAAI,IAAI,WAAW;AAAA,MACzE,eAAe,MAAM,OAAO,aAAa,IAAI,cAAc,SAAS,OAAO,aAAa,IAAI;AAAA,IAC9F;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,SAAS,WAAc,IAAI,OAAO,gBAAgB,QAAQ,SAAS,SAAY,QAAQ,OAAO,IAAI,WAAW,CAAC;AACtH,YAAQ,kBAAkB,WAAc,IAAI,gBAAgB,QAAQ,gBAAgB,cAAc,OAAO,QAAQ,aAAa,IAAI;AAClI,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI;AACJ,UAAM,UAAU,kBAAkB;AAClC,YAAQ,QAAQ,gBAAgB,OAAO,UAAU,QAAQ,kBAAkB,SAAS,gBAAgB,IAAI,WAAW;AACnH,YAAQ,gBAAgB,OAAO,kBAAkB,UAAa,OAAO,kBAAkB,OAAO,cAAc,YAAY,OAAO,aAAa,IAAI;AAChJ,WAAO;AAAA,EACT;AACF;AACA,SAAS,mBAAmB;AAC1B,SAAO;AAAA,IACL,SAAS;AAAA,IACT,SAAS;AAAA,IACT,QAAQ,OAAO,GAAG;AAAA,IAClB,MAAM;AAAA,IACN,aAAa;AAAA,IACb,gBAAgB,IAAI,WAAW;AAAA,IAC/B,UAAU,IAAI,WAAW;AAAA,IACzB,gBAAgB,IAAI,WAAW;AAAA,IAC/B,oBAAoB,IAAI,WAAW;AAAA,IACnC,eAAe,IAAI,WAAW;AAAA,IAC9B,SAAS,IAAI,WAAW;AAAA,IACxB,iBAAiB,IAAI,WAAW;AAAA,IAChC,cAAc,IAAI,WAAW;AAAA,IAC7B,iBAAiB,IAAI,WAAW;AAAA,EAClC;AACF;AACO,IAAM,SAAS;AAAA,EACpB,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,YAAY,QAAW;AACjC,gBAAU,OAAO,QAAQ,SAAS,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACrE;AACA,QAAI,QAAQ,YAAY,IAAI;AAC1B,aAAO,OAAO,EAAE,EAAE,OAAO,QAAQ,OAAO;AAAA,IAC1C;AACA,QAAI,QAAQ,WAAW,OAAO,CAAC,GAAG;AAChC,aAAO,OAAO,EAAE,EAAE,MAAM,YAAAC,QAAK,WAAW,QAAQ,OAAO,SAAS,CAAC,CAAC;AAAA,IACpE;AACA,QAAI,QAAQ,SAAS,QAAW;AAC9B,gBAAU,OAAO,YAAY,QAAQ,IAAI,GAAG,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IAC/E;AACA,QAAI,QAAQ,gBAAgB,QAAW;AACrC,cAAQ,OAAO,QAAQ,aAAa,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACvE;AACA,QAAI,QAAQ,eAAe,WAAW,GAAG;AACvC,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,cAAc;AAAA,IAChD;AACA,QAAI,QAAQ,SAAS,WAAW,GAAG;AACjC,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,QAAQ;AAAA,IAC1C;AACA,QAAI,QAAQ,eAAe,WAAW,GAAG;AACvC,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,cAAc;AAAA,IAChD;AACA,QAAI,QAAQ,mBAAmB,WAAW,GAAG;AAC3C,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,kBAAkB;AAAA,IACpD;AACA,QAAI,QAAQ,cAAc,WAAW,GAAG;AACtC,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,aAAa;AAAA,IAC/C;AACA,QAAI,QAAQ,QAAQ,WAAW,GAAG;AAChC,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,OAAO;AAAA,IACzC;AACA,QAAI,QAAQ,gBAAgB,WAAW,GAAG;AACxC,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,eAAe;AAAA,IACjD;AACA,QAAI,QAAQ,aAAa,WAAW,GAAG;AACrC,aAAO,OAAO,GAAG,EAAE,MAAM,QAAQ,YAAY;AAAA,IAC/C;AACA,QAAI,QAAQ,gBAAgB,WAAW,GAAG;AACxC,aAAO,OAAO,GAAG,EAAE,MAAM,QAAQ,eAAe;AAAA,IAClD;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,iBAAiB;AACjC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,UAAU,UAAU,OAAO,QAAQ,OAAO,OAAO,CAAC;AAC1D;AAAA,QACF,KAAK;AACH,kBAAQ,UAAU,OAAO,OAAO;AAChC;AAAA,QACF,KAAK;AACH,kBAAQ,SAAS,OAAO,OAAO,MAAM,EAAE,SAAS,CAAC;AACjD;AAAA,QACF,KAAK;AACH,kBAAQ,OAAO,cAAc,UAAU,OAAO,QAAQ,OAAO,OAAO,CAAC,CAAC;AACtE;AAAA,QACF,KAAK;AACH,kBAAQ,cAAc,QAAQ,OAAO,QAAQ,OAAO,OAAO,CAAC;AAC5D;AAAA,QACF,KAAK;AACH,kBAAQ,iBAAiB,OAAO,MAAM;AACtC;AAAA,QACF,KAAK;AACH,kBAAQ,WAAW,OAAO,MAAM;AAChC;AAAA,QACF,KAAK;AACH,kBAAQ,iBAAiB,OAAO,MAAM;AACtC;AAAA,QACF,KAAK;AACH,kBAAQ,qBAAqB,OAAO,MAAM;AAC1C;AAAA,QACF,KAAK;AACH,kBAAQ,gBAAgB,OAAO,MAAM;AACrC;AAAA,QACF,KAAK;AACH,kBAAQ,UAAU,OAAO,MAAM;AAC/B;AAAA,QACF,KAAK;AACH,kBAAQ,kBAAkB,OAAO,MAAM;AACvC;AAAA,QACF,KAAK;AACH,kBAAQ,eAAe,OAAO,MAAM;AACpC;AAAA,QACF,KAAK;AACH,kBAAQ,kBAAkB,OAAO,MAAM;AACvC;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,SAAS,MAAM,OAAO,OAAO,IAAI,UAAU,SAAS,OAAO,OAAO,IAAI;AAAA,MACtE,SAAS,MAAM,OAAO,OAAO,IAAI,OAAO,OAAO,OAAO,IAAI;AAAA,MAC1D,QAAQ,MAAM,OAAO,MAAM,IAAI,OAAO,OAAO,OAAO,SAAS,CAAC,IAAI,OAAO,GAAG;AAAA,MAC5E,MAAM,MAAM,OAAO,IAAI,IAAI,kBAAkB,OAAO,IAAI,IAAI;AAAA,MAC5D,aAAa,MAAM,OAAO,WAAW,IAAI,QAAQ,SAAS,OAAO,WAAW,IAAI;AAAA,MAChF,gBAAgB,MAAM,OAAO,cAAc,IAAI,gBAAgB,OAAO,cAAc,IAAI,IAAI,WAAW;AAAA,MACvG,UAAU,MAAM,OAAO,QAAQ,IAAI,gBAAgB,OAAO,QAAQ,IAAI,IAAI,WAAW;AAAA,MACrF,gBAAgB,MAAM,OAAO,cAAc,IAAI,gBAAgB,OAAO,cAAc,IAAI,IAAI,WAAW;AAAA,MACvG,oBAAoB,MAAM,OAAO,kBAAkB,IAAI,gBAAgB,OAAO,kBAAkB,IAAI,IAAI,WAAW;AAAA,MACnH,eAAe,MAAM,OAAO,aAAa,IAAI,gBAAgB,OAAO,aAAa,IAAI,IAAI,WAAW;AAAA,MACpG,SAAS,MAAM,OAAO,OAAO,IAAI,gBAAgB,OAAO,OAAO,IAAI,IAAI,WAAW;AAAA,MAClF,iBAAiB,MAAM,OAAO,eAAe,IAAI,gBAAgB,OAAO,eAAe,IAAI,IAAI,WAAW;AAAA,MAC1G,cAAc,MAAM,OAAO,YAAY,IAAI,gBAAgB,OAAO,YAAY,IAAI,IAAI,WAAW;AAAA,MACjG,iBAAiB,MAAM,OAAO,eAAe,IAAI,gBAAgB,OAAO,eAAe,IAAI,IAAI,WAAW;AAAA,IAC5G;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,YAAY,WAAc,IAAI,UAAU,QAAQ,UAAU,UAAU,OAAO,QAAQ,OAAO,IAAI;AACtG,YAAQ,YAAY,WAAc,IAAI,UAAU,QAAQ;AACxD,YAAQ,WAAW,WAAc,IAAI,UAAU,QAAQ,UAAU,OAAO,GAAG,GAAG,SAAS;AACvF,YAAQ,SAAS,WAAc,IAAI,OAAO,QAAQ,KAAK,YAAY;AACnE,YAAQ,gBAAgB,WAAc,IAAI,cAAc,QAAQ,cAAc,QAAQ,OAAO,QAAQ,WAAW,IAAI;AACpH,YAAQ,mBAAmB,WAAc,IAAI,iBAAiB,gBAAgB,QAAQ,mBAAmB,SAAY,QAAQ,iBAAiB,IAAI,WAAW,CAAC;AAC9J,YAAQ,aAAa,WAAc,IAAI,WAAW,gBAAgB,QAAQ,aAAa,SAAY,QAAQ,WAAW,IAAI,WAAW,CAAC;AACtI,YAAQ,mBAAmB,WAAc,IAAI,iBAAiB,gBAAgB,QAAQ,mBAAmB,SAAY,QAAQ,iBAAiB,IAAI,WAAW,CAAC;AAC9J,YAAQ,uBAAuB,WAAc,IAAI,qBAAqB,gBAAgB,QAAQ,uBAAuB,SAAY,QAAQ,qBAAqB,IAAI,WAAW,CAAC;AAC9K,YAAQ,kBAAkB,WAAc,IAAI,gBAAgB,gBAAgB,QAAQ,kBAAkB,SAAY,QAAQ,gBAAgB,IAAI,WAAW,CAAC;AAC1J,YAAQ,YAAY,WAAc,IAAI,UAAU,gBAAgB,QAAQ,YAAY,SAAY,QAAQ,UAAU,IAAI,WAAW,CAAC;AAClI,YAAQ,oBAAoB,WAAc,IAAI,kBAAkB,gBAAgB,QAAQ,oBAAoB,SAAY,QAAQ,kBAAkB,IAAI,WAAW,CAAC;AAClK,YAAQ,iBAAiB,WAAc,IAAI,eAAe,gBAAgB,QAAQ,iBAAiB,SAAY,QAAQ,eAAe,IAAI,WAAW,CAAC;AACtJ,YAAQ,oBAAoB,WAAc,IAAI,kBAAkB,gBAAgB,QAAQ,oBAAoB,SAAY,QAAQ,kBAAkB,IAAI,WAAW,CAAC;AAClK,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI,iBAAiB,cAAc,uBAAuB,kBAAkB,uBAAuB,uBAAuB,uBAAuB,iBAAiB,uBAAuB,sBAAsB;AAC/M,UAAM,UAAU,iBAAiB;AACjC,YAAQ,UAAU,OAAO,YAAY,UAAa,OAAO,YAAY,OAAO,UAAU,YAAY,OAAO,OAAO,IAAI;AACpH,YAAQ,WAAW,kBAAkB,OAAO,aAAa,QAAQ,oBAAoB,SAAS,kBAAkB;AAChH,YAAQ,SAAS,OAAO,WAAW,UAAa,OAAO,WAAW,OAAO,OAAO,OAAO,OAAO,SAAS,CAAC,IAAI,OAAO,GAAG;AACtH,YAAQ,QAAQ,eAAe,OAAO,UAAU,QAAQ,iBAAiB,SAAS,eAAe;AACjG,YAAQ,cAAc,OAAO,gBAAgB,UAAa,OAAO,gBAAgB,OAAO,QAAQ,YAAY,OAAO,WAAW,IAAI;AAClI,YAAQ,kBAAkB,wBAAwB,OAAO,oBAAoB,QAAQ,0BAA0B,SAAS,wBAAwB,IAAI,WAAW;AAC/J,YAAQ,YAAY,mBAAmB,OAAO,cAAc,QAAQ,qBAAqB,SAAS,mBAAmB,IAAI,WAAW;AACpI,YAAQ,kBAAkB,wBAAwB,OAAO,oBAAoB,QAAQ,0BAA0B,SAAS,wBAAwB,IAAI,WAAW;AAC/J,YAAQ,sBAAsB,wBAAwB,OAAO,wBAAwB,QAAQ,0BAA0B,SAAS,wBAAwB,IAAI,WAAW;AACvK,YAAQ,iBAAiB,wBAAwB,OAAO,mBAAmB,QAAQ,0BAA0B,SAAS,wBAAwB,IAAI,WAAW;AAC7J,YAAQ,WAAW,kBAAkB,OAAO,aAAa,QAAQ,oBAAoB,SAAS,kBAAkB,IAAI,WAAW;AAC/H,YAAQ,mBAAmB,wBAAwB,OAAO,qBAAqB,QAAQ,0BAA0B,SAAS,wBAAwB,IAAI,WAAW;AACjK,YAAQ,gBAAgB,uBAAuB,OAAO,kBAAkB,QAAQ,yBAAyB,SAAS,uBAAuB,IAAI,WAAW;AACxJ,YAAQ,mBAAmB,wBAAwB,OAAO,qBAAqB,QAAQ,0BAA0B,SAAS,wBAAwB,IAAI,WAAW;AACjK,WAAO;AAAA,EACT;AACF;AACA,SAAS,iBAAiB;AACxB,SAAO;AAAA,IACL,KAAK,CAAC;AAAA,EACR;AACF;AACO,IAAM,OAAO;AAAA,EAClB,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,eAAW,KAAK,QAAQ,KAAK;AAC3B,aAAO,OAAO,EAAE,EAAE,MAAM,CAAC;AAAA,IAC3B;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,eAAe;AAC/B,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,IAAI,KAAK,OAAO,MAAM,CAAC;AAC/B;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,KAAK,MAAM,QAAQ,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,GAAG,IAAI,OAAO,IAAI,IAAI,OAAK,gBAAgB,CAAC,CAAC,IAAI,CAAC;AAAA,IAC9H;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,QAAI,QAAQ,KAAK;AACf,UAAI,MAAM,QAAQ,IAAI,IAAI,OAAK,gBAAgB,MAAM,SAAY,IAAI,IAAI,WAAW,CAAC,CAAC;AAAA,IACxF,OAAO;AACL,UAAI,MAAM,CAAC;AAAA,IACb;AACA,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI;AACJ,UAAM,UAAU,eAAe;AAC/B,YAAQ,QAAQ,cAAc,OAAO,SAAS,QAAQ,gBAAgB,SAAS,SAAS,YAAY,IAAI,OAAK,CAAC,MAAM,CAAC;AACrH,WAAO;AAAA,EACT;AACF;AACA,SAAS,iBAAiB;AACxB,SAAO;AAAA,IACL,MAAM;AAAA,IACN,QAAQ,OAAO,GAAG;AAAA,IAClB,OAAO;AAAA,IACP,SAAS;AAAA,IACT,WAAW;AAAA,IACX,kBAAkB,IAAI,WAAW;AAAA,IACjC,gBAAgB;AAAA,IAChB,WAAW,IAAI,WAAW;AAAA,EAC5B;AACF;AACO,IAAM,OAAO;AAAA,EAClB,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,SAAS,GAAG;AACtB,aAAO,OAAO,CAAC,EAAE,MAAM,QAAQ,IAAI;AAAA,IACrC;AACA,QAAI,QAAQ,WAAW,OAAO,CAAC,GAAG;AAChC,aAAO,OAAO,EAAE,EAAE,MAAM,YAAAA,QAAK,WAAW,QAAQ,OAAO,SAAS,CAAC,CAAC;AAAA,IACpE;AACA,QAAI,QAAQ,UAAU,GAAG;AACvB,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,KAAK;AAAA,IACvC;AACA,QAAI,QAAQ,YAAY,QAAW;AACjC,cAAQ,OAAO,QAAQ,SAAS,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACnE;AACA,QAAI,QAAQ,cAAc,QAAW;AACnC,gBAAU,OAAO,YAAY,QAAQ,SAAS,GAAG,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACpF;AACA,QAAI,QAAQ,iBAAiB,WAAW,GAAG;AACzC,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,gBAAgB;AAAA,IAClD;AACA,QAAI,QAAQ,mBAAmB,GAAG;AAChC,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,cAAc;AAAA,IAChD;AACA,QAAI,QAAQ,UAAU,WAAW,GAAG;AAClC,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,SAAS;AAAA,IAC3C;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,eAAe;AAC/B,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,OAAO,OAAO,MAAM;AAC5B;AAAA,QACF,KAAK;AACH,kBAAQ,SAAS,OAAO,OAAO,MAAM,EAAE,SAAS,CAAC;AACjD;AAAA,QACF,KAAK;AACH,kBAAQ,QAAQ,OAAO,MAAM;AAC7B;AAAA,QACF,KAAK;AACH,kBAAQ,UAAU,QAAQ,OAAO,QAAQ,OAAO,OAAO,CAAC;AACxD;AAAA,QACF,KAAK;AACH,kBAAQ,YAAY,cAAc,UAAU,OAAO,QAAQ,OAAO,OAAO,CAAC,CAAC;AAC3E;AAAA,QACF,KAAK;AACH,kBAAQ,mBAAmB,OAAO,MAAM;AACxC;AAAA,QACF,KAAK;AACH,kBAAQ,iBAAiB,OAAO,MAAM;AACtC;AAAA,QACF,KAAK;AACH,kBAAQ,YAAY,OAAO,MAAM;AACjC;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,MAAM,MAAM,OAAO,IAAI,IAAI,sBAAsB,OAAO,IAAI,IAAI;AAAA,MAChE,QAAQ,MAAM,OAAO,MAAM,IAAI,OAAO,OAAO,OAAO,SAAS,CAAC,IAAI,OAAO,GAAG;AAAA,MAC5E,OAAO,MAAM,OAAO,KAAK,IAAI,OAAO,OAAO,KAAK,IAAI;AAAA,MACpD,SAAS,MAAM,OAAO,OAAO,IAAI,QAAQ,SAAS,OAAO,OAAO,IAAI;AAAA,MACpE,WAAW,MAAM,OAAO,SAAS,IAAI,kBAAkB,OAAO,SAAS,IAAI;AAAA,MAC3E,kBAAkB,MAAM,OAAO,gBAAgB,IAAI,gBAAgB,OAAO,gBAAgB,IAAI,IAAI,WAAW;AAAA,MAC7G,gBAAgB,MAAM,OAAO,cAAc,IAAI,OAAO,OAAO,cAAc,IAAI;AAAA,MAC/E,WAAW,MAAM,OAAO,SAAS,IAAI,gBAAgB,OAAO,SAAS,IAAI,IAAI,WAAW;AAAA,IAC1F;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,SAAS,WAAc,IAAI,OAAO,oBAAoB,QAAQ,IAAI;AAC1E,YAAQ,WAAW,WAAc,IAAI,UAAU,QAAQ,UAAU,OAAO,GAAG,GAAG,SAAS;AACvF,YAAQ,UAAU,WAAc,IAAI,QAAQ,KAAK,MAAM,QAAQ,KAAK;AACpE,YAAQ,YAAY,WAAc,IAAI,UAAU,QAAQ,UAAU,QAAQ,OAAO,QAAQ,OAAO,IAAI;AACpG,YAAQ,cAAc,WAAc,IAAI,YAAY,QAAQ,UAAU,YAAY;AAClF,YAAQ,qBAAqB,WAAc,IAAI,mBAAmB,gBAAgB,QAAQ,qBAAqB,SAAY,QAAQ,mBAAmB,IAAI,WAAW,CAAC;AACtK,YAAQ,mBAAmB,WAAc,IAAI,iBAAiB,KAAK,MAAM,QAAQ,cAAc;AAC/F,YAAQ,cAAc,WAAc,IAAI,YAAY,gBAAgB,QAAQ,cAAc,SAAY,QAAQ,YAAY,IAAI,WAAW,CAAC;AAC1I,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI,cAAc,eAAe,mBAAmB,uBAAuB,uBAAuB;AAClG,UAAM,UAAU,eAAe;AAC/B,YAAQ,QAAQ,eAAe,OAAO,UAAU,QAAQ,iBAAiB,SAAS,eAAe;AACjG,YAAQ,SAAS,OAAO,WAAW,UAAa,OAAO,WAAW,OAAO,OAAO,OAAO,OAAO,SAAS,CAAC,IAAI,OAAO,GAAG;AACtH,YAAQ,SAAS,gBAAgB,OAAO,WAAW,QAAQ,kBAAkB,SAAS,gBAAgB;AACtG,YAAQ,UAAU,OAAO,YAAY,UAAa,OAAO,YAAY,OAAO,QAAQ,YAAY,OAAO,OAAO,IAAI;AAClH,YAAQ,aAAa,oBAAoB,OAAO,eAAe,QAAQ,sBAAsB,SAAS,oBAAoB;AAC1H,YAAQ,oBAAoB,wBAAwB,OAAO,sBAAsB,QAAQ,0BAA0B,SAAS,wBAAwB,IAAI,WAAW;AACnK,YAAQ,kBAAkB,wBAAwB,OAAO,oBAAoB,QAAQ,0BAA0B,SAAS,wBAAwB;AAChJ,YAAQ,aAAa,oBAAoB,OAAO,eAAe,QAAQ,sBAAsB,SAAS,oBAAoB,IAAI,WAAW;AACzI,WAAO;AAAA,EACT;AACF;AACA,SAAS,mBAAmB;AAC1B,SAAO;AAAA,IACL,QAAQ,OAAO,GAAG;AAAA,IAClB,OAAO;AAAA,IACP,SAAS;AAAA,IACT,YAAY,CAAC;AAAA,EACf;AACF;AACO,IAAM,SAAS;AAAA,EACpB,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,WAAW,OAAO,CAAC,GAAG;AAChC,aAAO,OAAO,CAAC,EAAE,MAAM,YAAAA,QAAK,WAAW,QAAQ,OAAO,SAAS,CAAC,CAAC;AAAA,IACnE;AACA,QAAI,QAAQ,UAAU,GAAG;AACvB,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,KAAK;AAAA,IACvC;AACA,QAAI,QAAQ,YAAY,QAAW;AACjC,cAAQ,OAAO,QAAQ,SAAS,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACnE;AACA,eAAW,KAAK,QAAQ,YAAY;AAClC,gBAAU,OAAO,GAAG,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACvD;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,iBAAiB;AACjC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,SAAS,OAAO,OAAO,MAAM,EAAE,SAAS,CAAC;AACjD;AAAA,QACF,KAAK;AACH,kBAAQ,QAAQ,OAAO,MAAM;AAC7B;AAAA,QACF,KAAK;AACH,kBAAQ,UAAU,QAAQ,OAAO,QAAQ,OAAO,OAAO,CAAC;AACxD;AAAA,QACF,KAAK;AACH,kBAAQ,WAAW,KAAK,UAAU,OAAO,QAAQ,OAAO,OAAO,CAAC,CAAC;AACjE;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,QAAQ,MAAM,OAAO,MAAM,IAAI,OAAO,OAAO,OAAO,SAAS,CAAC,IAAI,OAAO,GAAG;AAAA,MAC5E,OAAO,MAAM,OAAO,KAAK,IAAI,OAAO,OAAO,KAAK,IAAI;AAAA,MACpD,SAAS,MAAM,OAAO,OAAO,IAAI,QAAQ,SAAS,OAAO,OAAO,IAAI;AAAA,MACpE,YAAY,MAAM,QAAQ,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,UAAU,IAAI,OAAO,WAAW,IAAI,OAAK,UAAU,SAAS,CAAC,CAAC,IAAI,CAAC;AAAA,IACtJ;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,WAAW,WAAc,IAAI,UAAU,QAAQ,UAAU,OAAO,GAAG,GAAG,SAAS;AACvF,YAAQ,UAAU,WAAc,IAAI,QAAQ,KAAK,MAAM,QAAQ,KAAK;AACpE,YAAQ,YAAY,WAAc,IAAI,UAAU,QAAQ,UAAU,QAAQ,OAAO,QAAQ,OAAO,IAAI;AACpG,QAAI,QAAQ,YAAY;AACtB,UAAI,aAAa,QAAQ,WAAW,IAAI,OAAK,IAAI,UAAU,OAAO,CAAC,IAAI,MAAS;AAAA,IAClF,OAAO;AACL,UAAI,aAAa,CAAC;AAAA,IACpB;AACA,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI,gBAAgB;AACpB,UAAM,UAAU,iBAAiB;AACjC,YAAQ,SAAS,OAAO,WAAW,UAAa,OAAO,WAAW,OAAO,OAAO,OAAO,OAAO,SAAS,CAAC,IAAI,OAAO,GAAG;AACtH,YAAQ,SAAS,iBAAiB,OAAO,WAAW,QAAQ,mBAAmB,SAAS,iBAAiB;AACzG,YAAQ,UAAU,OAAO,YAAY,UAAa,OAAO,YAAY,OAAO,QAAQ,YAAY,OAAO,OAAO,IAAI;AAClH,YAAQ,eAAe,qBAAqB,OAAO,gBAAgB,QAAQ,uBAAuB,SAAS,SAAS,mBAAmB,IAAI,OAAK,UAAU,YAAY,CAAC,CAAC,MAAM,CAAC;AAC/K,WAAO;AAAA,EACT;AACF;AACA,SAAS,sBAAsB;AAC7B,SAAO;AAAA,IACL,aAAa;AAAA,IACb,kBAAkB,IAAI,WAAW;AAAA,IACjC,WAAW;AAAA,IACX,WAAW,IAAI,WAAW;AAAA,EAC5B;AACF;AACO,IAAM,YAAY;AAAA,EACvB,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,gBAAgB,GAAG;AAC7B,aAAO,OAAO,CAAC,EAAE,MAAM,QAAQ,WAAW;AAAA,IAC5C;AACA,QAAI,QAAQ,iBAAiB,WAAW,GAAG;AACzC,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,gBAAgB;AAAA,IAClD;AACA,QAAI,QAAQ,cAAc,QAAW;AACnC,gBAAU,OAAO,YAAY,QAAQ,SAAS,GAAG,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACpF;AACA,QAAI,QAAQ,UAAU,WAAW,GAAG;AAClC,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,SAAS;AAAA,IAC3C;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,oBAAoB;AACpC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,cAAc,OAAO,MAAM;AACnC;AAAA,QACF,KAAK;AACH,kBAAQ,mBAAmB,OAAO,MAAM;AACxC;AAAA,QACF,KAAK;AACH,kBAAQ,YAAY,cAAc,UAAU,OAAO,QAAQ,OAAO,OAAO,CAAC,CAAC;AAC3E;AAAA,QACF,KAAK;AACH,kBAAQ,YAAY,OAAO,MAAM;AACjC;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,aAAa,MAAM,OAAO,WAAW,IAAI,oBAAoB,OAAO,WAAW,IAAI;AAAA,MACnF,kBAAkB,MAAM,OAAO,gBAAgB,IAAI,gBAAgB,OAAO,gBAAgB,IAAI,IAAI,WAAW;AAAA,MAC7G,WAAW,MAAM,OAAO,SAAS,IAAI,kBAAkB,OAAO,SAAS,IAAI;AAAA,MAC3E,WAAW,MAAM,OAAO,SAAS,IAAI,gBAAgB,OAAO,SAAS,IAAI,IAAI,WAAW;AAAA,IAC1F;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,gBAAgB,WAAc,IAAI,cAAc,kBAAkB,QAAQ,WAAW;AAC7F,YAAQ,qBAAqB,WAAc,IAAI,mBAAmB,gBAAgB,QAAQ,qBAAqB,SAAY,QAAQ,mBAAmB,IAAI,WAAW,CAAC;AACtK,YAAQ,cAAc,WAAc,IAAI,YAAY,QAAQ,UAAU,YAAY;AAClF,YAAQ,cAAc,WAAc,IAAI,YAAY,gBAAgB,QAAQ,cAAc,SAAY,QAAQ,YAAY,IAAI,WAAW,CAAC;AAC1I,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI,qBAAqB,wBAAwB,oBAAoB;AACrE,UAAM,UAAU,oBAAoB;AACpC,YAAQ,eAAe,sBAAsB,OAAO,iBAAiB,QAAQ,wBAAwB,SAAS,sBAAsB;AACpI,YAAQ,oBAAoB,yBAAyB,OAAO,sBAAsB,QAAQ,2BAA2B,SAAS,yBAAyB,IAAI,WAAW;AACtK,YAAQ,aAAa,qBAAqB,OAAO,eAAe,QAAQ,uBAAuB,SAAS,qBAAqB;AAC7H,YAAQ,aAAa,qBAAqB,OAAO,eAAe,QAAQ,uBAAuB,SAAS,qBAAqB,IAAI,WAAW;AAC5I,WAAO;AAAA,EACT;AACF;AACA,SAAS,qBAAqB;AAC5B,SAAO;AAAA,IACL,MAAM;AAAA,IACN,QAAQ,OAAO,GAAG;AAAA,IAClB,OAAO;AAAA,IACP,UAAU;AAAA,IACV,SAAS;AAAA,IACT,WAAW;AAAA,IACX,WAAW,IAAI,WAAW;AAAA,EAC5B;AACF;AACO,IAAM,WAAW;AAAA,EACtB,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,SAAS,GAAG;AACtB,aAAO,OAAO,CAAC,EAAE,MAAM,QAAQ,IAAI;AAAA,IACrC;AACA,QAAI,QAAQ,WAAW,OAAO,CAAC,GAAG;AAChC,aAAO,OAAO,EAAE,EAAE,MAAM,YAAAA,QAAK,WAAW,QAAQ,OAAO,SAAS,CAAC,CAAC;AAAA,IACpE;AACA,QAAI,QAAQ,UAAU,GAAG;AACvB,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,KAAK;AAAA,IACvC;AACA,QAAI,QAAQ,aAAa,GAAG;AAC1B,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,QAAQ;AAAA,IAC1C;AACA,QAAI,QAAQ,YAAY,QAAW;AACjC,cAAQ,OAAO,QAAQ,SAAS,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACnE;AACA,QAAI,QAAQ,cAAc,QAAW;AACnC,gBAAU,OAAO,YAAY,QAAQ,SAAS,GAAG,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACpF;AACA,QAAI,QAAQ,UAAU,WAAW,GAAG;AAClC,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,SAAS;AAAA,IAC3C;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,mBAAmB;AACnC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,OAAO,OAAO,MAAM;AAC5B;AAAA,QACF,KAAK;AACH,kBAAQ,SAAS,OAAO,OAAO,MAAM,EAAE,SAAS,CAAC;AACjD;AAAA,QACF,KAAK;AACH,kBAAQ,QAAQ,OAAO,MAAM;AAC7B;AAAA,QACF,KAAK;AACH,kBAAQ,WAAW,OAAO,MAAM;AAChC;AAAA,QACF,KAAK;AACH,kBAAQ,UAAU,QAAQ,OAAO,QAAQ,OAAO,OAAO,CAAC;AACxD;AAAA,QACF,KAAK;AACH,kBAAQ,YAAY,cAAc,UAAU,OAAO,QAAQ,OAAO,OAAO,CAAC,CAAC;AAC3E;AAAA,QACF,KAAK;AACH,kBAAQ,YAAY,OAAO,MAAM;AACjC;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,MAAM,MAAM,OAAO,IAAI,IAAI,sBAAsB,OAAO,IAAI,IAAI;AAAA,MAChE,QAAQ,MAAM,OAAO,MAAM,IAAI,OAAO,OAAO,OAAO,SAAS,CAAC,IAAI,OAAO,GAAG;AAAA,MAC5E,OAAO,MAAM,OAAO,KAAK,IAAI,OAAO,OAAO,KAAK,IAAI;AAAA,MACpD,UAAU,MAAM,OAAO,QAAQ,IAAI,OAAO,OAAO,QAAQ,IAAI;AAAA,MAC7D,SAAS,MAAM,OAAO,OAAO,IAAI,QAAQ,SAAS,OAAO,OAAO,IAAI;AAAA,MACpE,WAAW,MAAM,OAAO,SAAS,IAAI,kBAAkB,OAAO,SAAS,IAAI;AAAA,MAC3E,WAAW,MAAM,OAAO,SAAS,IAAI,gBAAgB,OAAO,SAAS,IAAI,IAAI,WAAW;AAAA,IAC1F;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,SAAS,WAAc,IAAI,OAAO,oBAAoB,QAAQ,IAAI;AAC1E,YAAQ,WAAW,WAAc,IAAI,UAAU,QAAQ,UAAU,OAAO,GAAG,GAAG,SAAS;AACvF,YAAQ,UAAU,WAAc,IAAI,QAAQ,KAAK,MAAM,QAAQ,KAAK;AACpE,YAAQ,aAAa,WAAc,IAAI,WAAW,KAAK,MAAM,QAAQ,QAAQ;AAC7E,YAAQ,YAAY,WAAc,IAAI,UAAU,QAAQ,UAAU,QAAQ,OAAO,QAAQ,OAAO,IAAI;AACpG,YAAQ,cAAc,WAAc,IAAI,YAAY,QAAQ,UAAU,YAAY;AAClF,YAAQ,cAAc,WAAc,IAAI,YAAY,gBAAgB,QAAQ,cAAc,SAAY,QAAQ,YAAY,IAAI,WAAW,CAAC;AAC1I,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI,eAAe,gBAAgB,kBAAkB,oBAAoB;AACzE,UAAM,UAAU,mBAAmB;AACnC,YAAQ,QAAQ,gBAAgB,OAAO,UAAU,QAAQ,kBAAkB,SAAS,gBAAgB;AACpG,YAAQ,SAAS,OAAO,WAAW,UAAa,OAAO,WAAW,OAAO,OAAO,OAAO,OAAO,SAAS,CAAC,IAAI,OAAO,GAAG;AACtH,YAAQ,SAAS,iBAAiB,OAAO,WAAW,QAAQ,mBAAmB,SAAS,iBAAiB;AACzG,YAAQ,YAAY,mBAAmB,OAAO,cAAc,QAAQ,qBAAqB,SAAS,mBAAmB;AACrH,YAAQ,UAAU,OAAO,YAAY,UAAa,OAAO,YAAY,OAAO,QAAQ,YAAY,OAAO,OAAO,IAAI;AAClH,YAAQ,aAAa,qBAAqB,OAAO,eAAe,QAAQ,uBAAuB,SAAS,qBAAqB;AAC7H,YAAQ,aAAa,qBAAqB,OAAO,eAAe,QAAQ,uBAAuB,SAAS,qBAAqB,IAAI,WAAW;AAC5I,WAAO;AAAA,EACT;AACF;AACA,SAAS,yBAAyB;AAChC,SAAO;AAAA,IACL,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AACF;AACO,IAAM,eAAe;AAAA,EAC1B,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,WAAW,QAAW;AAChC,aAAO,OAAO,QAAQ,QAAQ,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACjE;AACA,QAAI,QAAQ,WAAW,QAAW;AAChC,aAAO,OAAO,QAAQ,QAAQ,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACjE;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,uBAAuB;AACvC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,SAAS,OAAO,OAAO,QAAQ,OAAO,OAAO,CAAC;AACtD;AAAA,QACF,KAAK;AACH,kBAAQ,SAAS,OAAO,OAAO,QAAQ,OAAO,OAAO,CAAC;AACtD;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,QAAQ,MAAM,OAAO,MAAM,IAAI,OAAO,SAAS,OAAO,MAAM,IAAI;AAAA,MAChE,QAAQ,MAAM,OAAO,MAAM,IAAI,OAAO,SAAS,OAAO,MAAM,IAAI;AAAA,IAClE;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,WAAW,WAAc,IAAI,SAAS,QAAQ,SAAS,OAAO,OAAO,QAAQ,MAAM,IAAI;AAC/F,YAAQ,WAAW,WAAc,IAAI,SAAS,QAAQ,SAAS,OAAO,OAAO,QAAQ,MAAM,IAAI;AAC/F,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,UAAM,UAAU,uBAAuB;AACvC,YAAQ,SAAS,OAAO,WAAW,UAAa,OAAO,WAAW,OAAO,OAAO,YAAY,OAAO,MAAM,IAAI;AAC7G,YAAQ,SAAS,OAAO,WAAW,UAAa,OAAO,WAAW,OAAO,OAAO,YAAY,OAAO,MAAM,IAAI;AAC7G,WAAO;AAAA,EACT;AACF;AACA,SAAS,uBAAuB;AAC9B,SAAO;AAAA,IACL,cAAc;AAAA,IACd,cAAc;AAAA,EAChB;AACF;AACO,IAAM,aAAa;AAAA,EACxB,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,iBAAiB,QAAW;AACtC,mBAAa,OAAO,QAAQ,cAAc,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IAC7E;AACA,QAAI,QAAQ,iBAAiB,QAAW;AACtC,mBAAa,OAAO,QAAQ,cAAc,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IAC7E;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,qBAAqB;AACrC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,eAAe,aAAa,OAAO,QAAQ,OAAO,OAAO,CAAC;AAClE;AAAA,QACF,KAAK;AACH,kBAAQ,eAAe,aAAa,OAAO,QAAQ,OAAO,OAAO,CAAC;AAClE;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,cAAc,MAAM,OAAO,YAAY,IAAI,aAAa,SAAS,OAAO,YAAY,IAAI;AAAA,MACxF,cAAc,MAAM,OAAO,YAAY,IAAI,aAAa,SAAS,OAAO,YAAY,IAAI;AAAA,IAC1F;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,iBAAiB,WAAc,IAAI,eAAe,QAAQ,eAAe,aAAa,OAAO,QAAQ,YAAY,IAAI;AAC7H,YAAQ,iBAAiB,WAAc,IAAI,eAAe,QAAQ,eAAe,aAAa,OAAO,QAAQ,YAAY,IAAI;AAC7H,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,UAAM,UAAU,qBAAqB;AACrC,YAAQ,eAAe,OAAO,iBAAiB,UAAa,OAAO,iBAAiB,OAAO,aAAa,YAAY,OAAO,YAAY,IAAI;AAC3I,YAAQ,eAAe,OAAO,iBAAiB,UAAa,OAAO,iBAAiB,OAAO,aAAa,YAAY,OAAO,YAAY,IAAI;AAC3I,WAAO;AAAA,EACT;AACF;AACA,SAAS,sBAAsB;AAC7B,SAAO;AAAA,IACL,SAAS;AAAA,IACT,WAAW,OAAO,GAAG;AAAA,IACrB,QAAQ;AAAA,IACR,QAAQ,OAAO,GAAG;AAAA,EACpB;AACF;AACO,IAAM,YAAY;AAAA,EACvB,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,YAAY,QAAW;AACjC,cAAQ,OAAO,QAAQ,SAAS,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACnE;AACA,QAAI,QAAQ,cAAc,OAAO,CAAC,GAAG;AACnC,aAAO,OAAO,EAAE,EAAE,MAAM,YAAAA,QAAK,WAAW,QAAQ,UAAU,SAAS,CAAC,CAAC;AAAA,IACvE;AACA,QAAI,QAAQ,WAAW,QAAW;AAChC,aAAO,OAAO,QAAQ,QAAQ,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IACjE;AACA,QAAI,QAAQ,WAAW,OAAO,CAAC,GAAG;AAChC,aAAO,OAAO,EAAE,EAAE,MAAM,YAAAA,QAAK,WAAW,QAAQ,OAAO,SAAS,CAAC,CAAC;AAAA,IACpE;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,oBAAoB;AACpC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,UAAU,QAAQ,OAAO,QAAQ,OAAO,OAAO,CAAC;AACxD;AAAA,QACF,KAAK;AACH,kBAAQ,YAAY,OAAO,OAAO,MAAM,EAAE,SAAS,CAAC;AACpD;AAAA,QACF,KAAK;AACH,kBAAQ,SAAS,OAAO,OAAO,QAAQ,OAAO,OAAO,CAAC;AACtD;AAAA,QACF,KAAK;AACH,kBAAQ,SAAS,OAAO,OAAO,MAAM,EAAE,SAAS,CAAC;AACjD;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,SAAS,MAAM,OAAO,OAAO,IAAI,QAAQ,SAAS,OAAO,OAAO,IAAI;AAAA,MACpE,WAAW,MAAM,OAAO,SAAS,IAAI,OAAO,OAAO,UAAU,SAAS,CAAC,IAAI,OAAO,GAAG;AAAA,MACrF,QAAQ,MAAM,OAAO,MAAM,IAAI,OAAO,SAAS,OAAO,MAAM,IAAI;AAAA,MAChE,QAAQ,MAAM,OAAO,MAAM,IAAI,OAAO,OAAO,OAAO,SAAS,CAAC,IAAI,OAAO,GAAG;AAAA,IAC9E;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,YAAY,WAAc,IAAI,UAAU,QAAQ,UAAU,QAAQ,OAAO,QAAQ,OAAO,IAAI;AACpG,YAAQ,cAAc,WAAc,IAAI,aAAa,QAAQ,aAAa,OAAO,GAAG,GAAG,SAAS;AAChG,YAAQ,WAAW,WAAc,IAAI,SAAS,QAAQ,SAAS,OAAO,OAAO,QAAQ,MAAM,IAAI;AAC/F,YAAQ,WAAW,WAAc,IAAI,UAAU,QAAQ,UAAU,OAAO,GAAG,GAAG,SAAS;AACvF,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,UAAM,UAAU,oBAAoB;AACpC,YAAQ,UAAU,OAAO,YAAY,UAAa,OAAO,YAAY,OAAO,QAAQ,YAAY,OAAO,OAAO,IAAI;AAClH,YAAQ,YAAY,OAAO,cAAc,UAAa,OAAO,cAAc,OAAO,OAAO,OAAO,UAAU,SAAS,CAAC,IAAI,OAAO,GAAG;AAClI,YAAQ,SAAS,OAAO,WAAW,UAAa,OAAO,WAAW,OAAO,OAAO,YAAY,OAAO,MAAM,IAAI;AAC7G,YAAQ,SAAS,OAAO,WAAW,UAAa,OAAO,WAAW,OAAO,OAAO,OAAO,OAAO,SAAS,CAAC,IAAI,OAAO,GAAG;AACtH,WAAO;AAAA,EACT;AACF;AACA,SAAS,oBAAoB;AAC3B,SAAO;AAAA,IACL,UAAU,IAAI,WAAW;AAAA,IACzB,MAAM,IAAI,WAAW;AAAA,IACrB,OAAO;AAAA,EACT;AACF;AACO,IAAM,UAAU;AAAA,EACrB,OAAO,SAAS,SAAa,YAAO,OAAO,GAAG;AAC5C,QAAI,QAAQ,SAAS,WAAW,GAAG;AACjC,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,QAAQ;AAAA,IAC1C;AACA,QAAI,QAAQ,KAAK,WAAW,GAAG;AAC7B,aAAO,OAAO,EAAE,EAAE,MAAM,QAAQ,IAAI;AAAA,IACtC;AACA,QAAI,QAAQ,UAAU,QAAW;AAC/B,YAAM,OAAO,QAAQ,OAAO,OAAO,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,OAAO;AAAA,IAC/D;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO,QAAQ;AACpB,UAAM,SAAS,iBAAqB,cAAS,QAAQ,IAAQ,YAAO,KAAK;AACzE,QAAI,MAAM,WAAW,SAAY,OAAO,MAAM,OAAO,MAAM;AAC3D,UAAM,UAAU,kBAAkB;AAClC,WAAO,OAAO,MAAM,KAAK;AACvB,YAAM,MAAM,OAAO,OAAO;AAC1B,cAAQ,QAAQ,GAAG;AAAA,QACjB,KAAK;AACH,kBAAQ,WAAW,OAAO,MAAM;AAChC;AAAA,QACF,KAAK;AACH,kBAAQ,OAAO,OAAO,MAAM;AAC5B;AAAA,QACF,KAAK;AACH,kBAAQ,QAAQ,MAAM,OAAO,QAAQ,OAAO,OAAO,CAAC;AACpD;AAAA,QACF;AACE,iBAAO,SAAS,MAAM,CAAC;AACvB;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,QAAQ;AACf,WAAO;AAAA,MACL,UAAU,MAAM,OAAO,QAAQ,IAAI,gBAAgB,OAAO,QAAQ,IAAI,IAAI,WAAW;AAAA,MACrF,MAAM,MAAM,OAAO,IAAI,IAAI,gBAAgB,OAAO,IAAI,IAAI,IAAI,WAAW;AAAA,MACzE,OAAO,MAAM,OAAO,KAAK,IAAI,MAAM,SAAS,OAAO,KAAK,IAAI;AAAA,IAC9D;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,MAAM,CAAC;AACb,YAAQ,aAAa,WAAc,IAAI,WAAW,gBAAgB,QAAQ,aAAa,SAAY,QAAQ,WAAW,IAAI,WAAW,CAAC;AACtI,YAAQ,SAAS,WAAc,IAAI,OAAO,gBAAgB,QAAQ,SAAS,SAAY,QAAQ,OAAO,IAAI,WAAW,CAAC;AACtH,YAAQ,UAAU,WAAc,IAAI,QAAQ,QAAQ,QAAQ,MAAM,OAAO,QAAQ,KAAK,IAAI;AAC1F,WAAO;AAAA,EACT;AAAA,EACA,YAAY,QAAQ;AAClB,QAAI,kBAAkB;AACtB,UAAM,UAAU,kBAAkB;AAClC,YAAQ,YAAY,mBAAmB,OAAO,cAAc,QAAQ,qBAAqB,SAAS,mBAAmB,IAAI,WAAW;AACpI,YAAQ,QAAQ,eAAe,OAAO,UAAU,QAAQ,iBAAiB,SAAS,eAAe,IAAI,WAAW;AAChH,YAAQ,QAAQ,OAAO,UAAU,UAAa,OAAO,UAAU,OAAO,MAAM,YAAY,OAAO,KAAK,IAAI;AACxG,WAAO;AAAA,EACT;AACF;",
  "names": ["Long", "_m0", "Long", "_m0", "_m0", "Long", "types_exports", "_m0", "BlockIDFlag", "SignedMsgType", "Long"]
}
