{
  "version": 3,
  "sources": ["../../node_modules/throttle-debounce/throttle.js", "../../node_modules/throttle-debounce/debounce.js", "../../node_modules/@vue/apollo-composable/src/useQuery.ts", "../../node_modules/@vue/apollo-composable/src/useApolloClient.ts", "../../node_modules/@vue/apollo-composable/src/util/paramToRef.ts", "../../node_modules/@vue/apollo-composable/src/util/paramToReactive.ts", "../../node_modules/@vue/apollo-composable/src/util/useEventHook.ts", "../../node_modules/@vue/apollo-composable/src/util/loadingTracking.ts", "../../node_modules/@vue/apollo-composable/src/util/env.ts", "../../node_modules/@vue/apollo-composable/src/util/toApolloError.ts", "../../node_modules/@vue/apollo-composable/src/useLazyQuery.ts", "../../node_modules/@vue/apollo-composable/src/useMutation.ts", "../../node_modules/@vue/apollo-composable/src/useSubscription.ts", "../../node_modules/@vue/apollo-composable/src/useResult.ts", "../../node_modules/@vue/apollo-composable/src/useLoading.ts"],
  "sourcesContent": ["/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param {number} delay -                  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher)\n *                                            are most useful.\n * @param {Function} callback -               A function to be executed after delay milliseconds. The `this` context and all arguments are passed through,\n *                                            as-is, to `callback` when the throttled-function is executed.\n * @param {object} [options] -              An object to configure options.\n * @param {boolean} [options.noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds\n *                                            while the throttled-function is being called. If noTrailing is false or unspecified, callback will be executed\n *                                            one final time after the last throttled-function call. (After the throttled-function has not been called for\n *                                            `delay` milliseconds, the internal counter is reset).\n * @param {boolean} [options.noLeading] -   Optional, defaults to false. If noLeading is false, the first throttled-function call will execute callback\n *                                            immediately. If noLeading is true, the first the callback execution will be skipped. It should be noted that\n *                                            callback will never executed if both noLeading = true and noTrailing = true.\n * @param {boolean} [options.debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is\n *                                            false (at end), schedule `callback` to execute after `delay` ms.\n *\n * @returns {Function} A new, throttled, function.\n */\nexport default function (delay, callback, options) {\n\tconst {\n\t\tnoTrailing = false,\n\t\tnoLeading = false,\n\t\tdebounceMode = undefined\n\t} = options || {};\n\t/*\n\t * After wrapper has stopped being called, this timeout ensures that\n\t * `callback` is executed at the proper times in `throttle` and `end`\n\t * debounce modes.\n\t */\n\tlet timeoutID;\n\tlet cancelled = false;\n\n\t// Keep track of the last time `callback` was executed.\n\tlet lastExec = 0;\n\n\t// Function to clear existing timeout\n\tfunction clearExistingTimeout() {\n\t\tif (timeoutID) {\n\t\t\tclearTimeout(timeoutID);\n\t\t}\n\t}\n\n\t// Function to cancel next exec\n\tfunction cancel(options) {\n\t\tconst { upcomingOnly = false } = options || {};\n\t\tclearExistingTimeout();\n\t\tcancelled = !upcomingOnly;\n\t}\n\n\t/*\n\t * The `wrapper` function encapsulates all of the throttling / debouncing\n\t * functionality and when executed will limit the rate at which `callback`\n\t * is executed.\n\t */\n\tfunction wrapper(...arguments_) {\n\t\tlet self = this;\n\t\tlet elapsed = Date.now() - lastExec;\n\n\t\tif (cancelled) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Execute `callback` and update the `lastExec` timestamp.\n\t\tfunction exec() {\n\t\t\tlastExec = Date.now();\n\t\t\tcallback.apply(self, arguments_);\n\t\t}\n\n\t\t/*\n\t\t * If `debounceMode` is true (at begin) this is used to clear the flag\n\t\t * to allow future `callback` executions.\n\t\t */\n\t\tfunction clear() {\n\t\t\ttimeoutID = undefined;\n\t\t}\n\n\t\tif (!noLeading && debounceMode && !timeoutID) {\n\t\t\t/*\n\t\t\t * Since `wrapper` is being called for the first time and\n\t\t\t * `debounceMode` is true (at begin), execute `callback`\n\t\t\t * and noLeading != true.\n\t\t\t */\n\t\t\texec();\n\t\t}\n\n\t\tclearExistingTimeout();\n\n\t\tif (debounceMode === undefined && elapsed > delay) {\n\t\t\tif (noLeading) {\n\t\t\t\t/*\n\t\t\t\t * In throttle mode with noLeading, if `delay` time has\n\t\t\t\t * been exceeded, update `lastExec` and schedule `callback`\n\t\t\t\t * to execute after `delay` ms.\n\t\t\t\t */\n\t\t\t\tlastExec = Date.now();\n\t\t\t\tif (!noTrailing) {\n\t\t\t\t\ttimeoutID = setTimeout(debounceMode ? clear : exec, delay);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * In throttle mode without noLeading, if `delay` time has been exceeded, execute\n\t\t\t\t * `callback`.\n\t\t\t\t */\n\t\t\t\texec();\n\t\t\t}\n\t\t} else if (noTrailing !== true) {\n\t\t\t/*\n\t\t\t * In trailing throttle mode, since `delay` time has not been\n\t\t\t * exceeded, schedule `callback` to execute `delay` ms after most\n\t\t\t * recent execution.\n\t\t\t *\n\t\t\t * If `debounceMode` is true (at begin), schedule `clear` to execute\n\t\t\t * after `delay` ms.\n\t\t\t *\n\t\t\t * If `debounceMode` is false (at end), schedule `callback` to\n\t\t\t * execute after `delay` ms.\n\t\t\t */\n\t\t\ttimeoutID = setTimeout(\n\t\t\t\tdebounceMode ? clear : exec,\n\t\t\t\tdebounceMode === undefined ? delay - elapsed : delay\n\t\t\t);\n\t\t}\n\t}\n\n\twrapper.cancel = cancel;\n\n\t// Return the wrapper function.\n\treturn wrapper;\n}\n", "/* eslint-disable no-undefined */\n\nimport throttle from './throttle.js';\n\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param {number} delay -               A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param {Function} callback -          A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                        to `callback` when the debounced-function is executed.\n * @param {object} [options] -           An object to configure options.\n * @param {boolean} [options.atBegin] -  Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                        after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                        (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n *\n * @returns {Function} A new, debounced function.\n */\nexport default function (delay, callback, options) {\n\tconst { atBegin = false } = options || {};\n\treturn throttle(delay, callback, { debounceMode: atBegin !== false });\n}\n", "import {\n  ref,\n  Ref,\n  unref,\n  computed,\n  watch,\n  onServerPrefetch,\n  getCurrentInstance,\n  onBeforeUnmount,\n  nextTick,\n  shallowRef,\n} from 'vue-demi'\nimport { DocumentNode } from 'graphql'\nimport type {\n  OperationVariables,\n  WatchQueryOptions,\n  ObservableQuery,\n  ApolloQueryResult,\n  SubscribeToMoreOptions,\n  FetchMoreQueryOptions,\n  FetchMoreOptions,\n  ObservableSubscription,\n  TypedDocumentNode,\n  ApolloError,\n  ApolloClient,\n} from '@apollo/client/core/index.js'\nimport { throttle, debounce } from 'throttle-debounce'\nimport { useApolloClient } from './useApolloClient'\nimport { ReactiveFunction } from './util/ReactiveFunction'\nimport { paramToRef } from './util/paramToRef'\nimport { paramToReactive } from './util/paramToReactive'\nimport { useEventHook } from './util/useEventHook'\nimport { trackQuery } from './util/loadingTracking'\nimport { resultErrorsToApolloError, toApolloError } from './util/toApolloError'\nimport { isServer } from './util/env'\n\nimport type { CurrentInstance } from './util/types'\n\nexport interface UseQueryOptions<\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  TResult = any,\n  TVariables extends OperationVariables = OperationVariables\n> extends Omit<WatchQueryOptions<TVariables>, 'query' | 'variables'> {\n  clientId?: string\n  enabled?: boolean | Ref<boolean>\n  throttle?: number\n  debounce?: number\n  prefetch?: boolean\n  keepPreviousResult?: boolean\n}\n\ninterface SubscribeToMoreItem {\n  options: any\n  unsubscribeFns: (() => void)[]\n}\n\n// Parameters\nexport type DocumentParameter<TResult, TVariables> = DocumentNode | Ref<DocumentNode | null | undefined> | ReactiveFunction<DocumentNode | null | undefined> | TypedDocumentNode<TResult, TVariables> | Ref<TypedDocumentNode<TResult, TVariables> | null | undefined> | ReactiveFunction<TypedDocumentNode<TResult, TVariables> | null | undefined>\nexport type VariablesParameter<TVariables> = TVariables | Ref<TVariables> | ReactiveFunction<TVariables>\nexport type OptionsParameter<TResult, TVariables extends OperationVariables> = UseQueryOptions<TResult, TVariables> | Ref<UseQueryOptions<TResult, TVariables>> | ReactiveFunction<UseQueryOptions<TResult, TVariables>>\n\nexport interface OnResultContext {\n  client: ApolloClient<any>\n}\n\nexport interface OnErrorContext {\n  client: ApolloClient<any>\n}\n\n// Return\nexport interface UseQueryReturn<TResult, TVariables extends OperationVariables> {\n  result: Ref<TResult | undefined>\n  loading: Ref<boolean>\n  networkStatus: Ref<number | undefined>\n  error: Ref<ApolloError | null>\n  start: () => void\n  stop: () => void\n  restart: () => void\n  forceDisabled: Ref<boolean>\n  document: Ref<DocumentNode | null | undefined>\n  variables: Ref<TVariables | undefined>\n  options: UseQueryOptions<TResult, TVariables> | Ref<UseQueryOptions<TResult, TVariables>>\n  query: Ref<ObservableQuery<TResult, TVariables> | null | undefined>\n  refetch: (variables?: TVariables) => Promise<ApolloQueryResult<TResult>> | undefined\n  fetchMore: (options: FetchMoreQueryOptions<TVariables, TResult> & FetchMoreOptions<TResult, TVariables>) => Promise<ApolloQueryResult<TResult>> | undefined\n  subscribeToMore: <TSubscriptionVariables = OperationVariables, TSubscriptionData = TResult>(options: SubscribeToMoreOptions<TResult, TSubscriptionVariables, TSubscriptionData> | Ref<SubscribeToMoreOptions<TResult, TSubscriptionVariables, TSubscriptionData>> | ReactiveFunction<SubscribeToMoreOptions<TResult, TSubscriptionVariables, TSubscriptionData>>) => void\n  onResult: (fn: (param: ApolloQueryResult<TResult>, context: OnResultContext) => void) => {\n    off: () => void\n  }\n  onError: (fn: (param: ApolloError, context: OnErrorContext) => void) => {\n    off: () => void\n  }\n}\n\n/**\n * Use a query that does not require variables or options.\n * */\nexport function useQuery<TResult = any> (\n  document: DocumentParameter<TResult, undefined>\n): UseQueryReturn<TResult, Record<string, never>>\n\n/**\n * Use a query that has optional variables but not options\n */\nexport function useQuery<TResult = any, TVariables extends OperationVariables = OperationVariables> (\n  document: DocumentParameter<TResult, TVariables>\n): UseQueryReturn<TResult, TVariables>\n\n/**\n * Use a query that has required variables but not options\n */\nexport function useQuery<TResult = any, TVariables extends OperationVariables = OperationVariables> (\n  document: DocumentParameter<TResult, TVariables>,\n  variables: VariablesParameter<TVariables>\n): UseQueryReturn<TResult, TVariables>\n\n/**\n * Use a query that requires options but not variables.\n */\nexport function useQuery<TResult = any> (\n  document: DocumentParameter<TResult, undefined>,\n  variables: undefined | null,\n  options: OptionsParameter<TResult, Record<string, never>>,\n): UseQueryReturn<TResult, Record<string, never>>\n\n/**\n * Use a query that requires variables and options.\n */\nexport function useQuery<TResult = any, TVariables extends OperationVariables = OperationVariables> (\n  document: DocumentParameter<TResult, TVariables>,\n  variables: VariablesParameter<TVariables>,\n  options: OptionsParameter<TResult, TVariables>,\n): UseQueryReturn<TResult, TVariables>\n\nexport function useQuery<\n  TResult,\n  TVariables extends OperationVariables\n> (\n  document: DocumentParameter<TResult, TVariables>,\n  variables?: VariablesParameter<TVariables>,\n  options?: OptionsParameter<TResult, TVariables>,\n): UseQueryReturn<TResult, TVariables> {\n  return useQueryImpl<TResult, TVariables>(document, variables, options)\n}\n\nexport function useQueryImpl<\n  TResult,\n  TVariables extends OperationVariables\n> (\n  document: DocumentParameter<TResult, TVariables>,\n  variables?: VariablesParameter<TVariables>,\n  options: OptionsParameter<TResult, TVariables> = {},\n  lazy = false,\n): UseQueryReturn<TResult, TVariables> {\n  // Is on server?\n  const vm = getCurrentInstance() as CurrentInstance | null\n\n  const currentOptions = ref<UseQueryOptions<TResult, TVariables>>()\n\n  const documentRef = paramToRef(document)\n  const variablesRef = paramToRef(variables)\n  const optionsRef = paramToReactive(options)\n\n  // Result\n  /**\n   * Result from the query\n   */\n  const result = ref<TResult | undefined>()\n  const resultEvent = useEventHook<[ApolloQueryResult<TResult>, OnResultContext]>()\n  const error = ref<ApolloError | null>(null)\n  const errorEvent = useEventHook<[ApolloError, OnErrorContext]>()\n\n  // Loading\n\n  /**\n   * Indicates if a network request is pending\n   */\n  const loading = ref(false)\n  vm && trackQuery(loading)\n  const networkStatus = ref<number>()\n\n  // SSR\n  let firstResolve: (() => void) | undefined\n  let firstResolveTriggered = false\n  let firstReject: ((apolloError: ApolloError) => void) | undefined\n  let firstRejectError: undefined | ApolloError\n\n  const tryFirstResolve = () => {\n    firstResolveTriggered = true\n    if (firstResolve) firstResolve()\n  }\n\n  const tryFirstReject = (apolloError: ApolloError) => {\n    firstRejectError = apolloError\n    if (firstReject) firstReject(apolloError)\n  }\n\n  const resetFirstResolveReject = () => {\n    firstResolve = undefined\n    firstReject = undefined\n    firstResolveTriggered = false\n    firstRejectError = undefined\n  }\n\n  vm && onServerPrefetch?.(() => {\n    if (!isEnabled.value || (isServer && currentOptions.value?.prefetch === false)) return\n\n    return new Promise<void>((resolve, reject) => {\n      firstResolve = () => {\n        resetFirstResolveReject()\n        resolve()\n      }\n      firstReject = (apolloError: ApolloError) => {\n        resetFirstResolveReject()\n        reject(apolloError)\n      }\n\n      if (firstResolveTriggered) {\n        firstResolve()\n      } else if (firstRejectError) {\n        firstReject(firstRejectError)\n      }\n    }).finally(stop)\n  })\n\n  // Apollo Client\n  const { resolveClient } = useApolloClient()\n\n  function getClient () {\n    return resolveClient(currentOptions.value?.clientId)\n  }\n\n  // Query\n\n  const query: Ref<ObservableQuery<TResult, TVariables> | null | undefined> = shallowRef()\n  let observer: ObservableSubscription | undefined\n  let started = false\n  let ignoreNextResult = false\n  let firstStart = true\n\n  /**\n   * Starts watching the query\n   */\n  function start () {\n    if (\n      started || !isEnabled.value ||\n      (isServer && currentOptions.value?.prefetch === false) ||\n      !currentDocument\n    ) {\n      tryFirstResolve()\n      return\n    }\n\n    // On server the watchers on document, variables and options are not triggered\n    if (isServer) {\n      applyDocument(documentRef.value)\n      applyVariables(variablesRef.value)\n      applyOptions(unref(optionsRef))\n    }\n\n    started = true\n    error.value = null\n    loading.value = true\n\n    const client = getClient()\n\n    query.value = client.watchQuery<TResult, TVariables>({\n      query: currentDocument,\n      variables: currentVariables ?? {} as TVariables,\n      ...currentOptions.value,\n      ...(isServer && currentOptions.value?.fetchPolicy !== 'no-cache')\n        ? {\n          fetchPolicy: 'network-only',\n        }\n        : {},\n    })\n\n    startQuerySubscription()\n\n    // Make the cache data available to the component immediately\n    // This prevents SSR hydration mismatches\n    if (!isServer && (firstStart || !currentOptions.value?.keepPreviousResult) && (currentOptions.value?.fetchPolicy !== 'no-cache' || currentOptions.value.notifyOnNetworkStatusChange)) {\n      const currentResult = query.value.getCurrentResult(false)\n\n      if (!currentResult.loading || currentResult.partial || currentOptions.value?.notifyOnNetworkStatusChange) {\n        onNextResult(currentResult)\n        ignoreNextResult = !currentResult.loading\n      } else if (currentResult.error) {\n        onError(currentResult.error)\n        ignoreNextResult = true\n      }\n    }\n\n    if (!isServer) {\n      for (const item of subscribeToMoreItems) {\n        addSubscribeToMore(item)\n      }\n    }\n\n    firstStart = false\n  }\n\n  function startQuerySubscription () {\n    if (observer && !observer.closed) return\n    if (!query.value) return\n\n    // Create subscription\n    ignoreNextResult = false\n    observer = query.value.subscribe({\n      next: onNextResult,\n      error: onError,\n    })\n  }\n\n  function getErrorPolicy () {\n    const client = resolveClient(currentOptions.value?.clientId)\n    return currentOptions.value?.errorPolicy || client.defaultOptions?.watchQuery?.errorPolicy\n  }\n\n  function onNextResult (queryResult: ApolloQueryResult<TResult>) {\n    if (ignoreNextResult) {\n      ignoreNextResult = false\n      return\n    }\n\n    // Remove any previous error that may still be present from the last fetch (so result handlers\n    // don't receive old errors that may not even be applicable anymore).\n    error.value = null\n\n    processNextResult(queryResult)\n\n    // When `errorPolicy` is `all`, `onError` will not get called and\n    // ApolloQueryResult.errors may be set at the same time as we get a result.\n    // The code is only relevant when `errorPolicy` is `all`, because for other situations it\n    // could hapen that next and error are called at the same time and then it will lead to multiple\n    // onError calls.\n    const errorPolicy = getErrorPolicy()\n    if (errorPolicy && errorPolicy === 'all' && !queryResult.error && queryResult.errors?.length) {\n      processError(resultErrorsToApolloError(queryResult.errors))\n    }\n\n    tryFirstResolve()\n  }\n\n  function processNextResult (queryResult: ApolloQueryResult<TResult>) {\n    result.value = queryResult.data && Object.keys(queryResult.data).length === 0 ? undefined : queryResult.data\n    loading.value = queryResult.loading\n    networkStatus.value = queryResult.networkStatus\n    // Wait for handlers to be registered\n    nextTick(() => {\n      resultEvent.trigger(queryResult, {\n        client: getClient(),\n      })\n    })\n  }\n\n  function onError (queryError: unknown) {\n    if (ignoreNextResult) {\n      ignoreNextResult = false\n      return\n    }\n\n    // any error should already be an ApolloError, but we make sure\n    const apolloError = toApolloError(queryError)\n    const errorPolicy = getErrorPolicy()\n\n    if (errorPolicy && errorPolicy !== 'none') {\n      processNextResult((query.value as ObservableQuery<TResult, TVariables>).getCurrentResult())\n    }\n    processError(apolloError)\n    tryFirstReject(apolloError)\n    // The observable closes the sub if an error occurs\n    resubscribeToQuery()\n  }\n\n  function processError (apolloError: ApolloError) {\n    error.value = apolloError\n    loading.value = false\n    networkStatus.value = 8\n    // Wait for handlers to be registered\n    nextTick(() => {\n      errorEvent.trigger(apolloError, {\n        client: getClient(),\n      })\n    })\n  }\n\n  function resubscribeToQuery () {\n    if (!query.value) return\n    const lastError = query.value.getLastError()\n    const lastResult = query.value.getLastResult()\n    query.value.resetLastResults()\n    startQuerySubscription()\n    Object.assign(query.value, { lastError, lastResult })\n  }\n\n  let onStopHandlers: Array<() => void> = []\n\n  /**\n   * Stop watching the query\n   */\n  function stop () {\n    tryFirstResolve()\n    if (!started) return\n    started = false\n    loading.value = false\n\n    onStopHandlers.forEach(handler => handler())\n    onStopHandlers = []\n\n    if (query.value) {\n      query.value.stopPolling()\n      query.value = null\n    }\n\n    if (observer) {\n      observer.unsubscribe()\n      observer = undefined\n    }\n  }\n\n  // Restart\n  let restarting = false\n  /**\n   * Queue a restart of the query (on next tick) if it is already active\n   */\n  function baseRestart () {\n    if (!started || restarting) return\n    restarting = true\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    nextTick(() => {\n      if (started) {\n        stop()\n        start()\n      }\n      restarting = false\n    })\n  }\n\n  let debouncedRestart: typeof baseRestart\n  let isRestartDebounceSetup = false\n  function updateRestartFn () {\n    // On server, will be called before currentOptions is initialized\n    // @TODO investigate\n    if (!currentOptions.value) {\n      debouncedRestart = baseRestart\n    } else {\n      if (currentOptions.value?.throttle) {\n        debouncedRestart = throttle(currentOptions.value.throttle, baseRestart)\n      } else if (currentOptions.value?.debounce) {\n        debouncedRestart = debounce(currentOptions.value.debounce, baseRestart)\n      } else {\n        debouncedRestart = baseRestart\n      }\n      isRestartDebounceSetup = true\n    }\n  }\n\n  function restart () {\n    if (!started || restarting) return\n    if (!isRestartDebounceSetup) updateRestartFn()\n    debouncedRestart()\n  }\n\n  // Applying document\n  let currentDocument: DocumentNode | null | undefined = documentRef.value\n\n  // Enabled state\n\n  const forceDisabled = ref(lazy)\n  const enabledOption = computed(() => !currentOptions.value || currentOptions.value.enabled == null || currentOptions.value.enabled)\n  const isEnabled = computed(() => enabledOption.value && !forceDisabled.value && !!documentRef.value)\n\n  // Applying options first (in case it disables the query)\n  watch(() => unref(optionsRef), applyOptions, {\n    deep: true,\n    immediate: true,\n  })\n\n  function applyOptions (value: UseQueryOptions<TResult, TVariables>) {\n    if (currentOptions.value && (\n      currentOptions.value.throttle !== value.throttle ||\n      currentOptions.value.debounce !== value.debounce\n    )) {\n      updateRestartFn()\n    }\n    currentOptions.value = value\n    restart()\n  }\n\n  // Applying document\n  watch(documentRef, applyDocument)\n\n  function applyDocument (value: DocumentNode | null | undefined) {\n    currentDocument = value\n    restart()\n  }\n\n  // Applying variables\n  let currentVariables: TVariables | undefined\n  let currentVariablesSerialized: string\n  watch(() => {\n    if (isEnabled.value) {\n      return variablesRef.value\n    } else {\n      return undefined\n    }\n  }, applyVariables, {\n    deep: true,\n    immediate: true,\n  })\n\n  function applyVariables (value?: TVariables) {\n    const serialized = JSON.stringify([value, isEnabled.value])\n    if (serialized !== currentVariablesSerialized) {\n      currentVariables = value\n      restart()\n    }\n    currentVariablesSerialized = serialized\n  }\n\n  // Refetch\n\n  function refetch (variables: TVariables | undefined = undefined) {\n    if (query.value) {\n      if (variables) {\n        currentVariables = variables\n      }\n      error.value = null\n      loading.value = true\n      return query.value.refetch(variables)\n        .then((refetchResult) => {\n          const currentResult = query.value?.getCurrentResult()\n          currentResult && processNextResult(currentResult)\n          return refetchResult\n        })\n    }\n  }\n\n  // Fetch more\n\n  function fetchMore (options: FetchMoreQueryOptions<TVariables, TResult> & FetchMoreOptions<TResult, TVariables>) {\n    if (query.value) {\n      error.value = null\n      loading.value = true\n      return query.value.fetchMore(options)\n        .then((fetchMoreResult) => {\n          const currentResult = query.value?.getCurrentResult()\n          currentResult && processNextResult(currentResult)\n          return fetchMoreResult\n        })\n    }\n  }\n\n  // Subscribe to more\n\n  const subscribeToMoreItems: SubscribeToMoreItem[] = []\n\n  function subscribeToMore<\n    TSubscriptionVariables = OperationVariables,\n    TSubscriptionData = TResult\n  > (\n    options: SubscribeToMoreOptions<TResult, TSubscriptionVariables, TSubscriptionData> |\n    Ref<SubscribeToMoreOptions<TResult, TSubscriptionVariables, TSubscriptionData>> |\n    ReactiveFunction<SubscribeToMoreOptions<TResult, TSubscriptionVariables, TSubscriptionData>>,\n  ) {\n    if (isServer) return\n    const optionsRef = paramToRef(options)\n    watch(optionsRef, (value, oldValue, onCleanup) => {\n      const index = subscribeToMoreItems.findIndex(item => item.options === oldValue)\n      if (index !== -1) {\n        subscribeToMoreItems.splice(index, 1)\n      }\n      const item: SubscribeToMoreItem = {\n        options: value,\n        unsubscribeFns: [],\n      }\n      subscribeToMoreItems.push(item)\n\n      addSubscribeToMore(item)\n\n      onCleanup(() => {\n        item.unsubscribeFns.forEach(fn => fn())\n        item.unsubscribeFns = []\n      })\n    }, {\n      immediate: true,\n    })\n  }\n\n  function addSubscribeToMore (item: SubscribeToMoreItem) {\n    if (!started) return\n    if (!query.value) {\n      throw new Error('Query is not defined')\n    }\n    const unsubscribe = query.value.subscribeToMore(item.options)\n    onStopHandlers.push(unsubscribe)\n    item.unsubscribeFns.push(unsubscribe)\n  }\n\n  // Auto start & stop\n\n  watch(isEnabled, value => {\n    if (value) {\n      nextTick(() => {\n        start()\n      })\n    } else {\n      stop()\n    }\n  })\n\n  if (isEnabled.value) {\n    start()\n  }\n\n  // Teardown\n  vm && onBeforeUnmount(() => {\n    stop()\n    subscribeToMoreItems.length = 0\n  })\n\n  return {\n    result,\n    loading,\n    networkStatus,\n    error,\n    start,\n    stop,\n    restart,\n    forceDisabled,\n    document: documentRef,\n    variables: variablesRef,\n    options: optionsRef,\n    query,\n    refetch,\n    fetchMore,\n    subscribeToMore,\n    onResult: resultEvent.on,\n    onError: errorEvent.on,\n  }\n}\n", "import { hasInjectionContext, inject } from 'vue-demi'\nimport { ApolloClient } from '@apollo/client/core/index.js'\n\nexport const DefaultApolloClient = Symbol('default-apollo-client')\nexport const ApolloClients = Symbol('apollo-clients')\n\ntype ClientId = string\ntype ClientDict<T> = Record<ClientId, ApolloClient<T>>\n\ntype ResolveClient<TCacheShape, TReturn = ApolloClient<TCacheShape>> = (clientId?: ClientId) => TReturn\ntype NullableApolloClient<TCacheShape> = ApolloClient<TCacheShape> | undefined\n\nexport interface UseApolloClientReturn<TCacheShape> {\n  resolveClient: ResolveClient<TCacheShape>\n  readonly client: ApolloClient<TCacheShape>\n}\n\nfunction resolveDefaultClient<T> (providedApolloClients: ClientDict<T> | null, providedApolloClient: ApolloClient<T> | null): NullableApolloClient<T> {\n  const resolvedClient = providedApolloClients\n    ? providedApolloClients.default\n    : (providedApolloClient ?? undefined)\n  return resolvedClient\n}\n\nfunction resolveClientWithId<T> (providedApolloClients: ClientDict<T> | null, clientId: ClientId): NullableApolloClient<T> {\n  if (!providedApolloClients) {\n    throw new Error(`No apolloClients injection found, tried to resolve '${clientId}' clientId`)\n  }\n  return providedApolloClients[clientId]\n}\n\nexport function useApolloClient<TCacheShape = any> (clientId?: ClientId): UseApolloClientReturn<TCacheShape> {\n  let resolveImpl: ResolveClient<TCacheShape, NullableApolloClient<TCacheShape>>\n\n  // Save current client in current closure scope\n  const savedCurrentClients = currentApolloClients\n\n  if (!hasInjectionContext()) {\n    resolveImpl = (id?: ClientId) => {\n      if (id) {\n        return resolveClientWithId(savedCurrentClients, id)\n      }\n      return resolveDefaultClient(savedCurrentClients, savedCurrentClients.default)\n    }\n  } else {\n    const providedApolloClients: ClientDict<TCacheShape> | null = inject(ApolloClients, null)\n    const providedApolloClient: ApolloClient<TCacheShape> | null = inject(DefaultApolloClient, null)\n\n    resolveImpl = (id?: ClientId) => {\n      if (id) {\n        const client = resolveClientWithId(providedApolloClients, id)\n        if (client) {\n          return client\n        }\n        return resolveClientWithId(savedCurrentClients, id)\n      }\n      const client = resolveDefaultClient(providedApolloClients, providedApolloClient)\n      if (client) {\n        return client\n      }\n      return resolveDefaultClient(savedCurrentClients, savedCurrentClients.default)\n    }\n  }\n\n  function resolveClient (id: ClientId | undefined = clientId) {\n    const client = resolveImpl(id)\n    if (!client) {\n      throw new Error(\n        `Apollo client with id ${\n          id ?? 'default'\n        } not found. Use an app.runWithContext() or provideApolloClient() if you are outside of a component setup.`,\n      )\n    }\n    return client\n  }\n\n  return {\n    resolveClient,\n    get client () {\n      return resolveClient()\n    },\n  }\n}\n\nlet currentApolloClients: ClientDict<any> = {}\n\nexport function provideApolloClient<TCacheShape = any> (client: ApolloClient<TCacheShape>) {\n  currentApolloClients = {\n    default: client,\n  }\n  return function <TFnResult = any> (fn: () => TFnResult) {\n    const result = fn()\n    currentApolloClients = {}\n    return result\n  }\n}\n\nexport function provideApolloClients<TCacheShape = any> (clients: ClientDict<TCacheShape>) {\n  currentApolloClients = clients\n  return function <TFnResult = any> (fn: () => TFnResult) {\n    const result = fn()\n    currentApolloClients = {}\n    return result\n  }\n}\n", "import { Ref, isRef, computed, ref } from 'vue-demi'\nimport { ReactiveFunction } from './ReactiveFunction'\n\nexport function paramToRef<T> (param: T | Ref<T> | ReactiveFunction<T>): Ref<T> {\n  if (isRef(param)) {\n    return param\n  } else if (typeof param === 'function') {\n    return computed(param as ReactiveFunction<T>)\n  } else {\n    return ref(param) as Ref<T>\n  }\n}\n", "import { Ref, isRef, reactive, computed } from 'vue-demi'\nimport { ReactiveFunction } from './ReactiveFunction'\n\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype TObject = object\n\nexport function paramToReactive<T extends TObject> (param: T | Ref<T> | ReactiveFunction<T>): T | Ref<T> {\n  if (isRef(param)) {\n    return param\n  } else if (typeof param === 'function') {\n    return computed(param as ReactiveFunction<T>)\n  } else if (param) {\n    return reactive(param) as T\n  } else {\n    return param\n  }\n}\n", "export function useEventHook<TParams extends any[] = any[]> () {\n  const fns: Array<(...params: TParams) => void> = []\n\n  function on (fn: (...params: TParams) => void) {\n    fns.push(fn)\n    return {\n      off: () => off(fn),\n    }\n  }\n\n  function off (fn: (...params: TParams) => void) {\n    const index = fns.indexOf(fn)\n    if (index !== -1) {\n      fns.splice(index, 1)\n    }\n  }\n\n  function trigger (...params: TParams) {\n    for (const fn of fns) {\n      fn(...params)\n    }\n  }\n\n  function getCount () {\n    return fns.length\n  }\n\n  return {\n    on,\n    off,\n    trigger,\n    getCount,\n  }\n}\n", "import { Ref, watch, onUnmounted, ref, getCurrentInstance, onBeforeUnmount } from 'vue-demi'\nimport { isServer } from './env.js'\n\nexport interface LoadingTracking {\n  queries: Ref<number>\n  mutations: Ref<number>\n  subscriptions: Ref<number>\n}\n\nexport interface AppLoadingTracking extends LoadingTracking {\n  components: Map<any, LoadingTracking>\n}\n\nexport const globalTracking: AppLoadingTracking = {\n  queries: ref(0),\n  mutations: ref(0),\n  subscriptions: ref(0),\n  components: new Map(),\n}\n\nexport function getCurrentTracking () {\n  const vm = getCurrentInstance()\n  if (!vm) {\n    return {}\n  }\n\n  let tracking: LoadingTracking\n\n  if (!globalTracking.components.has(vm)) {\n    // Add per-component tracking\n    globalTracking.components.set(vm, tracking = {\n      queries: ref(0),\n      mutations: ref(0),\n      subscriptions: ref(0),\n    })\n    // Cleanup\n    onUnmounted(() => {\n      globalTracking.components.delete(vm)\n    })\n  } else {\n    tracking = globalTracking.components.get(vm) as LoadingTracking\n  }\n\n  return {\n    tracking,\n  }\n}\n\nfunction track (loading: Ref<boolean>, type: keyof LoadingTracking) {\n  if (isServer) return\n\n  const { tracking } = getCurrentTracking()\n\n  watch(loading, (value, oldValue) => {\n    if (oldValue != null && value !== oldValue) {\n      const mod = value ? 1 : -1\n      if (tracking) tracking[type].value += mod\n      globalTracking[type].value += mod\n    }\n  }, {\n    immediate: true,\n  })\n\n  onBeforeUnmount(() => {\n    if (loading.value) {\n      if (tracking) tracking[type].value--\n      globalTracking[type].value--\n    }\n  })\n}\n\nexport function trackQuery (loading: Ref<boolean>) {\n  track(loading, 'queries')\n}\n\nexport function trackMutation (loading: Ref<boolean>) {\n  track(loading, 'mutations')\n}\n\nexport function trackSubscription (loading: Ref<boolean>) {\n  track(loading, 'subscriptions')\n}\n", "export const isServer = typeof window === 'undefined'\n", "import { ApolloError, isApolloError } from '@apollo/client/core/index.js'\nimport { GraphQLErrors } from '@apollo/client/errors/index.js'\n\nexport function toApolloError (error: unknown): ApolloError {\n  if (!(error instanceof Error)) {\n    return new ApolloError({\n      networkError: Object.assign(new Error(), { originalError: error }),\n      errorMessage: String(error),\n    })\n  }\n\n  if (isApolloError(error)) {\n    return error\n  }\n\n  return new ApolloError({ networkError: error, errorMessage: error.message })\n}\n\nexport function resultErrorsToApolloError (errors: GraphQLErrors): ApolloError {\n  return new ApolloError({\n    graphQLErrors: errors,\n    errorMessage: `GraphQL response contains errors: ${errors.map((e: any) => e.message).join(' | ')}`,\n  })\n}\n", "import { DocumentNode } from 'graphql'\nimport { isRef } from 'vue-demi'\nimport { useQueryImpl, DocumentParameter, VariablesParameter, OptionsParameter, UseQueryOptions, UseQueryReturn } from './useQuery'\nimport type { OperationVariables } from '@apollo/client/core'\nimport { isServer } from './util/env.js'\n\nexport interface UseLazyQueryReturn<TResult, TVariables extends OperationVariables> extends UseQueryReturn<TResult, TVariables> {\n  /**\n   * Activate the query and starts loading.\n   * @param document Override document\n   * @param variables Override variables\n   * @param options Override options\n   * @returns Returns false if the query is already active, otherwise the next result of the query.\n   */\n  load: (document?: DocumentNode | null, variables?: TVariables | null, options?: UseQueryOptions | null) => false | Promise<TResult>\n}\n\nexport function useLazyQuery<\n  TResult = any,\n  TVariables extends Record<string, unknown> = any,\n> (\n  document: DocumentParameter<TResult, TVariables>,\n  variables?: VariablesParameter<TVariables>,\n  options?: OptionsParameter<TResult, TVariables>,\n): UseLazyQueryReturn<TResult, TVariables> {\n  const query = useQueryImpl<TResult, TVariables>(document, variables, options, true)\n\n  function load (\n    document?: DocumentNode | null,\n    variables?: TVariables | null,\n    options?: UseQueryOptions | null,\n  ) {\n    if (document) {\n      query.document.value = document\n    }\n    if (variables) {\n      query.variables.value = variables\n    }\n    if (options) {\n      Object.assign(isRef(query.options) ? query.options.value : query.options, options)\n    }\n    const isFirstRun = query.forceDisabled.value\n    if (isFirstRun) {\n      query.forceDisabled.value = false\n\n      // If SSR, we need to start the query manually since `watch` on `isEnabled` in `useQueryImpl` won't be called.\n      if (isServer) {\n        query.start()\n      }\n\n      return new Promise<TResult>((resolve, reject) => {\n        const { off: offResult } = query.onResult((result) => {\n          if (!result.loading) {\n            resolve(result.data)\n            offResult()\n            offError()\n          }\n        })\n        const { off: offError } = query.onError((error) => {\n          reject(error)\n          offResult()\n          offError()\n        })\n      })\n    } else {\n      return false\n    }\n  }\n\n  return {\n    ...query,\n    load,\n  }\n}\n", "import { DocumentNode } from 'graphql'\nimport { MutationOptions, OperationVariables, FetchResult, TypedDocumentNode, ApolloError, ApolloClient } from '@apollo/client/core/index.js'\nimport { ref, onBeforeUnmount, isRef, Ref, getCurrentInstance } from 'vue-demi'\nimport { useApolloClient } from './useApolloClient'\nimport { ReactiveFunction } from './util/ReactiveFunction'\nimport { useEventHook } from './util/useEventHook'\nimport { trackMutation } from './util/loadingTracking'\nimport { toApolloError } from './util/toApolloError'\n\n/**\n * `useMutation` options for mutations that don't require `variables`.\n */\nexport interface UseMutationOptions<\n  TResult = any,\n  TVariables = OperationVariables\n> extends Omit<MutationOptions<TResult, TVariables>, 'mutation'> {\n  clientId?: string\n  throws?: 'auto' | 'always' | 'never'\n}\n\ntype DocumentParameter<TResult, TVariables> = DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode> | TypedDocumentNode<TResult, TVariables> | Ref<TypedDocumentNode<TResult, TVariables>> | ReactiveFunction<TypedDocumentNode<TResult, TVariables>>\ntype OptionsParameter<TResult, TVariables> = UseMutationOptions<TResult, TVariables> | Ref<UseMutationOptions<TResult, TVariables>> | ReactiveFunction<UseMutationOptions<TResult, TVariables>>\n\nexport type MutateOverrideOptions<TResult> = Pick<UseMutationOptions<TResult, OperationVariables>, 'update' | 'optimisticResponse' | 'context' | 'updateQueries' | 'refetchQueries' | 'awaitRefetchQueries' | 'errorPolicy' | 'fetchPolicy' | 'clientId'>\nexport type MutateResult<TResult> = Promise<FetchResult<TResult, Record<string, any>, Record<string, any>> | null>\nexport type MutateFunction<TResult, TVariables> = (variables?: TVariables | null, overrideOptions?: MutateOverrideOptions<TResult>) => MutateResult<TResult>\n\nexport interface OnDoneContext {\n  client: ApolloClient<any>\n}\n\nexport interface OnErrorContext {\n  client: ApolloClient<any>\n}\n\nexport interface UseMutationReturn<TResult, TVariables> {\n  mutate: MutateFunction<TResult, TVariables>\n  loading: Ref<boolean>\n  error: Ref<ApolloError | null>\n  called: Ref<boolean>\n  onDone: (fn: (param: FetchResult<TResult, Record<string, any>, Record<string, any>>, context: OnDoneContext) => void) => {\n    off: () => void\n  }\n  onError: (fn: (param: ApolloError, context: OnErrorContext) => void) => {\n    off: () => void\n  }\n}\n\nexport function useMutation<\n  TResult = any,\n  TVariables extends OperationVariables = OperationVariables\n> (\n  document: DocumentParameter<TResult, TVariables>,\n  options: OptionsParameter<TResult, TVariables> = {},\n): UseMutationReturn<TResult, TVariables> {\n  const vm = getCurrentInstance()\n  const loading = ref<boolean>(false)\n  vm && trackMutation(loading)\n  const error = ref<ApolloError | null>(null)\n  const called = ref<boolean>(false)\n\n  const doneEvent = useEventHook<[FetchResult<TResult, Record<string, any>, Record<string, any>>, OnDoneContext]>()\n  const errorEvent = useEventHook<[ApolloError, OnErrorContext]>()\n\n  // Apollo Client\n  const { resolveClient } = useApolloClient()\n\n  async function mutate (variables?: TVariables | null, overrideOptions: Omit<UseMutationOptions<TResult, TVariables>, 'variables'> = {}) {\n    let currentDocument: DocumentNode\n    if (typeof document === 'function') {\n      currentDocument = document()\n    } else if (isRef(document)) {\n      currentDocument = document.value\n    } else {\n      currentDocument = document\n    }\n\n    let currentOptions: UseMutationOptions<TResult, TVariables>\n    if (typeof options === 'function') {\n      currentOptions = options()\n    } else if (isRef(options)) {\n      currentOptions = options.value\n    } else {\n      currentOptions = options\n    }\n    const client = resolveClient(currentOptions.clientId)\n    error.value = null\n    loading.value = true\n    called.value = true\n    try {\n      const result = await client.mutate<TResult, TVariables>({\n        mutation: currentDocument,\n        ...currentOptions,\n        ...overrideOptions,\n        variables: (variables ?? currentOptions.variables)\n          ? {\n            ...(currentOptions.variables as TVariables),\n            ...(variables as TVariables),\n          }\n          : undefined,\n      })\n      loading.value = false\n      doneEvent.trigger(result, {\n        client,\n      })\n      return result\n    } catch (e) {\n      const apolloError = toApolloError(e)\n      error.value = apolloError\n      loading.value = false\n      errorEvent.trigger(apolloError, {\n        client,\n      })\n      if (currentOptions.throws === 'always' || (currentOptions.throws !== 'never' && !errorEvent.getCount())) {\n        throw apolloError\n      }\n    }\n    return null\n  }\n\n  vm && onBeforeUnmount(() => {\n    loading.value = false\n  })\n\n  return {\n    mutate,\n    loading,\n    error,\n    called,\n    onDone: doneEvent.on,\n    onError: errorEvent.on,\n  }\n}\n", "import { DocumentNode } from 'graphql'\nimport {\n  Ref,\n  ref,\n  watch,\n  isRef,\n  computed,\n  getCurrentInstance,\n  onBeforeUnmount,\n  nextTick,\n} from 'vue-demi'\nimport type {\n  OperationVariables,\n  SubscriptionOptions,\n  FetchResult,\n  Observable,\n  ObservableSubscription,\n  TypedDocumentNode,\n  ApolloError,\n  ApolloClient,\n} from '@apollo/client/core/index.js'\nimport { throttle, debounce } from 'throttle-debounce'\nimport { ReactiveFunction } from './util/ReactiveFunction'\nimport { paramToRef } from './util/paramToRef'\nimport { paramToReactive } from './util/paramToReactive'\nimport { useApolloClient } from './useApolloClient'\nimport { useEventHook } from './util/useEventHook'\nimport { trackSubscription } from './util/loadingTracking'\nimport type { CurrentInstance } from './util/types'\nimport { toApolloError } from './util/toApolloError'\nimport { isServer } from './util/env'\n\nexport interface UseSubscriptionOptions <\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  TResult = any,\n  TVariables = OperationVariables\n> extends Omit<SubscriptionOptions<TVariables>, 'query' | 'variables'> {\n  clientId?: string\n  enabled?: boolean | Ref<boolean>\n  throttle?: number\n  debounce?: number\n}\n\ntype DocumentParameter<TResult, TVariables> = DocumentNode | Ref<DocumentNode> | ReactiveFunction<DocumentNode> | TypedDocumentNode<TResult, TVariables> | Ref<TypedDocumentNode<TResult, TVariables>> | ReactiveFunction<TypedDocumentNode<TResult, TVariables>>\ntype VariablesParameter<TVariables> = TVariables | Ref<TVariables> | ReactiveFunction<TVariables>\ntype OptionsParameter<TResult, TVariables> = UseSubscriptionOptions<TResult, TVariables> | Ref<UseSubscriptionOptions<TResult, TVariables>> | ReactiveFunction<UseSubscriptionOptions<TResult, TVariables>>\n\nexport interface OnResultContext {\n  client: ApolloClient<any>\n}\n\nexport interface OnErrorContext {\n  client: ApolloClient<any>\n}\n\nexport interface UseSubscriptionReturn<TResult, TVariables> {\n  result: Ref<TResult | null | undefined>\n  loading: Ref<boolean>\n  error: Ref<ApolloError | null>\n  start: () => void\n  stop: () => void\n  restart: () => void\n  document: Ref<DocumentNode>\n  variables: Ref<TVariables | undefined>\n  options: UseSubscriptionOptions<TResult, TVariables> | Ref<UseSubscriptionOptions<TResult, TVariables>>\n  subscription: Ref<Observable<FetchResult<TResult, Record<string, any>, Record<string, any>>> | null>\n  onResult: (fn: (param: FetchResult<TResult, Record<string, any>, Record<string, any>>, context: OnResultContext) => void) => {\n    off: () => void\n  }\n  onError: (fn: (param: ApolloError, context: OnErrorContext) => void) => {\n    off: () => void\n  }\n}\n\n/**\n * Use a subscription that does not require variables or options.\n * */\nexport function useSubscription<TResult = any> (\n  document: DocumentParameter<TResult, undefined>\n): UseSubscriptionReturn<TResult, undefined>\n\n/**\n * Use a subscription that requires options but not variables.\n */\nexport function useSubscription<TResult = any> (\n  document: DocumentParameter<TResult, undefined>,\n  variables: undefined | null,\n  options: OptionsParameter<TResult, null>\n): UseSubscriptionReturn<TResult, null>\n\n/**\n * Use a subscription that requires variables.\n */\nexport function useSubscription<TResult = any, TVariables extends OperationVariables = OperationVariables> (\n  document: DocumentParameter<TResult, TVariables>,\n  variables: VariablesParameter<TVariables>\n): UseSubscriptionReturn<TResult, TVariables>\n\n/**\n * Use a subscription that has optional variables.\n */\nexport function useSubscription<TResult = any, TVariables extends OperationVariables = OperationVariables> (\n  document: DocumentParameter<TResult, TVariables>,\n): UseSubscriptionReturn<TResult, TVariables>\n\n/**\n * Use a subscription that requires variables and options.\n */\nexport function useSubscription<TResult = any, TVariables extends OperationVariables = OperationVariables> (\n  document: DocumentParameter<TResult, TVariables>,\n  variables: VariablesParameter<TVariables>,\n  options: OptionsParameter<TResult, TVariables>\n): UseSubscriptionReturn<TResult, TVariables>\n\nexport function useSubscription <\n  TResult,\n  TVariables extends Record<string, unknown>\n> (\n  document: DocumentParameter<TResult, TVariables>,\n  variables: VariablesParameter<TVariables> | undefined = undefined,\n  options: OptionsParameter<TResult, TVariables> = {},\n): UseSubscriptionReturn<TResult, TVariables> {\n  // Is on server?\n  const vm = getCurrentInstance() as CurrentInstance | null\n\n  const documentRef = paramToRef(document)\n  const variablesRef = paramToRef(variables)\n  const optionsRef = paramToReactive(options)\n\n  const result = ref<TResult | null | undefined>()\n  const resultEvent = useEventHook<[FetchResult<TResult>, OnResultContext]>()\n  const error = ref<ApolloError | null>(null)\n  const errorEvent = useEventHook<[ApolloError, OnErrorContext]>()\n\n  const loading = ref(false)\n  vm && trackSubscription(loading)\n\n  // Apollo Client\n  const { resolveClient } = useApolloClient()\n\n  const subscription: Ref<Observable<FetchResult<TResult>> | null> = ref(null)\n  let observer: ObservableSubscription | null = null\n  let started = false\n\n  function getClient () {\n    return resolveClient(currentOptions.value?.clientId)\n  }\n\n  function start () {\n    if (started || !isEnabled.value || isServer) return\n    started = true\n    loading.value = true\n\n    const client = getClient()\n\n    subscription.value = client.subscribe<TResult, TVariables>({\n      query: currentDocument,\n      variables: currentVariables,\n      ...currentOptions.value,\n    })\n\n    observer = subscription.value.subscribe({\n      next: onNextResult,\n      error: onError,\n    })\n  }\n\n  function onNextResult (fetchResult: FetchResult<TResult>) {\n    result.value = fetchResult.data\n    loading.value = false\n    resultEvent.trigger(fetchResult, {\n      client: getClient(),\n    })\n  }\n\n  function onError (fetchError: unknown) {\n    const apolloError = toApolloError(fetchError)\n\n    error.value = apolloError\n    loading.value = false\n    errorEvent.trigger(apolloError, {\n      client: getClient(),\n    })\n  }\n\n  function stop () {\n    if (!started) return\n    started = false\n    loading.value = false\n\n    if (subscription.value) {\n      subscription.value = null\n    }\n\n    if (observer) {\n      observer.unsubscribe()\n      observer = null\n    }\n  }\n\n  // Restart\n  let restarting = false\n  /**\n   * Queue a restart of the query (on next tick) if it is already active\n   */\n  function baseRestart () {\n    if (!started || restarting) return\n    restarting = true\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    nextTick(() => {\n      if (started) {\n        stop()\n        start()\n      }\n      restarting = false\n    })\n  }\n\n  let debouncedRestart: typeof baseRestart\n  function updateRestartFn () {\n    if (currentOptions.value?.throttle) {\n      debouncedRestart = throttle(currentOptions.value.throttle, baseRestart)\n    } else if (currentOptions.value?.debounce) {\n      debouncedRestart = debounce(currentOptions.value.debounce, baseRestart)\n    } else {\n      debouncedRestart = baseRestart\n    }\n  }\n\n  function restart () {\n    if (!debouncedRestart) updateRestartFn()\n    debouncedRestart()\n  }\n\n  // Applying options\n  const currentOptions = ref<UseSubscriptionOptions<TResult, TVariables>>()\n  watch(() => isRef(optionsRef) ? optionsRef.value : optionsRef, value => {\n    if (currentOptions.value && (\n      currentOptions.value.throttle !== value.throttle ||\n      currentOptions.value.debounce !== value.debounce\n    )) {\n      updateRestartFn()\n    }\n    currentOptions.value = value\n    restart()\n  }, {\n    deep: true,\n    immediate: true,\n  })\n\n  // Applying document\n  let currentDocument: DocumentNode\n  watch(documentRef, value => {\n    currentDocument = value\n    restart()\n  }, {\n    immediate: true,\n  })\n\n  // Applying variables\n  let currentVariables: TVariables | undefined\n  let currentVariablesSerialized: string\n  watch(variablesRef, (value, oldValue) => {\n    const serialized = JSON.stringify(value)\n    if (serialized !== currentVariablesSerialized) {\n      currentVariables = value\n      restart()\n    }\n    currentVariablesSerialized = serialized\n  }, {\n    deep: true,\n    immediate: true,\n  })\n\n  // Internal enabled returned to user\n  // @TODO Doesn't fully work yet, need to initialize with option\n  // const enabled = ref<boolean>()\n  const enabledOption = computed(() => !currentOptions.value || currentOptions.value.enabled == null || currentOptions.value.enabled)\n  // const isEnabled = computed(() => !!((typeof enabled.value === 'boolean' && enabled.value) && enabledOption.value))\n  const isEnabled = enabledOption\n\n  // watch(enabled, value => {\n  //   if (value == null) {\n  //     enabled.value = enabledOption.value\n  //   }\n  // })\n\n  // Auto start & stop\n  watch(isEnabled, value => {\n    if (value) {\n      start()\n    } else {\n      stop()\n    }\n  }, {\n    immediate: true,\n  })\n\n  // Teardown\n  vm && onBeforeUnmount(stop)\n\n  return {\n    result,\n    loading,\n    error,\n    // @TODO doesn't fully work yet\n    // enabled,\n    start,\n    stop,\n    restart,\n    document: documentRef,\n    variables: variablesRef,\n    options: optionsRef,\n    subscription,\n    onResult: resultEvent.on,\n    onError: errorEvent.on,\n  }\n}\n", "import { Ref, computed } from 'vue-demi'\nimport { ExtractSingleKey } from './util/ExtractSingleKey'\nimport type { DeepNonNullable, DeepRequired } from 'ts-essentials'\n\nexport type UseResultReturn<T> = Readonly<Ref<Readonly<T>>>\n\n/**\n * Resolve a `result`, returning either the first key of the `result` if there\n * is only one, or the `result` itself. The `value` of the ref will be\n * `undefined` until it is resolved.\n *\n * @example\n * const { result } = useQuery(...)\n * const user = useResult(result)\n * // user is `undefined` until the query resolves\n *\n * @param  {Ref<TResult>} result A `result` returned from `useQuery` to resolve.\n * @returns Readonly ref with `undefined` or the resolved `result`.\n * @deprecated Use `computed` instead. Before: `const items = useResult(result, [], data => data.someField.myItems)` After: `const items = computed(() => result.value?.someField.myItems ?? [])`\n */\nexport function useResult<TResult, TResultKey extends keyof NonNullable<TResult> = keyof NonNullable<TResult>> (\n  result: Ref<TResult>\n): UseResultReturn<undefined | ExtractSingleKey<NonNullable<TResult>, TResultKey>>\n\n/**\n * Resolve a `result`, returning either the first key of the `result` if there\n * is only one, or the `result` itself. The `value` of the ref will be\n * `defaultValue` until it is resolved.\n *\n * @example\n * const { result } = useQuery(...)\n * const profile = useResult(result, {})\n * // profile is `{}` until the query resolves\n *\n * @param  {Ref<TResult>} result A `result` returned from `useQuery` to resolve.\n * @param  {TDefaultValue} defaultValue The default return value before `result` is resolved.\n * @returns Readonly ref with the `defaultValue` or the resolved `result`.\n * @deprecated Use `computed` instead. Before: `const items = useResult(result, [], data => data.someField.myItems)` After: `const items = computed(() => result.value?.someField.myItems ?? [])`\n */\nexport function useResult<TResult, TDefaultValue, TResultKey extends keyof NonNullable<TResult> = keyof NonNullable<TResult>> (\n  result: Ref<TResult>,\n  defaultValue: TDefaultValue\n): UseResultReturn<TDefaultValue | ExtractSingleKey<NonNullable<TResult>, TResultKey>>\n\n/**\n * Resolve a `result`, returning the `result` mapped with the `pick` function.\n * The `value` of the ref will be `defaultValue` until it is resolved.\n *\n * @example\n * const { result } = useQuery(...)\n * const comments = useResult(result, undefined, (data) => data.comments)\n * // user is `undefined`, then resolves to the result's `comments`\n *\n * @param  {Ref<TResult>} result A `result` returned from `useQuery` to resolve.\n * @param  {TDefaultValue} defaultValue The default return value before `result` is resolved.\n * @param  {(data:TResult)=>TReturnValue} pick The function that receives `result` and maps a return value from it.\n * @returns Readonly ref with the `defaultValue` or the resolved and `pick`-mapped `result`\n * @deprecated Use `computed` instead. Before: `const items = useResult(result, [], data => data.someField.myItems)` After: `const items = computed(() => result.value?.someField.myItems ?? [])`\n */\nexport function useResult<\n  TResult,\n  TDefaultValue,\n  TReturnValue,\n> (\n  result: Ref<TResult>,\n  defaultValue: TDefaultValue | undefined,\n  pick: (data: DeepRequired<DeepNonNullable<TResult>>) => TReturnValue\n): UseResultReturn<TDefaultValue | TReturnValue>\n\n/**\n * @deprecated Use `computed` instead. Before: `const items = useResult(result, [], data => data.someField.myItems)` After: `const items = computed(() => result.value?.someField.myItems ?? [])`\n */\nexport function useResult<\n  TResult,\n  TDefaultValue,\n  TReturnValue,\n> (\n  result: Ref<TResult>,\n  defaultValue?: TDefaultValue,\n  pick?: (data: DeepRequired<DeepNonNullable<TResult>>) => TReturnValue,\n): UseResultReturn<TResult | TResult[keyof TResult] | TDefaultValue | TReturnValue | undefined> {\n  console.warn(`'useResult' is deprecated and will be removed soon. Please use 'computed' instead.\nBefore:\nconst items = useResult(result, [], data => data.someField.myItems)\nAfter:\nconst items = computed(() => result.value?.someField.myItems ?? [])`)\n  return computed(() => {\n    const value = result.value\n    if (value) {\n      if (pick) {\n        try {\n          return pick(value as DeepRequired<DeepNonNullable<TResult>>)\n        } catch (e) {\n          // Silent error\n        }\n      } else {\n        const keys = Object.keys(value)\n        if (keys.length === 1) {\n          // Automatically take the only key in result data\n          return value[keys[0] as keyof TResult]\n        } else {\n          // Return entire result data\n          return value\n        }\n      }\n    }\n    return defaultValue\n  })\n}\n", "import { getCurrentTracking, globalTracking } from './util/loadingTracking'\nimport { computed } from 'vue-demi'\n\nexport function useQueryLoading () {\n  const { tracking } = getCurrentTracking()\n  if (!tracking) throw new Error('useQueryLoading must be called inside a setup function.')\n  return computed(() => tracking.queries.value > 0)\n}\n\nexport function useMutationLoading () {\n  const { tracking } = getCurrentTracking()\n  if (!tracking) throw new Error('useMutationLoading must be called inside a setup function.')\n  return computed(() => tracking.mutations.value > 0)\n}\n\nexport function useSubscriptionLoading () {\n  const { tracking } = getCurrentTracking()\n  if (!tracking) throw new Error('useSubscriptionLoading must be called inside a setup function.')\n  return computed(() => tracking.subscriptions.value > 0)\n}\n\nexport function useGlobalQueryLoading () {\n  return computed(() => globalTracking.queries.value > 0)\n}\n\nexport function useGlobalMutationLoading () {\n  return computed(() => globalTracking.mutations.value > 0)\n}\n\nexport function useGlobalSubscriptionLoading () {\n  return computed(() => globalTracking.subscriptions.value > 0)\n}\n"],
  "mappings": "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",
  "names": ["delay", "callback", "options", "noTrailing", "noLeading", "debounceMode", "undefined", "timeoutID", "cancelled", "lastExec", "clearExistingTimeout", "clearTimeout", "cancel", "upcomingOnly", "wrapper", "arguments_", "self", "elapsed", "Date", "now", "exec", "apply", "clear", "setTimeout", "atBegin", "throttle"]
}
