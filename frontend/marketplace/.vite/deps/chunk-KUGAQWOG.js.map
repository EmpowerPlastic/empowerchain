{
  "version": 3,
  "sources": ["../../node_modules/@empower-plastic/empowerjs/module/codegen/empowerchain/proofofexistence/tx.rpc.msg.js", "../../node_modules/@empower-plastic/empowerjs/module/codegen/empowerchain/proofofexistence/tx.js"],
  "sourcesContent": ["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { MsgCreateProof, MsgCreateProofResponse } from \"./tx\";\n/** Msg defines the message service */\n\nexport class MsgClientImpl {\n  constructor(rpc) {\n    _defineProperty(this, \"rpc\", void 0);\n    this.rpc = rpc;\n    this.createProof = this.createProof.bind(this);\n  }\n  createProof(request) {\n    const data = MsgCreateProof.encode(request).finish();\n    const promise = this.rpc.request(\"empowerchain.proofofexistence.Msg\", \"CreateProof\", data);\n    return promise.then(data => MsgCreateProofResponse.decode(new _m0.Reader(data)));\n  }\n}", "import * as _m0 from \"protobufjs/minimal\";\nimport { isSet } from \"../../helpers\";\n/** MsgCreateProof is the message used for creating a new proof of existence */\n\n/** MsgCreateProof is the message used for creating a new proof of existence */\n\n/** MsgCreateProofResponse is response from creating a new proof of existence */\n\n/** MsgCreateProofResponse is response from creating a new proof of existence */\n\nfunction createBaseMsgCreateProof() {\n  return {\n    creator: \"\",\n    hash: \"\"\n  };\n}\nexport const MsgCreateProof = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.hash !== \"\") {\n      writer.uint32(18).string(message.hash);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCreateProof();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.hash = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      hash: isSet(object.hash) ? String(object.hash) : \"\"\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.hash !== undefined && (obj.hash = message.hash);\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$creator, _object$hash;\n    const message = createBaseMsgCreateProof();\n    message.creator = (_object$creator = object.creator) !== null && _object$creator !== void 0 ? _object$creator : \"\";\n    message.hash = (_object$hash = object.hash) !== null && _object$hash !== void 0 ? _object$hash : \"\";\n    return message;\n  }\n};\nfunction createBaseMsgCreateProofResponse() {\n  return {};\n}\nexport const MsgCreateProofResponse = {\n  encode(_, writer = _m0.Writer.create()) {\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCreateProofResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(_) {\n    return {};\n  },\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n  fromPartial(_) {\n    const message = createBaseMsgCreateProofResponse();\n    return message;\n  }\n};"],
  "mappings": "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",
  "names": ["_m0", "data"]
}
