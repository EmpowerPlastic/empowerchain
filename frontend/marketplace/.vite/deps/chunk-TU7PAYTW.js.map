{
  "version": 3,
  "sources": ["../../node_modules/@segment/analytics-core/src/validation/helpers.ts", "../../node_modules/@segment/analytics-core/src/callback/index.ts", "../../node_modules/@segment/analytics-generic-utils/src/create-deferred/create-deferred.ts", "../../node_modules/@segment/analytics-generic-utils/src/emitter/emitter.ts", "../../node_modules/@segment/analytics-core/src/priority-queue/backoff.ts", "../../node_modules/@segment/analytics-core/src/priority-queue/index.ts", "../../node_modules/@lukeed/uuid/dist/index.mjs", "../../node_modules/dset/dist/index.mjs", "../../node_modules/@segment/analytics-core/src/logger/index.ts", "../../node_modules/@segment/analytics-core/src/stats/index.ts", "../../node_modules/@segment/analytics-core/src/context/index.ts", "../../node_modules/@segment/analytics-core/src/queue/delivery.ts", "../../node_modules/@segment/analytics-core/src/utils/pick.ts", "../../node_modules/@segment/analytics-core/src/validation/errors.ts", "../../node_modules/@segment/analytics-core/src/validation/assertions.ts", "../../node_modules/@segment/analytics-core/src/events/index.ts", "../../node_modules/@segment/analytics-core/src/utils/group-by.ts", "../../node_modules/@segment/analytics-core/src/utils/is-thenable.ts", "../../node_modules/@segment/analytics-core/src/task/task-group.ts", "../../node_modules/@segment/analytics-core/src/queue/event-queue.ts", "../../node_modules/@segment/analytics-core/src/analytics/dispatch.ts"],
  "sourcesContent": ["export function isString(obj: unknown): obj is string {\n  return typeof obj === 'string'\n}\n\nexport function isNumber(obj: unknown): obj is number {\n  return typeof obj === 'number'\n}\n\nexport function isFunction(obj: unknown): obj is Function {\n  return typeof obj === 'function'\n}\n\nexport function exists<T>(val: unknown): val is NonNullable<T> {\n  return val !== undefined && val !== null\n}\n\nexport function isPlainObject(\n  obj: unknown\n): obj is Record<string | symbol | number, unknown> {\n  return (\n    Object.prototype.toString.call(obj).slice(8, -1).toLowerCase() === 'object'\n  )\n}\n", "import { CoreContext } from '../context'\nimport type { Callback } from '../events'\n\nexport function pTimeout<T>(promise: Promise<T>, timeout: number): Promise<T> {\n  return new Promise((resolve, reject) => {\n    const timeoutId = setTimeout(() => {\n      reject(Error('Promise timed out'))\n    }, timeout)\n\n    promise\n      .then((val) => {\n        clearTimeout(timeoutId)\n        return resolve(val)\n      })\n      .catch(reject)\n  })\n}\n\nexport function sleep(timeoutInMs: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, timeoutInMs))\n}\n\n/**\n * @param ctx\n * @param callback - the function to invoke\n * @param delay - aka \"timeout\". The amount of time in ms to wait before invoking the callback.\n */\nexport function invokeCallback<Ctx extends CoreContext>(\n  ctx: Ctx,\n  callback: Callback<Ctx>,\n  delay: number\n): Promise<Ctx> {\n  const cb = () => {\n    try {\n      return Promise.resolve(callback(ctx))\n    } catch (err) {\n      return Promise.reject(err)\n    }\n  }\n\n  return (\n    sleep(delay)\n      // pTimeout ensures that the callback can't cause the context to hang\n      .then(() => pTimeout(cb(), 1000))\n      .catch((err) => {\n        ctx?.log('warn', 'Callback Error', { error: err })\n        ctx?.stats.increment('callback_error')\n      })\n      .then(() => ctx)\n  )\n}\n", "/**\n * Return a promise that can be externally resolved\n */\nexport const createDeferred = <T>() => {\n  let resolve!: (value: T | PromiseLike<T>) => void\n  let reject!: (reason: any) => void\n  const promise = new Promise<T>((_resolve, _reject) => {\n    resolve = _resolve\n    reject = _reject\n  })\n  return {\n    resolve,\n    reject,\n    promise,\n  }\n}\n", "type EventName = string\ntype EventFnArgs = any[]\ntype EmitterContract = Record<EventName, EventFnArgs>\n\nexport interface EmitterOptions {\n  /** How many event listeners for a particular event before emitting a warning (0 = disabled)\n   *  @default 10\n   **/\n  maxListeners?: number\n}\n\n/**\n * Event Emitter that takes the expected contract as a generic\n * @example\n * ```ts\n *  type Contract = {\n *    delivery_success: [DeliverySuccessResponse, Metrics],\n *    delivery_failure: [DeliveryError]\n * }\n *  new Emitter<Contract>()\n *  .on('delivery_success', (res, metrics) => ...)\n *  .on('delivery_failure', (err) => ...)\n * ```\n */\nexport class Emitter<Contract extends EmitterContract = EmitterContract> {\n  maxListeners: number\n  constructor(options?: EmitterOptions) {\n    this.maxListeners = options?.maxListeners ?? 10\n  }\n  private callbacks: Partial<Contract> = {}\n  private warned = false\n\n  private warnIfPossibleMemoryLeak<EventName extends keyof Contract>(\n    event: EventName\n  ) {\n    if (this.warned) {\n      return\n    }\n    if (\n      this.maxListeners &&\n      this.callbacks[event]!.length > this.maxListeners\n    ) {\n      console.warn(\n        `Event Emitter: Possible memory leak detected; ${String(\n          event\n        )} has exceeded ${this.maxListeners} listeners.`\n      )\n      this.warned = true\n    }\n  }\n\n  on<EventName extends keyof Contract>(\n    event: EventName,\n    callback: (...args: Contract[EventName]) => void\n  ): this {\n    if (!this.callbacks[event]) {\n      this.callbacks[event] = [callback] as Contract[EventName]\n    } else {\n      this.callbacks[event]!.push(callback)\n      this.warnIfPossibleMemoryLeak(event)\n    }\n    return this\n  }\n\n  once<EventName extends keyof Contract>(\n    event: EventName,\n    callback: (...args: Contract[EventName]) => void\n  ): this {\n    const on = (...args: Contract[EventName]): void => {\n      this.off(event, on)\n      callback.apply(this, args)\n    }\n\n    this.on(event, on)\n    return this\n  }\n\n  off<EventName extends keyof Contract>(\n    event: EventName,\n    callback: (...args: Contract[EventName]) => void\n  ): this {\n    const fns = this.callbacks[event] ?? []\n    const without = fns.filter((fn) => fn !== callback) as Contract[EventName]\n    this.callbacks[event] = without\n    return this\n  }\n\n  emit<EventName extends keyof Contract>(\n    event: EventName,\n    ...args: Contract[EventName]\n  ): this {\n    const callbacks = this.callbacks[event] ?? []\n    callbacks.forEach((callback) => {\n      callback.apply(this, args)\n    })\n    return this\n  }\n}\n", "type BackoffParams = {\n  /** The number of milliseconds before starting the first retry. Default is 500 */\n  minTimeout?: number\n\n  /** The maximum number of milliseconds between two retries. Default is Infinity */\n  maxTimeout?: number\n\n  /** The exponential factor to use. Default is 2. */\n  factor?: number\n\n  /** The current attempt */\n  attempt: number\n}\n\nexport function backoff(params: BackoffParams): number {\n  const random = Math.random() + 1\n  const {\n    minTimeout = 500,\n    factor = 2,\n    attempt,\n    maxTimeout = Infinity,\n  } = params\n  return Math.min(random * minTimeout * Math.pow(factor, attempt), maxTimeout)\n}\n", "import { Emitter } from '@segment/analytics-generic-utils'\nimport { backoff } from './backoff'\n\n/**\n * @internal\n */\nexport const ON_REMOVE_FROM_FUTURE = 'onRemoveFromFuture'\n\ninterface QueueItem {\n  id: string\n}\n\nexport class PriorityQueue<Item extends QueueItem = QueueItem> extends Emitter {\n  protected future: Item[] = []\n  protected queue: Item[]\n  protected seen: Record<string, number>\n\n  public maxAttempts: number\n\n  constructor(\n    maxAttempts: number,\n    queue: Item[],\n    seen?: Record<string, number>\n  ) {\n    super()\n    this.maxAttempts = maxAttempts\n    this.queue = queue\n    this.seen = seen ?? {}\n  }\n\n  push(...items: Item[]): boolean[] {\n    const accepted = items.map((operation) => {\n      const attempts = this.updateAttempts(operation)\n\n      if (attempts > this.maxAttempts || this.includes(operation)) {\n        return false\n      }\n\n      this.queue.push(operation)\n      return true\n    })\n\n    this.queue = this.queue.sort(\n      (a, b) => this.getAttempts(a) - this.getAttempts(b)\n    )\n    return accepted\n  }\n\n  pushWithBackoff(item: Item): boolean {\n    if (this.getAttempts(item) === 0) {\n      return this.push(item)[0]\n    }\n\n    const attempt = this.updateAttempts(item)\n\n    if (attempt > this.maxAttempts || this.includes(item)) {\n      return false\n    }\n\n    const timeout = backoff({ attempt: attempt - 1 })\n\n    setTimeout(() => {\n      this.queue.push(item)\n      // remove from future list\n      this.future = this.future.filter((f) => f.id !== item.id)\n      // Lets listeners know that a 'future' message is now available in the queue\n      this.emit(ON_REMOVE_FROM_FUTURE)\n    }, timeout)\n\n    this.future.push(item)\n    return true\n  }\n\n  public getAttempts(item: Item): number {\n    return this.seen[item.id] ?? 0\n  }\n\n  public updateAttempts(item: Item): number {\n    this.seen[item.id] = this.getAttempts(item) + 1\n    return this.getAttempts(item)\n  }\n\n  includes(item: Item): boolean {\n    return (\n      this.queue.includes(item) ||\n      this.future.includes(item) ||\n      Boolean(this.queue.find((i) => i.id === item.id)) ||\n      Boolean(this.future.find((i) => i.id === item.id))\n    )\n  }\n\n  pop(): Item | undefined {\n    return this.queue.shift()\n  }\n\n  public get length(): number {\n    return this.queue.length\n  }\n\n  public get todo(): number {\n    return this.queue.length + this.future.length\n  }\n}\n", "var IDX=256, HEX=[], BUFFER;\nwhile (IDX--) HEX[IDX] = (IDX + 256).toString(16).substring(1);\n\nexport function v4() {\n\tvar i=0, num, out='';\n\n\tif (!BUFFER || ((IDX + 16) > 256)) {\n\t\tBUFFER = Array(i=256);\n\t\twhile (i--) BUFFER[i] = 256 * Math.random() | 0;\n\t\ti = IDX = 0;\n\t}\n\n\tfor (; i < 16; i++) {\n\t\tnum = BUFFER[IDX + i];\n\t\tif (i==6) out += HEX[num & 15 | 64];\n\t\telse if (i==8) out += HEX[num & 63 | 128];\n\t\telse out += HEX[num];\n\n\t\tif (i & 1 && i > 1 && i < 11) out += '-';\n\t}\n\n\tIDX++;\n\treturn out;\n}\n", "export function dset(obj, keys, val) {\n\tkeys.split && (keys=keys.split('.'));\n\tvar i=0, l=keys.length, t=obj, x, k;\n\twhile (i < l) {\n\t\tk = keys[i++];\n\t\tif (k === '__proto__' || k === 'constructor' || k === 'prototype') break;\n\t\tt = t[k] = (i === l) ? val : (typeof(x=t[k])===typeof(keys)) ? x : (keys[i]*0 !== 0 || !!~(''+keys[i]).indexOf('.')) ? {} : [];\n\t}\n}\n", "export type LogLevel = 'debug' | 'info' | 'warn' | 'error'\nexport type LogMessage = {\n  level: LogLevel\n  message: string\n  time?: Date\n  extras?: Record<string, any>\n}\n\nexport interface GenericLogger {\n  log(level: LogLevel, message: string, extras?: object): void\n  flush(): void\n  logs: LogMessage[]\n}\n\nexport class CoreLogger implements GenericLogger {\n  private _logs: LogMessage[] = []\n\n  log(level: LogLevel, message: string, extras?: object) {\n    const time = new Date()\n    this._logs.push({\n      level,\n      message,\n      time,\n      extras,\n    })\n  }\n\n  public get logs(): LogMessage[] {\n    return this._logs\n  }\n\n  public flush(): void {\n    if (this.logs.length > 1) {\n      const formatted = this._logs.reduce((logs, log) => {\n        const line = {\n          ...log,\n          json: JSON.stringify(log.extras, null, ' '),\n          extras: log.extras,\n        }\n\n        delete line['time']\n\n        let key = log.time?.toISOString() ?? ''\n        if (logs[key]) {\n          key = `${key}-${Math.random()}`\n        }\n\n        return {\n          ...logs,\n          [key]: line,\n        }\n      }, {} as Record<string, LogMessage>)\n\n      // ie doesn't like console.table\n      if (console.table) {\n        console.table(formatted)\n      } else {\n        console.log(formatted)\n      }\n    } else {\n      this.logs.forEach((logEntry) => {\n        const { level, message, extras } = logEntry\n\n        if (level === 'info' || level === 'debug') {\n          console.log(message, extras ?? '')\n        } else {\n          console[level](message, extras ?? '')\n        }\n      })\n    }\n\n    this._logs = []\n  }\n}\n", "type CompactMetricType = 'g' | 'c'\n\nexport type CoreMetricType = 'gauge' | 'counter'\n\nexport interface CoreMetric {\n  metric: string\n  value: number\n  type: CoreMetricType\n  tags: string[]\n  timestamp: number // unit milliseconds\n}\n\nexport interface CompactMetric {\n  m: string // metric name\n  v: number // value\n  k: CompactMetricType\n  t: string[] // tags\n  e: number // timestamp in unit milliseconds\n}\n\nconst compactMetricType = (type: CoreMetricType): CompactMetricType => {\n  const enums: Record<CoreMetricType, CompactMetricType> = {\n    gauge: 'g',\n    counter: 'c',\n  }\n  return enums[type]\n}\n\nexport abstract class CoreStats {\n  metrics: CoreMetric[] = []\n  increment(metric: string, by = 1, tags?: string[]): void {\n    this.metrics.push({\n      metric,\n      value: by,\n      tags: tags ?? [],\n      type: 'counter',\n      timestamp: Date.now(),\n    })\n  }\n\n  gauge(metric: string, value: number, tags?: string[]): void {\n    this.metrics.push({\n      metric,\n      value,\n      tags: tags ?? [],\n      type: 'gauge',\n      timestamp: Date.now(),\n    })\n  }\n\n  flush(): void {\n    const formatted = this.metrics.map((m) => ({\n      ...m,\n      tags: m.tags.join(','),\n    }))\n    // ie doesn't like console.table\n    if (console.table) {\n      console.table(formatted)\n    } else {\n      console.log(formatted)\n    }\n    this.metrics = []\n  }\n\n  /**\n   * compact keys for smaller payload\n   */\n  serialize(): CompactMetric[] {\n    return this.metrics.map((m) => {\n      return {\n        m: m.metric,\n        v: m.value,\n        t: m.tags,\n        k: compactMetricType(m.type),\n        e: m.timestamp,\n      }\n    })\n  }\n}\n\nexport class NullStats extends CoreStats {\n  override gauge(..._args: Parameters<CoreStats['gauge']>) {}\n  override increment(..._args: Parameters<CoreStats['increment']>) {}\n  override flush(..._args: Parameters<CoreStats['flush']>) {}\n  override serialize(..._args: Parameters<CoreStats['serialize']>) {\n    return []\n  }\n}\n", "import { CoreSegmentEvent } from '../events/interfaces'\n\nimport { v4 as uuid } from '@lukeed/uuid'\nimport { dset } from 'dset'\nimport { CoreLogger, LogLevel, LogMessage } from '../logger'\nimport { CoreStats, CoreMetric, NullStats } from '../stats'\n\nexport interface SerializedContext {\n  id: string\n  event: CoreSegmentEvent\n  logs: LogMessage[]\n  metrics?: CoreMetric[]\n}\n\nexport interface ContextFailedDelivery {\n  reason: unknown\n}\n\nexport interface CancelationOptions {\n  retry?: boolean\n  reason?: string\n  type?: string\n}\n\nexport class ContextCancelation {\n  retry: boolean\n  type: string\n  reason?: string\n\n  constructor(options: CancelationOptions) {\n    this.retry = options.retry ?? true\n    this.type = options.type ?? 'plugin Error'\n    this.reason = options.reason ?? ''\n  }\n}\n\nexport abstract class CoreContext<\n  Event extends CoreSegmentEvent = CoreSegmentEvent\n> {\n  event: Event\n  logger: CoreLogger\n  stats: CoreStats\n  attempts = 0\n\n  private _failedDelivery?: ContextFailedDelivery\n  private _id: string\n\n  constructor(\n    event: Event,\n    id = uuid(),\n    stats: CoreStats = new NullStats(),\n    logger = new CoreLogger()\n  ) {\n    this.event = event\n    this._id = id\n    this.logger = logger\n    this.stats = stats\n  }\n\n  static system(): void {\n    // This should be overridden by the subclass to return an instance of the subclass.\n  }\n\n  isSame(other: CoreContext): boolean {\n    return other.id === this.id\n  }\n\n  cancel(error?: Error | ContextCancelation): never {\n    if (error) {\n      throw error\n    }\n\n    throw new ContextCancelation({ reason: 'Context Cancel' })\n  }\n\n  log(level: LogLevel, message: string, extras?: object): void {\n    this.logger.log(level, message, extras)\n  }\n\n  get id(): string {\n    return this._id\n  }\n\n  updateEvent(path: string, val: unknown): Event {\n    // Don't allow integrations that are set to false to be overwritten with integration settings.\n    if (path.split('.')[0] === 'integrations') {\n      const integrationName = path.split('.')[1]\n\n      if (this.event.integrations?.[integrationName] === false) {\n        return this.event\n      }\n    }\n\n    dset(this.event, path, val)\n    return this.event\n  }\n\n  failedDelivery(): ContextFailedDelivery | undefined {\n    return this._failedDelivery\n  }\n\n  setFailedDelivery(options: ContextFailedDelivery) {\n    this._failedDelivery = options\n  }\n\n  logs(): LogMessage[] {\n    return this.logger.logs\n  }\n\n  flush(): void {\n    this.logger.flush()\n    this.stats.flush()\n  }\n\n  toJSON(): SerializedContext {\n    return {\n      id: this._id,\n      event: this.event,\n      logs: this.logger.logs,\n      metrics: this.stats.metrics,\n    }\n  }\n}\n", "import { CoreContext, ContextCancelation } from '../context'\nimport { CorePlugin } from '../plugins'\n\nasync function tryAsync<T>(fn: () => T | Promise<T>): Promise<T> {\n  try {\n    return await fn()\n  } catch (err) {\n    return Promise.reject(err)\n  }\n}\n\nexport function attempt<Ctx extends CoreContext = CoreContext>(\n  ctx: Ctx,\n  plugin: CorePlugin<Ctx>\n): Promise<Ctx | ContextCancelation | Error> {\n  ctx.log('debug', 'plugin', { plugin: plugin.name })\n  const start = new Date().getTime()\n\n  const hook = plugin[ctx.event.type]\n  if (hook === undefined) {\n    return Promise.resolve(ctx)\n  }\n\n  const newCtx = tryAsync(() => hook.apply(plugin, [ctx]))\n    .then((ctx) => {\n      const done = new Date().getTime() - start\n      ctx.stats.gauge('plugin_time', done, [`plugin:${plugin.name}`])\n\n      return ctx\n    })\n    .catch((err: Error | ContextCancelation) => {\n      if (\n        err instanceof ContextCancelation &&\n        err.type === 'middleware_cancellation'\n      ) {\n        throw err\n      }\n\n      if (err instanceof ContextCancelation) {\n        ctx.log('warn', err.type, {\n          plugin: plugin.name,\n          error: err,\n        })\n\n        return err\n      }\n\n      ctx.log('error', 'plugin Error', {\n        plugin: plugin.name,\n        error: err,\n      })\n      ctx.stats.increment('plugin_error', 1, [`plugin:${plugin.name}`])\n\n      return err\n    })\n\n  return newCtx\n}\n\nexport function ensure<Ctx extends CoreContext = CoreContext>(\n  ctx: Ctx,\n  plugin: CorePlugin<Ctx>\n): Promise<Ctx | undefined> {\n  return attempt(ctx, plugin).then((newContext) => {\n    if (newContext instanceof CoreContext) {\n      return newContext\n    }\n\n    ctx.log('debug', 'Context canceled')\n    ctx.stats.increment('context_canceled')\n    ctx.cancel(newContext)\n  })\n}\n", "export const pickBy = <T extends object, K extends keyof T>(\n  obj: T,\n  fn: (key: K, v: T[K]) => boolean\n) => {\n  return (Object.keys(obj) as K[])\n    .filter((k) => fn(k, obj[k]))\n    .reduce((acc, key) => ((acc[key] = obj[key]), acc), {} as Partial<T>)\n}\n", "export class ValidationError extends Error {\n  field: string\n\n  constructor(field: string, message: string) {\n    super(`${field} ${message}`)\n    this.field = field\n  }\n}\n", "import { CoreSegmentEvent } from '../events'\nimport { ValidationError } from './errors'\nimport { isString, isPlainObject, exists } from './helpers'\n\nconst stringError = 'is not a string'\nconst objError = 'is not an object'\nconst nilError = 'is nil'\n\nexport function assertUserIdentity(event: CoreSegmentEvent): void {\n  const USER_FIELD_NAME = '.userId/anonymousId/previousId/groupId'\n\n  const getAnyUserId = (event: CoreSegmentEvent) =>\n    event.userId ?? event.anonymousId ?? event.groupId ?? event.previousId\n\n  const id = getAnyUserId(event)\n  if (!exists(id)) {\n    throw new ValidationError(USER_FIELD_NAME, nilError)\n  } else if (!isString(id)) {\n    throw new ValidationError(USER_FIELD_NAME, stringError)\n  }\n}\n\nexport function assertEventExists(\n  event?: CoreSegmentEvent | null\n): asserts event is CoreSegmentEvent {\n  if (!exists(event)) {\n    throw new ValidationError('Event', nilError)\n  }\n  if (typeof event !== 'object') {\n    throw new ValidationError('Event', objError)\n  }\n}\n\nexport function assertEventType(event: CoreSegmentEvent): void {\n  if (!isString(event.type)) {\n    throw new ValidationError('.type', stringError)\n  }\n}\n\nexport function assertTrackEventName(event: CoreSegmentEvent): void {\n  if (!isString(event.event)) {\n    throw new ValidationError('.event', stringError)\n  }\n}\n\nexport function assertTrackEventProperties(event: CoreSegmentEvent): void {\n  if (!isPlainObject(event.properties)) {\n    throw new ValidationError('.properties', objError)\n  }\n}\n\nexport function assertTraits(event: CoreSegmentEvent): void {\n  if (!isPlainObject(event.traits)) {\n    throw new ValidationError('.traits', objError)\n  }\n}\n\nexport function validateEvent(event?: CoreSegmentEvent | null) {\n  assertEventExists(event)\n  assertEventType(event)\n\n  if (event.type === 'track') {\n    assertTrackEventName(event)\n    assertTrackEventProperties(event)\n  }\n\n  if (['group', 'identify'].includes(event.type)) {\n    assertTraits(event)\n  }\n\n  assertUserIdentity(event)\n}\n", "export * from './interfaces'\nimport { dset } from 'dset'\nimport { ID, User } from '../user'\nimport {\n  Integrations,\n  EventProperties,\n  CoreSegmentEvent,\n  CoreOptions,\n  CoreExtraContext,\n  UserTraits,\n  GroupTraits,\n} from './interfaces'\nimport { pickBy } from '../utils/pick'\nimport { validateEvent } from '../validation/assertions'\nimport type { RemoveIndexSignature } from '../utils/ts-helpers'\n\ninterface EventFactorySettings {\n  createMessageId: () => string\n  user?: User\n}\n\nexport class EventFactory {\n  createMessageId: EventFactorySettings['createMessageId']\n  user?: User\n\n  constructor(settings: EventFactorySettings) {\n    this.user = settings.user\n    this.createMessageId = settings.createMessageId\n  }\n\n  track(\n    event: string,\n    properties?: EventProperties,\n    options?: CoreOptions,\n    globalIntegrations?: Integrations\n  ) {\n    return this.normalize({\n      ...this.baseEvent(),\n      event,\n      type: 'track',\n      properties: properties ?? {}, // TODO: why is this not a shallow copy like everywhere else?\n      options: { ...options },\n      integrations: { ...globalIntegrations },\n    })\n  }\n\n  page(\n    category: string | null,\n    page: string | null,\n    properties?: EventProperties,\n    options?: CoreOptions,\n    globalIntegrations?: Integrations\n  ): CoreSegmentEvent {\n    const event: CoreSegmentEvent = {\n      type: 'page',\n      properties: { ...properties },\n      options: { ...options },\n      integrations: { ...globalIntegrations },\n    }\n\n    if (category !== null) {\n      event.category = category\n      event.properties = event.properties ?? {}\n      event.properties.category = category\n    }\n\n    if (page !== null) {\n      event.name = page\n    }\n\n    return this.normalize({\n      ...this.baseEvent(),\n      ...event,\n    })\n  }\n\n  screen(\n    category: string | null,\n    screen: string | null,\n    properties?: EventProperties,\n    options?: CoreOptions,\n    globalIntegrations?: Integrations\n  ): CoreSegmentEvent {\n    const event: CoreSegmentEvent = {\n      type: 'screen',\n      properties: { ...properties },\n      options: { ...options },\n      integrations: { ...globalIntegrations },\n    }\n\n    if (category !== null) {\n      event.category = category\n    }\n\n    if (screen !== null) {\n      event.name = screen\n    }\n\n    return this.normalize({\n      ...this.baseEvent(),\n      ...event,\n    })\n  }\n\n  identify(\n    userId: ID,\n    traits?: UserTraits,\n    options?: CoreOptions,\n    globalIntegrations?: Integrations\n  ): CoreSegmentEvent {\n    return this.normalize({\n      ...this.baseEvent(),\n      type: 'identify',\n      userId,\n      traits: traits ?? {},\n      options: { ...options },\n      integrations: globalIntegrations,\n    })\n  }\n\n  group(\n    groupId: ID,\n    traits?: GroupTraits,\n    options?: CoreOptions,\n    globalIntegrations?: Integrations\n  ): CoreSegmentEvent {\n    return this.normalize({\n      ...this.baseEvent(),\n      type: 'group',\n      traits: traits ?? {},\n      options: { ...options }, // this spreading is intentional\n      integrations: { ...globalIntegrations }, //\n      groupId,\n    })\n  }\n\n  alias(\n    to: string,\n    from: string | null, // TODO: can we make this undefined?\n    options?: CoreOptions,\n    globalIntegrations?: Integrations\n  ): CoreSegmentEvent {\n    const base: CoreSegmentEvent = {\n      userId: to,\n      type: 'alias',\n      options: { ...options },\n      integrations: { ...globalIntegrations },\n    }\n\n    if (from !== null) {\n      base.previousId = from\n    }\n\n    if (to === undefined) {\n      return this.normalize({\n        ...base,\n        ...this.baseEvent(),\n      })\n    }\n\n    return this.normalize({\n      ...this.baseEvent(),\n      ...base,\n    })\n  }\n\n  private baseEvent(): Partial<CoreSegmentEvent> {\n    const base: Partial<CoreSegmentEvent> = {\n      integrations: {},\n      options: {},\n    }\n\n    if (!this.user) return base\n\n    const user = this.user\n\n    if (user.id()) {\n      base.userId = user.id()\n    }\n\n    if (user.anonymousId()) {\n      base.anonymousId = user.anonymousId()\n    }\n\n    return base\n  }\n\n  /**\n   * Builds the context part of an event based on \"foreign\" keys that\n   * are provided in the `Options` parameter for an Event\n   */\n  private context(\n    options: CoreOptions\n  ): [CoreExtraContext, Partial<CoreSegmentEvent>] {\n    type CoreOptionKeys = keyof RemoveIndexSignature<CoreOptions>\n    /**\n     * If the event options are known keys from this list, we move them to the top level of the event.\n     * Any other options are moved to context.\n     */\n    const eventOverrideKeys: CoreOptionKeys[] = [\n      'userId',\n      'anonymousId',\n      'timestamp',\n    ]\n\n    delete options['integrations']\n    const providedOptionsKeys = Object.keys(options) as Exclude<\n      CoreOptionKeys,\n      'integrations'\n    >[]\n\n    const context = options.context ?? {}\n    const eventOverrides = {}\n\n    providedOptionsKeys.forEach((key) => {\n      if (key === 'context') {\n        return\n      }\n\n      if (eventOverrideKeys.includes(key)) {\n        dset(eventOverrides, key, options[key])\n      } else {\n        dset(context, key, options[key])\n      }\n    })\n\n    return [context, eventOverrides]\n  }\n\n  public normalize(event: CoreSegmentEvent): CoreSegmentEvent {\n    const integrationBooleans = Object.keys(event.integrations ?? {}).reduce(\n      (integrationNames, name) => {\n        return {\n          ...integrationNames,\n          [name]: Boolean(event.integrations?.[name]),\n        }\n      },\n      {} as Record<string, boolean>\n    )\n\n    // filter out any undefined options\n    event.options = pickBy(event.options || {}, (_, value) => {\n      return value !== undefined\n    })\n\n    // This is pretty trippy, but here's what's going on:\n    // - a) We don't pass initial integration options as part of the event, only if they're true or false\n    // - b) We do accept per integration overrides (like integrations.Amplitude.sessionId) at the event level\n    // Hence the need to convert base integration options to booleans, but maintain per event integration overrides\n    const allIntegrations = {\n      // Base config integrations object as booleans\n      ...integrationBooleans,\n\n      // Per event overrides, for things like amplitude sessionId, for example\n      ...event.options?.integrations,\n    }\n\n    const [context, overrides] = event.options\n      ? this.context(event.options)\n      : []\n\n    const { options, ...rest } = event\n\n    const body = {\n      timestamp: new Date(),\n      ...rest,\n      integrations: allIntegrations,\n      context,\n      ...overrides,\n    }\n\n    const evt: CoreSegmentEvent = {\n      ...body,\n      messageId: this.createMessageId(),\n    }\n\n    validateEvent(evt)\n    return evt\n  }\n}\n", "type Grouper<T> = (obj: T) => string | number\n\nexport function groupBy<T>(\n  collection: T[],\n  grouper: keyof T | Grouper<T>\n): Record<string, T[]> {\n  const results: Record<string, T[]> = {}\n\n  collection.forEach((item) => {\n    let key: string | number | undefined = undefined\n\n    if (typeof grouper === 'string') {\n      const suggestedKey = item[grouper]\n      key =\n        typeof suggestedKey !== 'string'\n          ? JSON.stringify(suggestedKey)\n          : suggestedKey\n    } else if (grouper instanceof Function) {\n      key = grouper(item)\n    }\n\n    if (key === undefined) {\n      return\n    }\n\n    results[key] = [...(results[key] ?? []), item]\n  })\n\n  return results\n}\n", "/**\n *  Check if  thenable\n *  (instanceof Promise doesn't respect realms)\n */\nexport const isThenable = (value: unknown): boolean =>\n  typeof value === 'object' &&\n  value !== null &&\n  'then' in value &&\n  typeof (value as any).then === 'function'\n", "import { isThenable } from '../utils/is-thenable'\n\nexport type TaskGroup = {\n  done: () => Promise<void>\n  run: <Operation extends (...args: any[]) => any>(\n    op: Operation\n  ) => ReturnType<Operation>\n}\n\nexport const createTaskGroup = (): TaskGroup => {\n  let taskCompletionPromise: Promise<void>\n  let resolvePromise: () => void\n  let count = 0\n\n  return {\n    done: () => taskCompletionPromise,\n    run: (op) => {\n      const returnValue = op()\n\n      if (isThenable(returnValue)) {\n        if (++count === 1) {\n          taskCompletionPromise = new Promise((res) => (resolvePromise = res))\n        }\n\n        returnValue.finally(() => --count === 0 && resolvePromise())\n      }\n\n      return returnValue\n    },\n  }\n}\n", "import { CoreAnalytics } from '../analytics'\nimport { groupBy } from '../utils/group-by'\nimport { ON_REMOVE_FROM_FUTURE, PriorityQueue } from '../priority-queue'\n\nimport { CoreContext, ContextCancelation } from '../context'\nimport { Emitter } from '@segment/analytics-generic-utils'\nimport { Integrations, JSONObject } from '../events/interfaces'\nimport { CorePlugin } from '../plugins'\nimport { createTaskGroup, TaskGroup } from '../task/task-group'\nimport { attempt, ensure } from './delivery'\n\nexport type EventQueueEmitterContract<Ctx extends CoreContext> = {\n  message_delivered: [ctx: Ctx]\n  message_enriched: [ctx: Ctx, plugin: CorePlugin<Ctx>]\n  delivery_success: [ctx: Ctx]\n  delivery_retry: [ctx: Ctx]\n  delivery_failure: [ctx: Ctx, err: Ctx | Error | ContextCancelation]\n  flush: [ctx: Ctx, delivered: boolean]\n}\n\nexport abstract class CoreEventQueue<\n  Ctx extends CoreContext = CoreContext,\n  Plugin extends CorePlugin<Ctx> = CorePlugin<Ctx>\n> extends Emitter<EventQueueEmitterContract<Ctx>> {\n  /**\n   * All event deliveries get suspended until all the tasks in this task group are complete.\n   * For example: a middleware that augments the event object should be loaded safely as a\n   * critical task, this way, event queue will wait for it to be ready before sending events.\n   *\n   * This applies to all the events already in the queue, and the upcoming ones\n   */\n  criticalTasks: TaskGroup = createTaskGroup()\n  queue: PriorityQueue<Ctx>\n  plugins: Plugin[] = []\n  failedInitializations: string[] = []\n  private flushing = false\n\n  constructor(priorityQueue: PriorityQueue<Ctx>) {\n    super()\n\n    this.queue = priorityQueue\n    this.queue.on(ON_REMOVE_FROM_FUTURE, () => {\n      this.scheduleFlush(0)\n    })\n  }\n\n  async register(\n    ctx: Ctx,\n    plugin: Plugin,\n    instance: CoreAnalytics\n  ): Promise<void> {\n    await Promise.resolve(plugin.load(ctx, instance))\n      .then(() => {\n        this.plugins.push(plugin)\n      })\n      .catch((err) => {\n        if (plugin.type === 'destination') {\n          this.failedInitializations.push(plugin.name)\n          console.warn(plugin.name, err)\n\n          ctx.log('warn', 'Failed to load destination', {\n            plugin: plugin.name,\n            error: err,\n          })\n\n          return\n        }\n\n        throw err\n      })\n  }\n\n  async deregister(\n    ctx: Ctx,\n    plugin: CorePlugin<Ctx>,\n    instance: CoreAnalytics\n  ): Promise<void> {\n    try {\n      if (plugin.unload) {\n        await Promise.resolve(plugin.unload(ctx, instance))\n      }\n\n      this.plugins = this.plugins.filter((p) => p.name !== plugin.name)\n    } catch (e) {\n      ctx.log('warn', 'Failed to unload destination', {\n        plugin: plugin.name,\n        error: e,\n      })\n    }\n  }\n\n  async dispatch(ctx: Ctx): Promise<Ctx> {\n    ctx.log('debug', 'Dispatching')\n    ctx.stats.increment('message_dispatched')\n\n    this.queue.push(ctx)\n    const willDeliver = this.subscribeToDelivery(ctx)\n    this.scheduleFlush(0)\n    return willDeliver\n  }\n\n  private async subscribeToDelivery(ctx: Ctx): Promise<Ctx> {\n    return new Promise((resolve) => {\n      const onDeliver = (flushed: Ctx, delivered: boolean): void => {\n        if (flushed.isSame(ctx)) {\n          this.off('flush', onDeliver)\n          if (delivered) {\n            resolve(flushed)\n          } else {\n            resolve(flushed)\n          }\n        }\n      }\n\n      this.on('flush', onDeliver)\n    })\n  }\n\n  async dispatchSingle(ctx: Ctx): Promise<Ctx> {\n    ctx.log('debug', 'Dispatching')\n    ctx.stats.increment('message_dispatched')\n\n    this.queue.updateAttempts(ctx)\n    ctx.attempts = 1\n\n    return this.deliver(ctx).catch((err) => {\n      const accepted = this.enqueuRetry(err, ctx)\n      if (!accepted) {\n        ctx.setFailedDelivery({ reason: err })\n        return ctx\n      }\n\n      return this.subscribeToDelivery(ctx)\n    })\n  }\n\n  isEmpty(): boolean {\n    return this.queue.length === 0\n  }\n\n  private scheduleFlush(timeout = 500): void {\n    if (this.flushing) {\n      return\n    }\n\n    this.flushing = true\n\n    setTimeout(() => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.flush().then(() => {\n        setTimeout(() => {\n          this.flushing = false\n\n          if (this.queue.length) {\n            this.scheduleFlush(0)\n          }\n        }, 0)\n      })\n    }, timeout)\n  }\n\n  private async deliver(ctx: Ctx): Promise<Ctx> {\n    await this.criticalTasks.done()\n\n    const start = Date.now()\n    try {\n      ctx = await this.flushOne(ctx)\n      const done = Date.now() - start\n      this.emit('delivery_success', ctx)\n      ctx.stats.gauge('delivered', done)\n      ctx.log('debug', 'Delivered', ctx.event)\n      return ctx\n    } catch (err: any) {\n      const error = err as Ctx | Error | ContextCancelation\n      ctx.log('error', 'Failed to deliver', error)\n      this.emit('delivery_failure', ctx, error)\n      ctx.stats.increment('delivery_failed')\n      throw err\n    }\n  }\n\n  private enqueuRetry(err: Error, ctx: Ctx): boolean {\n    const retriable = !(err instanceof ContextCancelation) || err.retry\n    if (!retriable) {\n      return false\n    }\n\n    return this.queue.pushWithBackoff(ctx)\n  }\n\n  async flush(): Promise<Ctx[]> {\n    if (this.queue.length === 0) {\n      return []\n    }\n\n    let ctx = this.queue.pop()\n    if (!ctx) {\n      return []\n    }\n\n    ctx.attempts = this.queue.getAttempts(ctx)\n\n    try {\n      ctx = await this.deliver(ctx)\n      this.emit('flush', ctx, true)\n    } catch (err: any) {\n      const accepted = this.enqueuRetry(err, ctx)\n\n      if (!accepted) {\n        ctx.setFailedDelivery({ reason: err })\n        this.emit('flush', ctx, false)\n      }\n\n      return []\n    }\n\n    return [ctx]\n  }\n\n  private isReady(): boolean {\n    // return this.plugins.every((p) => p.isLoaded())\n    // should we wait for every plugin to load?\n    return true\n  }\n\n  private availableExtensions(denyList: Integrations) {\n    const available = this.plugins.filter((p) => {\n      // Only filter out destination plugins or the Segment.io plugin\n      if (p.type !== 'destination' && p.name !== 'Segment.io') {\n        return true\n      }\n\n      let alternativeNameMatch: boolean | JSONObject | undefined = undefined\n      p.alternativeNames?.forEach((name) => {\n        if (denyList[name] !== undefined) {\n          alternativeNameMatch = denyList[name]\n        }\n      })\n\n      // Explicit integration option takes precedence, `All: false` does not apply to Segment.io\n      return (\n        denyList[p.name] ??\n        alternativeNameMatch ??\n        (p.name === 'Segment.io' ? true : denyList.All) !== false\n      )\n    })\n\n    const {\n      before = [],\n      enrichment = [],\n      destination = [],\n      after = [],\n    } = groupBy(available, 'type')\n\n    return {\n      before,\n      enrichment,\n      destinations: destination,\n      after,\n    }\n  }\n\n  private async flushOne(ctx: Ctx): Promise<Ctx> {\n    if (!this.isReady()) {\n      throw new Error('Not ready')\n    }\n\n    if (ctx.attempts > 1) {\n      this.emit('delivery_retry', ctx)\n    }\n\n    const { before, enrichment } = this.availableExtensions(\n      ctx.event.integrations ?? {}\n    )\n\n    for (const beforeWare of before) {\n      const temp = await ensure(ctx, beforeWare)\n      if (temp instanceof CoreContext) {\n        ctx = temp\n      }\n\n      this.emit('message_enriched', ctx, beforeWare)\n    }\n\n    for (const enrichmentWare of enrichment) {\n      const temp = await attempt(ctx, enrichmentWare)\n      if (temp instanceof CoreContext) {\n        ctx = temp\n      }\n\n      this.emit('message_enriched', ctx, enrichmentWare)\n    }\n\n    // Enrichment and before plugins can re-arrange the deny list dynamically\n    // so we need to pluck them at the end\n    const { destinations, after } = this.availableExtensions(\n      ctx.event.integrations ?? {}\n    )\n\n    await new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const attempts = destinations.map((destination) =>\n          attempt(ctx, destination)\n        )\n        Promise.all(attempts).then(resolve).catch(reject)\n      }, 0)\n    })\n\n    ctx.stats.increment('message_delivered')\n\n    this.emit('message_delivered', ctx)\n\n    const afterCalls = after.map((after) => attempt(ctx, after))\n    await Promise.all(afterCalls)\n\n    return ctx\n  }\n}\n", "import { CoreContext } from '../context'\nimport { Callback } from '../events/interfaces'\nimport { CoreEventQueue } from '../queue/event-queue'\nimport { invokeCallback } from '../callback'\nimport { Emitter } from '@segment/analytics-generic-utils'\n\nexport type DispatchOptions<Ctx extends CoreContext = CoreContext> = {\n  timeout?: number\n  debug?: boolean\n  callback?: Callback<Ctx>\n}\n\n/* The amount of time in ms to wait before invoking the callback. */\nexport const getDelay = (startTimeInEpochMS: number, timeoutInMS?: number) => {\n  const elapsedTime = Date.now() - startTimeInEpochMS\n  // increasing the timeout increases the delay by almost the same amount -- this is weird legacy behavior.\n  return Math.max((timeoutInMS ?? 300) - elapsedTime, 0)\n}\n/**\n * Push an event into the dispatch queue and invoke any callbacks.\n *\n * @param event - Segment event to enqueue.\n * @param queue - Queue to dispatch against.\n * @param emitter - This is typically an instance of \"Analytics\" -- used for metrics / progress information.\n * @param options\n */\nexport async function dispatch<\n  Ctx extends CoreContext,\n  EQ extends CoreEventQueue<Ctx>\n>(\n  ctx: Ctx,\n  queue: EQ,\n  emitter: Emitter,\n  options?: DispatchOptions<Ctx>\n): Promise<Ctx> {\n  emitter.emit('dispatch_start', ctx)\n\n  const startTime = Date.now()\n  let dispatched: Ctx\n  if (queue.isEmpty()) {\n    dispatched = await queue.dispatchSingle(ctx)\n  } else {\n    dispatched = await queue.dispatch(ctx)\n  }\n\n  if (options?.callback) {\n    dispatched = await invokeCallback(\n      dispatched,\n      options.callback,\n      getDelay(startTime, options.timeout)\n    )\n  }\n  if (options?.debug) {\n    dispatched.flush()\n  }\n\n  return dispatched\n}\n"],
  "mappings": "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",
  "names": ["Emitter", "attempt", "PriorityQueue", "attempt", "CoreLogger", "CoreStats", "NullStats", "ContextCancelation", "CoreContext", "ctx", "ValidationError", "event", "EventFactory", "_a", "_b", "CoreEventQueue", "_a", "_c", "_b", "after"]
}
