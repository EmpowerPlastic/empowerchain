{
  "version": 3,
  "sources": ["../../node_modules/@empower-plastic/empowerjs/module/codegen/empowerchain/certificates/types.js"],
  "sourcesContent": ["import * as _m0 from \"protobufjs/minimal\";\nimport { Long, isSet } from \"../../helpers\";\nexport let CertificateType = /*#__PURE__*/function (CertificateType) {\n  CertificateType[CertificateType[\"CREDIT_RETIREMENT\"] = 0] = \"CREDIT_RETIREMENT\";\n  CertificateType[CertificateType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n  return CertificateType;\n}({});\nexport const CertificateTypeSDKType = CertificateType;\nexport function certificateTypeFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"CREDIT_RETIREMENT\":\n      return CertificateType.CREDIT_RETIREMENT;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return CertificateType.UNRECOGNIZED;\n  }\n}\nexport function certificateTypeToJSON(object) {\n  switch (object) {\n    case CertificateType.CREDIT_RETIREMENT:\n      return \"CREDIT_RETIREMENT\";\n    case CertificateType.UNRECOGNIZED:\n    default:\n      return \"UNRECOGNIZED\";\n  }\n}\n/** Params defines the parameters for the module. */\n\n/** Params defines the parameters for the module. */\n\nfunction createBaseParams() {\n  return {\n    allowedIssuers: []\n  };\n}\nexport const Params = {\n  encode(message, writer = _m0.Writer.create()) {\n    for (const v of message.allowedIssuers) {\n      writer.uint32(10).string(v);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseParams();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.allowedIssuers.push(reader.string());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      allowedIssuers: Array.isArray(object === null || object === void 0 ? void 0 : object.allowedIssuers) ? object.allowedIssuers.map(e => String(e)) : []\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.allowedIssuers) {\n      obj.allowedIssuers = message.allowedIssuers.map(e => e);\n    } else {\n      obj.allowedIssuers = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$allowedIssuer;\n    const message = createBaseParams();\n    message.allowedIssuers = ((_object$allowedIssuer = object.allowedIssuers) === null || _object$allowedIssuer === void 0 ? void 0 : _object$allowedIssuer.map(e => e)) || [];\n    return message;\n  }\n};\nfunction createBaseCertificate() {\n  return {\n    id: BigInt(\"0\"),\n    type: 0,\n    owner: \"\",\n    issuer: \"\",\n    additionalData: []\n  };\n}\nexport const Certificate = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.id !== BigInt(0)) {\n      writer.uint32(8).uint64(Long.fromString(message.id.toString()));\n    }\n    if (message.type !== 0) {\n      writer.uint32(16).int32(message.type);\n    }\n    if (message.owner !== \"\") {\n      writer.uint32(26).string(message.owner);\n    }\n    if (message.issuer !== \"\") {\n      writer.uint32(34).string(message.issuer);\n    }\n    for (const v of message.additionalData) {\n      AdditionalData.encode(v, writer.uint32(42).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCertificate();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.id = BigInt(reader.uint64().toString());\n          break;\n        case 2:\n          message.type = reader.int32();\n          break;\n        case 3:\n          message.owner = reader.string();\n          break;\n        case 4:\n          message.issuer = reader.string();\n          break;\n        case 5:\n          message.additionalData.push(AdditionalData.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      id: isSet(object.id) ? BigInt(object.id.toString()) : BigInt(\"0\"),\n      type: isSet(object.type) ? certificateTypeFromJSON(object.type) : 0,\n      owner: isSet(object.owner) ? String(object.owner) : \"\",\n      issuer: isSet(object.issuer) ? String(object.issuer) : \"\",\n      additionalData: Array.isArray(object === null || object === void 0 ? void 0 : object.additionalData) ? object.additionalData.map(e => AdditionalData.fromJSON(e)) : []\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.id !== undefined && (obj.id = (message.id || BigInt(\"0\")).toString());\n    message.type !== undefined && (obj.type = certificateTypeToJSON(message.type));\n    message.owner !== undefined && (obj.owner = message.owner);\n    message.issuer !== undefined && (obj.issuer = message.issuer);\n    if (message.additionalData) {\n      obj.additionalData = message.additionalData.map(e => e ? AdditionalData.toJSON(e) : undefined);\n    } else {\n      obj.additionalData = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$type, _object$owner, _object$issuer, _object$additionalDat;\n    const message = createBaseCertificate();\n    message.id = object.id !== undefined && object.id !== null ? BigInt(object.id.toString()) : BigInt(\"0\");\n    message.type = (_object$type = object.type) !== null && _object$type !== void 0 ? _object$type : 0;\n    message.owner = (_object$owner = object.owner) !== null && _object$owner !== void 0 ? _object$owner : \"\";\n    message.issuer = (_object$issuer = object.issuer) !== null && _object$issuer !== void 0 ? _object$issuer : \"\";\n    message.additionalData = ((_object$additionalDat = object.additionalData) === null || _object$additionalDat === void 0 ? void 0 : _object$additionalDat.map(e => AdditionalData.fromPartial(e))) || [];\n    return message;\n  }\n};\nfunction createBaseAdditionalData() {\n  return {\n    key: \"\",\n    value: \"\"\n  };\n}\nexport const AdditionalData = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.key !== \"\") {\n      writer.uint32(10).string(message.key);\n    }\n    if (message.value !== \"\") {\n      writer.uint32(18).string(message.value);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseAdditionalData();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.string();\n          break;\n        case 2:\n          message.value = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      key: isSet(object.key) ? String(object.key) : \"\",\n      value: isSet(object.value) ? String(object.value) : \"\"\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.key !== undefined && (obj.key = message.key);\n    message.value !== undefined && (obj.value = message.value);\n    return obj;\n  },\n  fromPartial(object) {\n    var _object$key, _object$value;\n    const message = createBaseAdditionalData();\n    message.key = (_object$key = object.key) !== null && _object$key !== void 0 ? _object$key : \"\";\n    message.value = (_object$value = object.value) !== null && _object$value !== void 0 ? _object$value : \"\";\n    return message;\n  }\n};\nfunction createBaseIDCounters() {\n  return {\n    nextCertificateId: BigInt(\"0\")\n  };\n}\nexport const IDCounters = {\n  encode(message, writer = _m0.Writer.create()) {\n    if (message.nextCertificateId !== BigInt(0)) {\n      writer.uint32(8).uint64(Long.fromString(message.nextCertificateId.toString()));\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseIDCounters();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.nextCertificateId = BigInt(reader.uint64().toString());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    return {\n      nextCertificateId: isSet(object.nextCertificateId) ? BigInt(object.nextCertificateId.toString()) : BigInt(\"0\")\n    };\n  },\n  toJSON(message) {\n    const obj = {};\n    message.nextCertificateId !== undefined && (obj.nextCertificateId = (message.nextCertificateId || BigInt(\"0\")).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    const message = createBaseIDCounters();\n    message.nextCertificateId = object.nextCertificateId !== undefined && object.nextCertificateId !== null ? BigInt(object.nextCertificateId.toString()) : BigInt(\"0\");\n    return message;\n  }\n};"],
  "mappings": "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",
  "names": ["CertificateType", "Long"]
}
