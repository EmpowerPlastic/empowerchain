{
  "version": 3,
  "sources": ["../../node_modules/@segment/analytics-next/src/plugins/ajs-destination/index.ts", "../../node_modules/@segment/analytics-next/src/plugins/ajs-destination/loader.ts", "../../node_modules/@segment/analytics-next/src/plugins/ajs-destination/utils.ts"],
  "sourcesContent": ["import { Integrations, JSONObject } from '../../core/events'\nimport { Alias, Facade, Group, Identify, Page, Track } from '@segment/facade'\nimport { Analytics, InitOptions } from '../../core/analytics'\nimport { LegacySettings } from '../../browser'\nimport { isOffline, isOnline } from '../../core/connection'\nimport { Context, ContextCancelation } from '../../core/context'\nimport { isServer } from '../../core/environment'\nimport { DestinationPlugin, Plugin } from '../../core/plugin'\nimport { attempt } from '@segment/analytics-core'\nimport { isPlanEventEnabled } from '../../lib/is-plan-event-enabled'\nimport { mergedOptions } from '../../lib/merged-options'\nimport { pWhile } from '../../lib/p-while'\nimport { PriorityQueue } from '../../lib/priority-queue'\nimport { PersistedPriorityQueue } from '../../lib/priority-queue/persisted'\nimport {\n  applyDestinationMiddleware,\n  DestinationMiddlewareFunction,\n} from '../middleware'\nimport {\n  buildIntegration,\n  loadIntegration,\n  resolveIntegrationNameFromSource,\n  resolveVersion,\n  unloadIntegration,\n} from './loader'\nimport { LegacyIntegration, ClassicIntegrationSource } from './types'\nimport { isPlainObject } from '@segment/analytics-core'\nimport {\n  isDisabledIntegration as shouldSkipIntegration,\n  isInstallableIntegration,\n} from './utils'\nimport { recordIntegrationMetric } from '../../core/stats/metric-helpers'\n\nexport type ClassType<T> = new (...args: unknown[]) => T\n\nasync function flushQueue(\n  xt: Plugin,\n  queue: PriorityQueue<Context>\n): Promise<PriorityQueue<Context>> {\n  const failedQueue: Context[] = []\n\n  if (isOffline()) {\n    return queue\n  }\n\n  await pWhile(\n    () => queue.length > 0 && isOnline(),\n    async () => {\n      const ctx = queue.pop()\n      if (!ctx) {\n        return\n      }\n\n      const result = await attempt(ctx, xt)\n      const success = result instanceof Context\n      if (!success) {\n        failedQueue.push(ctx)\n      }\n    }\n  )\n\n  // re-add failed tasks\n  failedQueue.map((failed) => queue.pushWithBackoff(failed))\n  return queue\n}\n\nexport class LegacyDestination implements DestinationPlugin {\n  name: string\n  version: string\n  settings: JSONObject\n  options: InitOptions = {}\n  type: Plugin['type'] = 'destination'\n  middleware: DestinationMiddlewareFunction[] = []\n\n  private _ready = false\n  private _initialized = false\n  private onReady: Promise<unknown> | undefined\n  private onInitialize: Promise<unknown> | undefined\n  private disableAutoISOConversion: boolean\n\n  integrationSource?: ClassicIntegrationSource\n  integration: LegacyIntegration | undefined\n\n  buffer: PriorityQueue<Context>\n  flushing = false\n\n  constructor(\n    name: string,\n    version: string,\n    writeKey: string,\n    settings: JSONObject = {},\n    options: InitOptions,\n    integrationSource?: ClassicIntegrationSource\n  ) {\n    this.name = name\n    this.version = version\n    this.settings = { ...settings }\n    this.disableAutoISOConversion = options.disableAutoISOConversion || false\n    this.integrationSource = integrationSource\n\n    // AJS-Renderer sets an extraneous `type` setting that clobbers\n    // existing type defaults. We need to remove it if it's present\n    if (this.settings['type'] && this.settings['type'] === 'browser') {\n      delete this.settings['type']\n    }\n\n    this.options = options\n    this.buffer = options.disableClientPersistence\n      ? new PriorityQueue(4, [])\n      : new PersistedPriorityQueue(4, `${writeKey}:dest-${name}`)\n\n    this.scheduleFlush()\n  }\n\n  isLoaded(): boolean {\n    return this._ready\n  }\n\n  ready(): Promise<unknown> {\n    return this.onReady ?? Promise.resolve()\n  }\n\n  async load(ctx: Context, analyticsInstance: Analytics): Promise<void> {\n    if (this._ready || this.onReady !== undefined) {\n      return\n    }\n\n    const integrationSource =\n      this.integrationSource ??\n      (await loadIntegration(\n        ctx,\n        this.name,\n        this.version,\n        this.options.obfuscate\n      ))\n\n    this.integration = buildIntegration(\n      integrationSource,\n      this.settings,\n      analyticsInstance\n    )\n\n    this.onReady = new Promise((resolve) => {\n      const onReadyFn = (): void => {\n        this._ready = true\n        resolve(true)\n      }\n\n      this.integration!.once('ready', onReadyFn)\n    })\n\n    this.onInitialize = new Promise((resolve) => {\n      const onInit = (): void => {\n        this._initialized = true\n        resolve(true)\n      }\n\n      this.integration!.on('initialize', onInit)\n    })\n\n    try {\n      recordIntegrationMetric(ctx, {\n        integrationName: this.name,\n        methodName: 'initialize',\n        type: 'classic',\n      })\n      this.integration.initialize()\n    } catch (error) {\n      recordIntegrationMetric(ctx, {\n        integrationName: this.name,\n        methodName: 'initialize',\n        type: 'classic',\n        didError: true,\n      })\n      throw error\n    }\n  }\n\n  unload(_ctx: Context, _analyticsInstance: Analytics): Promise<void> {\n    return unloadIntegration(this.name, this.version, this.options.obfuscate)\n  }\n\n  addMiddleware(...fn: DestinationMiddlewareFunction[]): void {\n    this.middleware = this.middleware.concat(...fn)\n  }\n\n  shouldBuffer(ctx: Context): boolean {\n    return (\n      // page events can't be buffered because of destinations that automatically add page views\n      ctx.event.type !== 'page' &&\n      (isOffline() || this._ready === false || this._initialized === false)\n    )\n  }\n\n  private async send<T extends Facade>(\n    ctx: Context,\n    clz: ClassType<T>,\n    eventType: 'track' | 'identify' | 'page' | 'alias' | 'group'\n  ): Promise<Context> {\n    if (this.shouldBuffer(ctx)) {\n      this.buffer.push(ctx)\n      this.scheduleFlush()\n      return ctx\n    }\n\n    const plan = this.options?.plan?.track\n    const ev = ctx.event.event\n\n    if (plan && ev && this.name !== 'Segment.io') {\n      // events are always sent to segment (legacy behavior)\n      const planEvent = plan[ev]\n      if (!isPlanEventEnabled(plan, planEvent)) {\n        ctx.updateEvent('integrations', {\n          ...ctx.event.integrations,\n          All: false,\n          'Segment.io': true,\n        })\n        ctx.cancel(\n          new ContextCancelation({\n            retry: false,\n            reason: `Event ${ev} disabled for integration ${this.name} in tracking plan`,\n            type: 'Dropped by plan',\n          })\n        )\n        return ctx\n      } else {\n        ctx.updateEvent('integrations', {\n          ...ctx.event.integrations,\n          ...planEvent?.integrations,\n        })\n      }\n\n      if (planEvent?.enabled && planEvent?.integrations![this.name] === false) {\n        ctx.cancel(\n          new ContextCancelation({\n            retry: false,\n            reason: `Event ${ev} disabled for integration ${this.name} in tracking plan`,\n            type: 'Dropped by plan',\n          })\n        )\n        return ctx\n      }\n    }\n\n    const afterMiddleware = await applyDestinationMiddleware(\n      this.name,\n      ctx.event,\n      this.middleware\n    )\n\n    if (afterMiddleware === null) {\n      return ctx\n    }\n\n    const event = new clz(afterMiddleware, {\n      traverse: !this.disableAutoISOConversion,\n    })\n\n    recordIntegrationMetric(ctx, {\n      integrationName: this.name,\n      methodName: eventType,\n      type: 'classic',\n    })\n\n    try {\n      if (this.integration) {\n        await this.integration.invoke.call(this.integration, eventType, event)\n      }\n    } catch (err) {\n      recordIntegrationMetric(ctx, {\n        integrationName: this.name,\n        methodName: eventType,\n        type: 'classic',\n        didError: true,\n      })\n      throw err\n    }\n\n    return ctx\n  }\n\n  async track(ctx: Context): Promise<Context> {\n    return this.send(ctx, Track as ClassType<Track>, 'track')\n  }\n\n  async page(ctx: Context): Promise<Context> {\n    if (this.integration?._assumesPageview && !this._initialized) {\n      this.integration.initialize()\n    }\n\n    return this.onInitialize!.then(() => {\n      return this.send(ctx, Page as ClassType<Page>, 'page')\n    })\n  }\n\n  async identify(ctx: Context): Promise<Context> {\n    return this.send(ctx, Identify as ClassType<Identify>, 'identify')\n  }\n\n  async alias(ctx: Context): Promise<Context> {\n    return this.send(ctx, Alias as ClassType<Alias>, 'alias')\n  }\n\n  async group(ctx: Context): Promise<Context> {\n    return this.send(ctx, Group as ClassType<Group>, 'group')\n  }\n\n  private scheduleFlush(): void {\n    if (this.flushing) {\n      return\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    setTimeout(async () => {\n      this.flushing = true\n      this.buffer = await flushQueue(this, this.buffer)\n      this.flushing = false\n\n      if (this.buffer.todo > 0) {\n        this.scheduleFlush()\n      }\n    }, Math.random() * 5000)\n  }\n}\n\nexport function ajsDestinations(\n  writeKey: string,\n  settings: LegacySettings,\n  globalIntegrations: Integrations = {},\n  options: InitOptions = {},\n  routingMiddleware?: DestinationMiddlewareFunction,\n  legacyIntegrationSources?: ClassicIntegrationSource[]\n): LegacyDestination[] {\n  if (isServer()) {\n    return []\n  }\n\n  if (settings.plan) {\n    options = options ?? {}\n    options.plan = settings.plan\n  }\n\n  const routingRules = settings.middlewareSettings?.routingRules ?? []\n  const remoteIntegrationsConfig = settings.integrations\n  const localIntegrationsConfig = options.integrations\n  // merged remote CDN settings with user provided options\n  const integrationOptions = mergedOptions(settings, options ?? {}) as Record<\n    string,\n    JSONObject\n  >\n\n  const adhocIntegrationSources = legacyIntegrationSources?.reduce(\n    (acc, integrationSource) => ({\n      ...acc,\n      [resolveIntegrationNameFromSource(integrationSource)]: integrationSource,\n    }),\n    {} as Record<string, ClassicIntegrationSource>\n  )\n\n  const installableIntegrations = new Set([\n    // Remotely configured installable integrations\n    ...Object.keys(remoteIntegrationsConfig).filter((name) =>\n      isInstallableIntegration(name, remoteIntegrationsConfig[name])\n    ),\n\n    // Directly provided integration sources are only installable if settings for them are available\n    ...Object.keys(adhocIntegrationSources || {}).filter(\n      (name) =>\n        isPlainObject(remoteIntegrationsConfig[name]) ||\n        isPlainObject(localIntegrationsConfig?.[name])\n    ),\n  ])\n\n  return Array.from(installableIntegrations)\n    .filter((name) => !shouldSkipIntegration(name, globalIntegrations))\n    .map((name) => {\n      const integrationSettings = remoteIntegrationsConfig[name]\n      const version = resolveVersion(integrationSettings)\n      const destination = new LegacyDestination(\n        name,\n        version,\n        writeKey,\n        integrationOptions[name],\n        options,\n        adhocIntegrationSources?.[name]\n      )\n\n      const routing = routingRules.filter(\n        (rule) => rule.destinationName === name\n      )\n      if (routing.length > 0 && routingMiddleware) {\n        destination.addMiddleware(routingMiddleware)\n      }\n\n      return destination\n    })\n}\n", "import { Analytics } from '../../core/analytics'\nimport { LegacyIntegrationConfiguration } from '../../browser'\nimport { getNextIntegrationsURL } from '../../lib/parse-cdn'\nimport { Context } from '../../core/context'\nimport { User } from '../../core/user'\nimport { loadScript, unloadScript } from '../../lib/load-script'\nimport {\n  LegacyIntegration,\n  ClassicIntegrationBuilder,\n  ClassicIntegrationSource,\n} from './types'\n\nfunction normalizeName(name: string): string {\n  return name.toLowerCase().replace('.', '').replace(/\\s+/g, '-')\n}\n\nfunction obfuscatePathName(pathName: string, obfuscate = false): string | void {\n  return obfuscate ? btoa(pathName).replace(/=/g, '') : undefined\n}\n\nexport function resolveIntegrationNameFromSource(\n  integrationSource: ClassicIntegrationSource\n) {\n  return (\n    'Integration' in integrationSource\n      ? integrationSource.Integration\n      : integrationSource\n  ).prototype.name\n}\n\nfunction recordLoadMetrics(fullPath: string, ctx: Context, name: string): void {\n  try {\n    const [metric] =\n      window?.performance?.getEntriesByName(fullPath, 'resource') ?? []\n    // we assume everything that took under 100ms is cached\n    metric &&\n      ctx.stats.gauge('legacy_destination_time', Math.round(metric.duration), [\n        name,\n        ...(metric.duration < 100 ? ['cached'] : []),\n      ])\n  } catch (_) {\n    // not available\n  }\n}\n\nexport function buildIntegration(\n  integrationSource: ClassicIntegrationSource,\n  integrationSettings: { [key: string]: any },\n  analyticsInstance: Analytics\n): LegacyIntegration {\n  let integrationCtr: ClassicIntegrationBuilder\n  // GA and Appcues use a different interface to instantiating integrations\n  if ('Integration' in integrationSource) {\n    const analyticsStub = {\n      user: (): User => analyticsInstance.user(),\n      addIntegration: (): void => {},\n    }\n\n    integrationSource(analyticsStub)\n    integrationCtr = integrationSource.Integration\n  } else {\n    integrationCtr = integrationSource\n  }\n\n  const integration = new integrationCtr(integrationSettings)\n  integration.analytics = analyticsInstance\n  return integration\n}\n\nexport async function loadIntegration(\n  ctx: Context,\n  name: string,\n  version: string,\n  obfuscate?: boolean\n): Promise<ClassicIntegrationSource> {\n  const pathName = normalizeName(name)\n  const obfuscatedPathName = obfuscatePathName(pathName, obfuscate)\n  const path = getNextIntegrationsURL()\n\n  const fullPath = `${path}/integrations/${\n    obfuscatedPathName ?? pathName\n  }/${version}/${obfuscatedPathName ?? pathName}.dynamic.js.gz`\n\n  try {\n    await loadScript(fullPath)\n    recordLoadMetrics(fullPath, ctx, name)\n  } catch (err) {\n    ctx.stats.gauge('legacy_destination_time', -1, [`plugin:${name}`, `failed`])\n    throw err\n  }\n\n  // @ts-ignore\n  const deps: string[] = window[`${pathName}Deps`]\n  await Promise.all(deps.map((dep) => loadScript(path + dep + '.gz')))\n\n  // @ts-ignore\n  window[`${pathName}Loader`]()\n\n  return window[\n    // @ts-ignore\n    `${pathName}Integration`\n  ] as ClassicIntegrationSource\n}\n\nexport async function unloadIntegration(\n  name: string,\n  version: string,\n  obfuscate?: boolean\n): Promise<void> {\n  const path = getNextIntegrationsURL()\n  const pathName = normalizeName(name)\n  const obfuscatedPathName = obfuscatePathName(name, obfuscate)\n\n  const fullPath = `${path}/integrations/${\n    obfuscatedPathName ?? pathName\n  }/${version}/${obfuscatedPathName ?? pathName}.dynamic.js.gz`\n\n  return unloadScript(fullPath)\n}\n\nexport function resolveVersion(\n  settings?: LegacyIntegrationConfiguration\n): string {\n  return (\n    settings?.versionSettings?.override ??\n    settings?.versionSettings?.version ??\n    'latest'\n  )\n}\n", "import { Integrations } from '@segment/analytics-core'\nimport { LegacyIntegrationConfiguration } from '../..'\n\nexport const isInstallableIntegration = (\n  name: string,\n  integrationSettings: LegacyIntegrationConfiguration\n) => {\n  const { type, bundlingStatus, versionSettings } = integrationSettings\n  // We use `!== 'unbundled'` (versus `=== 'bundled'`) to be inclusive of\n  // destinations without a defined value for `bundlingStatus`\n  const deviceMode =\n    bundlingStatus !== 'unbundled' &&\n    (type === 'browser' || versionSettings?.componentTypes?.includes('browser'))\n\n  // checking for iterable is a quick fix we need in place to prevent\n  // errors showing Iterable as a failed destiantion. Ideally, we should\n  // fix the Iterable metadata instead, but that's a longer process.\n  return !name.startsWith('Segment') && name !== 'Iterable' && deviceMode\n}\n\nexport const isDisabledIntegration = (\n  integrationName: string,\n  globalIntegrations: Integrations\n) => {\n  const allDisableAndNotDefined =\n    globalIntegrations.All === false &&\n    globalIntegrations[integrationName] === undefined\n\n  return (\n    globalIntegrations[integrationName] === false || allDisableAndNotDefined\n  )\n}\n"],
  "mappings": "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",
  "names": ["_a", "LegacyDestination", "_a"]
}
