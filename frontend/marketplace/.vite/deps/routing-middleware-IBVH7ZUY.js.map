{
  "version": 3,
  "sources": ["../../node_modules/tiny-hashes/md5/md5.js", "../../node_modules/dlv/index.js", "../../node_modules/@stdlib/constants-float64-pinf/lib/index.js", "../../node_modules/@stdlib/number-ctor/lib/number.js", "../../node_modules/@stdlib/number-ctor/lib/index.js", "../../node_modules/@stdlib/constants-float64-ninf/lib/index.js", "../../node_modules/@stdlib/constants-float64-exponent-bias/lib/index.js", "../../node_modules/@stdlib/constants-float64-max-base2-exponent/lib/index.js", "../../node_modules/@stdlib/constants-float64-max-base2-exponent-subnormal/lib/index.js", "../../node_modules/@stdlib/constants-float64-min-base2-exponent-subnormal/lib/index.js", "../../node_modules/@stdlib/math-base-assert-is-nan/lib/main.js", "../../node_modules/@stdlib/math-base-assert-is-nan/lib/index.js", "../../node_modules/@stdlib/math-base-assert-is-infinite/lib/main.js", "../../node_modules/@stdlib/math-base-assert-is-infinite/lib/index.js", "../../node_modules/@stdlib/constants-float64-high-word-sign-mask/lib/index.js", "../../node_modules/@stdlib/constants-float64-high-word-abs-mask/lib/index.js", "../../node_modules/@stdlib/utils-define-property/lib/define_property.js", "../../node_modules/@stdlib/utils-define-property/lib/has_define_property_support.js", "../../node_modules/@stdlib/utils-define-property/lib/builtin.js", "../../node_modules/@stdlib/utils-define-property/lib/polyfill.js", "../../node_modules/@stdlib/utils-define-property/lib/index.js", "../../node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/main.js", "../../node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/index.js", "../../node_modules/@stdlib/assert-has-symbol-support/lib/main.js", "../../node_modules/@stdlib/assert-has-symbol-support/lib/index.js", "../../node_modules/@stdlib/assert-has-tostringtag-support/lib/main.js", "../../node_modules/@stdlib/assert-has-tostringtag-support/lib/index.js", "../../node_modules/@stdlib/utils-native-class/lib/tostring.js", "../../node_modules/@stdlib/utils-native-class/lib/native_class.js", "../../node_modules/@stdlib/assert-has-own-property/lib/main.js", "../../node_modules/@stdlib/assert-has-own-property/lib/index.js", "../../node_modules/@stdlib/utils-native-class/lib/tostringtag.js", "../../node_modules/@stdlib/utils-native-class/lib/polyfill.js", "../../node_modules/@stdlib/utils-native-class/lib/index.js", "../../node_modules/@stdlib/assert-is-uint32array/lib/main.js", "../../node_modules/@stdlib/assert-is-uint32array/lib/index.js", "../../node_modules/@stdlib/constants-uint32-max/lib/index.js", "../../node_modules/@stdlib/assert-has-uint32array-support/lib/uint32array.js", "../../node_modules/@stdlib/assert-has-uint32array-support/lib/main.js", "../../node_modules/@stdlib/assert-has-uint32array-support/lib/index.js", "../../node_modules/@stdlib/array-uint32/lib/uint32array.js", "../../node_modules/@stdlib/array-uint32/lib/polyfill.js", "../../node_modules/@stdlib/array-uint32/lib/index.js", "../../node_modules/@stdlib/assert-is-float64array/lib/main.js", "../../node_modules/@stdlib/assert-is-float64array/lib/index.js", "../../node_modules/@stdlib/assert-has-float64array-support/lib/float64array.js", "../../node_modules/@stdlib/assert-has-float64array-support/lib/main.js", "../../node_modules/@stdlib/assert-has-float64array-support/lib/index.js", "../../node_modules/@stdlib/array-float64/lib/float64array.js", "../../node_modules/@stdlib/array-float64/lib/polyfill.js", "../../node_modules/@stdlib/array-float64/lib/index.js", "../../node_modules/@stdlib/assert-is-uint8array/lib/main.js", "../../node_modules/@stdlib/assert-is-uint8array/lib/index.js", "../../node_modules/@stdlib/constants-uint8-max/lib/index.js", "../../node_modules/@stdlib/assert-has-uint8array-support/lib/uint8array.js", "../../node_modules/@stdlib/assert-has-uint8array-support/lib/main.js", "../../node_modules/@stdlib/assert-has-uint8array-support/lib/index.js", "../../node_modules/@stdlib/array-uint8/lib/uint8array.js", "../../node_modules/@stdlib/array-uint8/lib/polyfill.js", "../../node_modules/@stdlib/array-uint8/lib/index.js", "../../node_modules/@stdlib/assert-is-uint16array/lib/main.js", "../../node_modules/@stdlib/assert-is-uint16array/lib/index.js", "../../node_modules/@stdlib/constants-uint16-max/lib/index.js", "../../node_modules/@stdlib/assert-has-uint16array-support/lib/uint16array.js", "../../node_modules/@stdlib/assert-has-uint16array-support/lib/main.js", "../../node_modules/@stdlib/assert-has-uint16array-support/lib/index.js", "../../node_modules/@stdlib/array-uint16/lib/uint16array.js", "../../node_modules/@stdlib/array-uint16/lib/polyfill.js", "../../node_modules/@stdlib/array-uint16/lib/index.js", "../../node_modules/@stdlib/assert-is-little-endian/lib/ctors.js", "../../node_modules/@stdlib/assert-is-little-endian/lib/main.js", "../../node_modules/@stdlib/assert-is-little-endian/lib/index.js", "../../node_modules/@stdlib/number-float64-base-to-words/lib/indices.js", "../../node_modules/@stdlib/number-float64-base-to-words/lib/assign.js", "../../node_modules/@stdlib/number-float64-base-to-words/lib/main.js", "../../node_modules/@stdlib/number-float64-base-to-words/lib/index.js", "../../node_modules/@stdlib/number-float64-base-get-high-word/lib/high.js", "../../node_modules/@stdlib/number-float64-base-get-high-word/lib/main.js", "../../node_modules/@stdlib/number-float64-base-get-high-word/lib/index.js", "../../node_modules/@stdlib/number-float64-base-from-words/lib/indices.js", "../../node_modules/@stdlib/number-float64-base-from-words/lib/main.js", "../../node_modules/@stdlib/number-float64-base-from-words/lib/index.js", "../../node_modules/@stdlib/math-base-special-copysign/lib/main.js", "../../node_modules/@stdlib/math-base-special-copysign/lib/index.js", "../../node_modules/@stdlib/constants-float64-smallest-normal/lib/index.js", "../../node_modules/@stdlib/math-base-special-abs/lib/main.js", "../../node_modules/@stdlib/math-base-special-abs/lib/index.js", "../../node_modules/@stdlib/number-float64-base-normalize/lib/assign.js", "../../node_modules/@stdlib/number-float64-base-normalize/lib/main.js", "../../node_modules/@stdlib/number-float64-base-normalize/lib/index.js", "../../node_modules/@stdlib/constants-float64-high-word-exponent-mask/lib/index.js", "../../node_modules/@stdlib/number-float64-base-exponent/lib/main.js", "../../node_modules/@stdlib/number-float64-base-exponent/lib/index.js", "../../node_modules/@stdlib/math-base-special-ldexp/lib/ldexp.js", "../../node_modules/@stdlib/math-base-special-ldexp/lib/index.js", "../../node_modules/dset/dist/index.js", "../../node_modules/@segment/tsub/src/unset.ts", "../../node_modules/@segment/tsub/src/transformers.ts", "../../node_modules/@segment/tsub/src/matchers.ts", "../../node_modules/@segment/tsub/src/store.ts", "../../node_modules/@segment/tsub/src/index.ts", "../../node_modules/@segment/analytics-next/src/plugins/routing-middleware/index.ts"],
  "sourcesContent": ["// See \"precomputation\" in notes\nvar k = [], i = 0;\n\nfor (; i < 64;) {\n  k[i] = 0 | Math.sin(++i % Math.PI) * 4294967296;\n  // k[i] = 0 | (Math.abs(Math.sin(++i)) * 4294967296);\n}\n\nexport default function md5(s) {\n  var b, c, d,\n    h = [ b = 0x67452301, c = 0xEFCDAB89, ~b, ~c ],\n    words = [],\n    j = unescape(encodeURI(s)) + '\\x80',\n    a = j.length;\n\n  s = (--a / 4 + 2) | 15;\n\n  // See \"Length bits\" in notes\n  words[--s] = a * 8;\n\n  for (; ~a;) { // a !== -1\n    words[a >> 2] |= j.charCodeAt(a) << 8 * a--;\n  }\n\n\n  for (i = j = 0; i < s; i += 16) {\n    a = h;\n\n    for (; j < 64;\n      a = [\n        d = a[3],\n        (\n          b +\n          ((d =\n            a[0] +\n            [\n              b & c | ~b & d,\n              d & b | ~d & c,\n              b ^ c ^ d,\n              c ^ (b | ~d)\n            ][a = j >> 4] +\n            k[j] +\n            ~~words[i | [\n              j,\n              5 * j + 1,\n              3 * j + 5,\n              7 * j\n            ][a] & 15]\n          ) << (a = [\n            7, 12, 17, 22,\n            5,  9, 14, 20,\n            4, 11, 16, 23,\n            6, 10, 15, 21\n          ][4 * a + j++ % 4]) | d >>> -a)\n        ),\n        b,\n        c\n      ]\n    ) {\n      b = a[1] | 0;\n      c = a[2];\n    }\n\n    // See \"Integer safety\" in notes\n    for (j = 4; j;) h[--j] += a[j];\n\n    // j === 0\n  }\n\n  for (s = ''; j < 32;) {\n    s += ((h[j >> 3] >> ((1 ^ j++) * 4)) & 15).toString(16);\n    // s += ((h[j >> 3] >> (4 ^ 4 * j++)) & 15).toString(16);\n  }\n\n  return s;\n}\n", "export default function dlv(obj, key, def, p, undef) {\n\tkey = key.split ? key.split('.') : key;\n\tfor (p = 0; p < key.length; p++) {\n\t\tobj = obj ? obj[key[p]] : undef;\n\t}\n\treturn obj === undef ? def : obj;\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* @module @stdlib/constants-float64-pinf\n* @type {number}\n*\n* @example\n* var FLOAT64_PINF = require( '@stdlib/constants-float64-pinf' );\n* // returns Infinity\n*/\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.POSITIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_PINF;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nmodule.exports = Number; // eslint-disable-line stdlib/require-globals\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Constructor which returns a `Number` object.\n*\n* @module @stdlib/number-ctor\n*\n* @example\n* var Number = require( '@stdlib/number-ctor' );\n*\n* var v = new Number( 10.0 );\n* // returns <Number>\n*/\n\n// MODULES //\n\nvar Number = require( './number.js' );\n\n\n// EXPORTS //\n\nmodule.exports = Number;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* @module @stdlib/constants-float64-ninf\n* @type {number}\n*\n* @example\n* var FLOAT64_NINF = require( '@stdlib/constants-float64-ninf' );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nvar Number = require( '@stdlib/number-ctor' );\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.NEGATIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_NINF = Number.NEGATIVE_INFINITY;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_NINF;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The bias of a double-precision floating-point number's exponent.\n*\n* @module @stdlib/constants-float64-exponent-bias\n* @type {integer32}\n*\n* @example\n* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants-float64-exponent-bias' );\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* Bias of a double-precision floating-point number's exponent.\n*\n* ## Notes\n*\n* The bias can be computed via\n*\n* ```tex\n* \\mathrm{bias} = 2^{k-1} - 1\n* ```\n*\n* where \\\\(k\\\\) is the number of bits in the exponent; here, \\\\(k = 11\\\\).\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_EXPONENT_BIAS;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-base2-exponent\n* @type {integer32}\n*\n* @example\n* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/constants-float64-max-base2-exponent' );\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* ```text\n* 11111111110 => 2046 - BIAS = 1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MAX_BASE2_EXPONENT;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants-float64-max-base2-exponent-subnormal' );\n* // returns -1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* 00000000000 => 0 - BIAS = -1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default -1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-min-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants-float64-min-base2-exponent-subnormal' );\n* // returns -1074\n*/\n\n\n// MAIN //\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* -(BIAS+(52-1)) = -(1023+51) = -1074\n* ```\n*\n* where `BIAS = 1023` and `52` is the number of digits in the significand.\n*\n* @constant\n* @type {integer32}\n* @default -1074\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is `NaN`.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 7.0 );\n* // returns false\n*/\nfunction isnan( x ) {\n\treturn ( x !== x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isnan;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a double-precision floating-point numeric value is `NaN`.\n*\n* @module @stdlib/math-base-assert-is-nan\n*\n* @example\n* var isnan = require( '@stdlib/math-base-assert-is-nan' );\n*\n* var bool = isnan( NaN );\n* // returns true\n*\n* bool = isnan( 7.0 );\n* // returns false\n*/\n\n// MODULES //\n\nvar isnan = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isnan;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is infinite.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is infinite\n*\n* @example\n* var bool = isInfinite( Infinity );\n* // returns true\n*\n* @example\n* var bool = isInfinite( -Infinity );\n* // returns true\n*\n* @example\n* var bool = isInfinite( 5.0 );\n* // returns false\n*\n* @example\n* var bool = isInfinite( NaN );\n* // returns false\n*/\nfunction isInfinite( x ) {\n\treturn (x === PINF || x === NINF);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isInfinite;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a double-precision floating-point numeric value is infinite.\n*\n* @module @stdlib/math-base-assert-is-infinite\n*\n* @example\n* var isInfinite = require( '@stdlib/math-base-assert-is-infinite' );\n*\n* var bool = isInfinite( Infinity );\n* // returns true\n*\n* bool = isInfinite( -Infinity );\n* // returns true\n*\n* bool = isInfinite( 5.0 );\n* // returns false\n*\n* bool = isInfinite( NaN );\n* // returns false\n*/\n\n// MODULES //\n\nvar isInfinite = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isInfinite;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the sign bit of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-sign-mask\n* @type {uinteger32}\n*\n* @example\n* var FLOAT64_HIGH_WORD_SIGN_MASK = require( '@stdlib/constants-float64-high-word-sign-mask' );\n* // returns 2147483648\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the sign bit of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the sign bot of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483648 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 1 00000000000 00000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x80000000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_SIGN_MASK = 0x80000000>>>0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_HIGH_WORD_SIGN_MASK;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for excluding the sign bit of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-abs-mask\n* @type {uinteger32}\n*\n* @example\n* var FLOAT64_HIGH_WORD_ABS_MASK = require( '@stdlib/constants-float64-high-word-abs-mask' );\n* // returns 2147483647\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for excluding the sign bit of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for excluding the sign bit of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483647 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111111 11111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7fffffff\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_ABS_MASK = 0x7fffffff>>>0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_HIGH_WORD_ABS_MASK;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Object.defineProperty === 'function' ) ? Object.defineProperty : null;\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( './define_property.js' );\n\n\n// MAIN //\n\n/**\n* Tests for `Object.defineProperty` support.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support\n*\n* @example\n* var bool = hasDefinePropertySupport();\n* // returns <boolean>\n*/\nfunction hasDefinePropertySupport() {\n\t// Test basic support...\n\ttry {\n\t\tdefineProperty( {}, 'x', {} );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasDefinePropertySupport;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @name defineProperty\n* @type {Function}\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nvar defineProperty = Object.defineProperty;\n\n\n// EXPORTS //\n\nmodule.exports = defineProperty;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle, no-proto */\n\n'use strict';\n\n// VARIABLES //\n\nvar objectProtoype = Object.prototype;\nvar toStr = objectProtoype.toString;\nvar defineGetter = objectProtoype.__defineGetter__;\nvar defineSetter = objectProtoype.__defineSetter__;\nvar lookupGetter = objectProtoype.__lookupGetter__;\nvar lookupSetter = objectProtoype.__lookupSetter__;\n\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @param {Object} obj - object on which to define the property\n* @param {string} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nfunction defineProperty( obj, prop, descriptor ) {\n\tvar prototype;\n\tvar hasValue;\n\tvar hasGet;\n\tvar hasSet;\n\n\tif ( typeof obj !== 'object' || obj === null || toStr.call( obj ) === '[object Array]' ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an object. Value: `' + obj + '`.' );\n\t}\n\tif ( typeof descriptor !== 'object' || descriptor === null || toStr.call( descriptor ) === '[object Array]' ) {\n\t\tthrow new TypeError( 'invalid argument. Property descriptor must be an object. Value: `' + descriptor + '`.' );\n\t}\n\thasValue = ( 'value' in descriptor );\n\tif ( hasValue ) {\n\t\tif (\n\t\t\tlookupGetter.call( obj, prop ) ||\n\t\t\tlookupSetter.call( obj, prop )\n\t\t) {\n\t\t\t// Override `__proto__` to avoid touching inherited accessors:\n\t\t\tprototype = obj.__proto__;\n\t\t\tobj.__proto__ = objectProtoype;\n\n\t\t\t// Delete property as existing getters/setters prevent assigning value to specified property:\n\t\t\tdelete obj[ prop ];\n\t\t\tobj[ prop ] = descriptor.value;\n\n\t\t\t// Restore original prototype:\n\t\t\tobj.__proto__ = prototype;\n\t\t} else {\n\t\t\tobj[ prop ] = descriptor.value;\n\t\t}\n\t}\n\thasGet = ( 'get' in descriptor );\n\thasSet = ( 'set' in descriptor );\n\n\tif ( hasValue && ( hasGet || hasSet ) ) {\n\t\tthrow new Error( 'invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.' );\n\t}\n\n\tif ( hasGet && defineGetter ) {\n\t\tdefineGetter.call( obj, prop, descriptor.get );\n\t}\n\tif ( hasSet && defineSetter ) {\n\t\tdefineSetter.call( obj, prop, descriptor.set );\n\t}\n\treturn obj;\n}\n\n\n// EXPORTS //\n\nmodule.exports = defineProperty;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Define (or modify) an object property.\n*\n* @module @stdlib/utils-define-property\n*\n* @example\n* var defineProperty = require( '@stdlib/utils-define-property' );\n*\n* var obj = {};\n* defineProperty( obj, 'foo', {\n*     'value': 'bar',\n*     'writable': false,\n*     'configurable': false,\n*     'enumerable': false\n* });\n* obj.foo = 'boop'; // => throws\n*/\n\n// MODULES //\n\nvar hasDefinePropertySupport = require( './has_define_property_support.js' );\nvar builtin = require( './builtin.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar defineProperty;\nif ( hasDefinePropertySupport() ) {\n\tdefineProperty = builtin;\n} else {\n\tdefineProperty = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = defineProperty;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\n\n\n// MAIN //\n\n/**\n* Defines a non-enumerable read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setNonEnumerableReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setNonEnumerableReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nmodule.exports = setNonEnumerableReadOnly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Define a non-enumerable read-only property.\n*\n* @module @stdlib/utils-define-nonenumerable-read-only-property\n*\n* @example\n* var setNonEnumerableReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\n*\n* var obj = {};\n*\n* setNonEnumerableReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\n\n// MODULES //\n\nvar setNonEnumerableReadOnly = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = setNonEnumerableReadOnly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests for native `Symbol` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Symbol` support\n*\n* @example\n* var bool = hasSymbolSupport();\n* // returns <boolean>\n*/\nfunction hasSymbolSupport() {\n\treturn (\n\t\ttypeof Symbol === 'function' &&\n\t\ttypeof Symbol( 'foo' ) === 'symbol'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasSymbolSupport;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test for native `Symbol` support.\n*\n* @module @stdlib/assert-has-symbol-support\n*\n* @example\n* var hasSymbolSupport = require( '@stdlib/assert-has-symbol-support' );\n*\n* var bool = hasSymbolSupport();\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar hasSymbolSupport = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasSymbolSupport;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasSymbols = require( '@stdlib/assert-has-symbol-support' );\n\n\n// VARIABLES //\n\nvar FLG = hasSymbols();\n\n\n// MAIN //\n\n/**\n* Tests for native `toStringTag` support.\n*\n* @returns {boolean} boolean indicating if an environment has `toStringTag` support\n*\n* @example\n* var bool = hasToStringTagSupport();\n* // returns <boolean>\n*/\nfunction hasToStringTagSupport() {\n\treturn ( FLG && typeof Symbol.toStringTag === 'symbol' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasToStringTagSupport;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test for native `toStringTag` support.\n*\n* @module @stdlib/assert-has-tostringtag-support\n*\n* @example\n* var hasToStringTagSupport = require( '@stdlib/assert-has-tostringtag-support' );\n*\n* var bool = hasToStringTagSupport();\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar hasToStringTagSupport = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasToStringTagSupport;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar toStr = Object.prototype.toString;\n\n\n// EXPORTS //\n\nmodule.exports = toStr;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar toStr = require( './tostring.js' );\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\treturn toStr.call( v );\n}\n\n\n// EXPORTS //\n\nmodule.exports = nativeClass;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\nvar has = Object.prototype.hasOwnProperty;\n\n\n// MAIN //\n\n/**\n* Tests if an object has a specified property.\n*\n* @param {*} value - value to test\n* @param {*} property - property to test\n* @returns {boolean} boolean indicating if an object has a specified property\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'boop' );\n* // returns true\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'bap' );\n* // returns false\n*/\nfunction hasOwnProp( value, property ) {\n\tif (\n\t\tvalue === void 0 ||\n\t\tvalue === null\n\t) {\n\t\treturn false;\n\t}\n\treturn has.call( value, property );\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasOwnProp;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test whether an object has a specified property.\n*\n* @module @stdlib/assert-has-own-property\n*\n* @example\n* var hasOwnProp = require( '@stdlib/assert-has-own-property' );\n*\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'boop' );\n* // returns true\n*\n* bool = hasOwnProp( beep, 'bop' );\n* // returns false\n*/\n\n// MODULES //\n\nvar hasOwnProp = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasOwnProp;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';\n\n\n// EXPORTS //\n\nmodule.exports = toStrTag;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar toStringTag = require( './tostringtag.js' );\nvar toStr = require( './tostring.js' );\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\tvar isOwn;\n\tvar tag;\n\tvar out;\n\n\tif ( v === null || v === void 0 ) {\n\t\treturn toStr.call( v );\n\t}\n\ttag = v[ toStringTag ];\n\tisOwn = hasOwnProp( v, toStringTag );\n\n\t// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.\n\ttry {\n\t\tv[ toStringTag ] = void 0;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn toStr.call( v );\n\t}\n\tout = toStr.call( v );\n\n\tif ( isOwn ) {\n\t\tv[ toStringTag ] = tag;\n\t} else {\n\t\tdelete v[ toStringTag ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nativeClass;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string value indicating a specification defined classification of an object.\n*\n* @module @stdlib/utils-native-class\n*\n* @example\n* var nativeClass = require( '@stdlib/utils-native-class' );\n*\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* function Beep() {\n*     return this;\n* }\n* str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\n\n// MODULES //\n\nvar hasToStringTag = require( '@stdlib/assert-has-tostringtag-support' );\nvar builtin = require( './native_class.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar nativeClass;\nif ( hasToStringTag() ) {\n\tnativeClass = polyfill;\n} else {\n\tnativeClass = builtin;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nativeClass;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nativeClass = require( '@stdlib/utils-native-class' );\n\n\n// VARIABLES //\n\nvar hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint32Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint32Array\n*\n* @example\n* var bool = isUint32Array( new Uint32Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint32Array( [] );\n* // returns false\n*/\nfunction isUint32Array( value ) {\n\treturn (\n\t\t( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint32Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isUint32Array;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a Uint32Array.\n*\n* @module @stdlib/assert-is-uint32array\n*\n* @example\n* var isUint32Array = require( '@stdlib/assert-is-uint32array' );\n*\n* var bool = isUint32Array( new Uint32Array( 10 ) );\n* // returns true\n*\n* bool = isUint32Array( [] );\n* // returns false\n*/\n\n// MODULES //\n\nvar isUint32Array = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isUint32Array;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* @module @stdlib/constants-uint32-max\n* @type {uinteger32}\n*\n* @example\n* var UINT32_MAX = require( '@stdlib/constants-uint32-max' );\n* // returns 4294967295\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{32} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111111111111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 4294967295\n*/\nvar UINT32_MAX = 4294967295;\n\n\n// EXPORTS //\n\nmodule.exports = UINT32_MAX;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isUint32Array = require( '@stdlib/assert-is-uint32array' );\nvar UINT32_MAX = require( '@stdlib/constants-uint32-max' );\nvar GlobalUint32Array = require( './uint32array.js' );\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint32Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint32Array` support\n*\n* @example\n* var bool = hasUint32ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint32ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint32Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];\n\t\tarr = new GlobalUint32Array( arr );\n\t\tbool = (\n\t\t\tisUint32Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasUint32ArraySupport;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test for native `Uint32Array` support.\n*\n* @module @stdlib/assert-has-uint32array-support\n*\n* @example\n* var hasUint32ArraySupport = require( '@stdlib/assert-has-uint32array-support' );\n*\n* var bool = hasUint32ArraySupport();\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar hasUint32ArraySupport = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasUint32ArraySupport;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = polyfill;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint32\n*\n* @example\n* var ctor = require( '@stdlib/array-uint32' );\n*\n* var arr = new ctor( 10 );\n* // returns <Uint32Array>\n*/\n\n// MODULES //\n\nvar hasUint32ArraySupport = require( '@stdlib/assert-has-uint32array-support' );\nvar builtin = require( './uint32array.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint32ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nativeClass = require( '@stdlib/utils-native-class' );\n\n\n// VARIABLES //\n\nvar hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Float64Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Float64Array\n*\n* @example\n* var bool = isFloat64Array( new Float64Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isFloat64Array( [] );\n* // returns false\n*/\nfunction isFloat64Array( value ) {\n\treturn (\n\t\t( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Float64Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isFloat64Array;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a Float64Array.\n*\n* @module @stdlib/assert-is-float64array\n*\n* @example\n* var isFloat64Array = require( '@stdlib/assert-is-float64array' );\n*\n* var bool = isFloat64Array( new Float64Array( 10 ) );\n* // returns true\n*\n* bool = isFloat64Array( [] );\n* // returns false\n*/\n\n// MODULES //\n\nvar isFloat64Array = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isFloat64Array;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFloat64Array = require( '@stdlib/assert-is-float64array' );\nvar GlobalFloat64Array = require( './float64array.js' );\n\n\n// MAIN //\n\n/**\n* Tests for native `Float64Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Float64Array` support\n*\n* @example\n* var bool = hasFloat64ArraySupport();\n* // returns <boolean>\n*/\nfunction hasFloat64ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalFloat64Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalFloat64Array( [ 1.0, 3.14, -3.14, NaN ] );\n\t\tbool = (\n\t\t\tisFloat64Array( arr ) &&\n\t\t\tarr[ 0 ] === 1.0 &&\n\t\t\tarr[ 1 ] === 3.14 &&\n\t\t\tarr[ 2 ] === -3.14 &&\n\t\t\tarr[ 3 ] !== arr[ 3 ]\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasFloat64ArraySupport;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test for native `Float64Array` support.\n*\n* @module @stdlib/assert-has-float64array-support\n*\n* @example\n* var hasFloat64ArraySupport = require( '@stdlib/assert-has-float64array-support' );\n*\n* var bool = hasFloat64ArraySupport();\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar hasFloat64ArraySupport = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasFloat64ArraySupport;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Float64Array === 'function' ) ? Float64Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = polyfill;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.\n*\n* @module @stdlib/array-float64\n*\n* @example\n* var ctor = require( '@stdlib/array-float64' );\n*\n* var arr = new ctor( 10 );\n* // returns <Float64Array>\n*/\n\n// MODULES //\n\nvar hasFloat64ArraySupport = require( '@stdlib/assert-has-float64array-support' );\nvar builtin = require( './float64array.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar ctor;\nif ( hasFloat64ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nativeClass = require( '@stdlib/utils-native-class' );\n\n\n// VARIABLES //\n\nvar hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint8Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint8Array\n*\n* @example\n* var bool = isUint8Array( new Uint8Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint8Array( [] );\n* // returns false\n*/\nfunction isUint8Array( value ) {\n\treturn (\n\t\t( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint8Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isUint8Array;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a Uint8Array.\n*\n* @module @stdlib/assert-is-uint8array\n*\n* @example\n* var isUint8Array = require( '@stdlib/assert-is-uint8array' );\n*\n* var bool = isUint8Array( new Uint8Array( 10 ) );\n* // returns true\n*\n* bool = isUint8Array( [] );\n* // returns false\n*/\n\n// MODULES //\n\nvar isUint8Array = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isUint8Array;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 8-bit integer.\n*\n* @module @stdlib/constants-uint8-max\n* @type {integer32}\n*\n* @example\n* var UINT8_MAX = require( '@stdlib/constants-uint8-max' );\n* // returns 255\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 8-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{8} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 255\n*/\nvar UINT8_MAX = 255|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = UINT8_MAX;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isUint8Array = require( '@stdlib/assert-is-uint8array' );\nvar UINT8_MAX = require( '@stdlib/constants-uint8-max' );\nvar GlobalUint8Array = require( './uint8array.js' );\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint8Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint8Array` support\n*\n* @example\n* var bool = hasUint8ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint8ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint8Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT8_MAX+1, UINT8_MAX+2 ];\n\t\tarr = new GlobalUint8Array( arr );\n\t\tbool = (\n\t\t\tisUint8Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&           // truncation\n\t\t\tarr[ 2 ] === UINT8_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&           // wrap around\n\t\t\tarr[ 4 ] === 1              // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasUint8ArraySupport;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test for native `Uint8Array` support.\n*\n* @module @stdlib/assert-has-uint8array-support\n*\n* @example\n* var hasUint8ArraySupport = require( '@stdlib/assert-has-uint8array-support' );\n*\n* var bool = hasUint8ArraySupport();\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar hasUint8ArraySupport = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasUint8ArraySupport;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint8Array === 'function' ) ? Uint8Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = polyfill;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint8\n*\n* @example\n* var ctor = require( '@stdlib/array-uint8' );\n*\n* var arr = new ctor( 10 );\n* // returns <Uint8Array>\n*/\n\n// MODULES //\n\nvar hasUint8ArraySupport = require( '@stdlib/assert-has-uint8array-support' );\nvar builtin = require( './uint8array.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint8ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nativeClass = require( '@stdlib/utils-native-class' );\n\n\n// VARIABLES //\n\nvar hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint16Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint16Array\n*\n* @example\n* var bool = isUint16Array( new Uint16Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint16Array( [] );\n* // returns false\n*/\nfunction isUint16Array( value ) {\n\treturn (\n\t\t( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint16Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isUint16Array;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a Uint16Array.\n*\n* @module @stdlib/assert-is-uint16array\n*\n* @example\n* var isUint16Array = require( '@stdlib/assert-is-uint16array' );\n*\n* var bool = isUint16Array( new Uint16Array( 10 ) );\n* // returns true\n*\n* bool = isUint16Array( [] );\n* // returns false\n*/\n\n// MODULES //\n\nvar isUint16Array = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isUint16Array;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 16-bit integer.\n*\n* @module @stdlib/constants-uint16-max\n* @type {integer32}\n*\n* @example\n* var UINT16_MAX = require( '@stdlib/constants-uint16-max' );\n* // returns 65535\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 16-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{16} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 1111111111111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 65535\n*/\nvar UINT16_MAX = 65535|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = UINT16_MAX;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isUint16Array = require( '@stdlib/assert-is-uint16array' );\nvar UINT16_MAX = require( '@stdlib/constants-uint16-max' );\nvar GlobalUint16Array = require( './uint16array.js' );\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint16Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint16Array` support\n*\n* @example\n* var bool = hasUint16ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint16ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint16Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT16_MAX+1, UINT16_MAX+2 ];\n\t\tarr = new GlobalUint16Array( arr );\n\t\tbool = (\n\t\t\tisUint16Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT16_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasUint16ArraySupport;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test for native `Uint16Array` support.\n*\n* @module @stdlib/assert-has-uint16array-support\n*\n* @example\n* var hasUint16ArraySupport = require( '@stdlib/assert-has-uint16array-support' );\n*\n* var bool = hasUint16ArraySupport();\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar hasUint16ArraySupport = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hasUint16ArraySupport;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint16Array === 'function' ) ? Uint16Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = polyfill;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint16\n*\n* @example\n* var ctor = require( '@stdlib/array-uint16' );\n*\n* var arr = new ctor( 10 );\n* // returns <Uint16Array>\n*/\n\n// MODULES //\n\nvar hasUint16ArraySupport = require( '@stdlib/assert-has-uint16array-support' );\nvar builtin = require( './uint16array.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint16ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint8Array = require( '@stdlib/array-uint8' );\nvar Uint16Array = require( '@stdlib/array-uint16' );\n\n\n// MAIN //\n\nvar ctors = {\n\t'uint16': Uint16Array,\n\t'uint8': Uint8Array\n};\n\n\n// EXPORTS //\n\nmodule.exports = ctors;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ctors = require( './ctors.js' );\n\n\n// VARIABLES //\n\nvar bool;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if an environment is little endian.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment is little endian\n*\n* @example\n* var bool = isLittleEndian();\n* // returns <boolean>\n*/\nfunction isLittleEndian() {\n\tvar uint16view;\n\tvar uint8view;\n\n\tuint16view = new ctors[ 'uint16' ]( 1 );\n\n\t/*\n\t* Set the uint16 view to a value having distinguishable lower and higher order words.\n\t*\n\t* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)\n\t*/\n\tuint16view[ 0 ] = 0x1234;\n\n\t// Create a uint8 view on top of the uint16 buffer:\n\tuint8view = new ctors[ 'uint8' ]( uint16view.buffer );\n\n\t// If little endian, the least significant byte will be first...\n\treturn ( uint8view[ 0 ] === 0x34 );\n}\n\n\n// MAIN //\n\nbool = isLittleEndian();\n\n\n// EXPORTS //\n\nmodule.exports = bool;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a boolean indicating if an environment is little endian.\n*\n* @module @stdlib/assert-is-little-endian\n*\n* @example\n* var IS_LITTLE_ENDIAN = require( '@stdlib/assert-is-little-endian' );\n*\n* var bool = IS_LITTLE_ENDIAN;\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar IS_LITTLE_ENDIAN = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = IS_LITTLE_ENDIAN;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert-is-little-endian' );\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nmodule.exports = indices;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array-uint32' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar indices = require( './indices.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var Uint32Array = require( '@stdlib/array-uint32' );\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords( 3.14e201, out, 1, 0 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\nfunction toWords( x, out, stride, offset ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tout[ offset ] = UINT32_VIEW[ HIGH ];\n\tout[ offset + stride ] = UINT32_VIEW[ LOW ];\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = toWords;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fcn = require( './assign.js' );\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @param {number} x - input value\n* @returns {Array<number>} output array\n*\n* @example\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*/\nfunction toWords( x ) {\n\treturn fcn( x, [ 0>>>0, 0>>>0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = toWords;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Split a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @module @stdlib/number-float64-base-to-words\n*\n* @example\n* var toWords = require( '@stdlib/number-float64-base-to-words' );\n*\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*\n* @example\n* var Uint32Array = require( '@stdlib/array-uint32' );\n* var toWords = require( '@stdlib/number-float64-base-to-words' );\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords.assign( 3.14e201, out, 1, 0 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert-is-little-endian' );\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nmodule.exports = HIGH;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array-uint32' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar HIGH = require( './high.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - input value\n* @returns {uinteger32} higher order word\n*\n* @example\n* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011\n* // returns 1774486211\n*/\nfunction getHighWord( x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ HIGH ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = getHighWord;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.\n*\n* @module @stdlib/number-float64-base-get-high-word\n*\n* @example\n* var getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\n*\n* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011\n* // returns 1774486211\n*/\n\n// MODULES //\n\nvar getHighWord = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = getHighWord;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLittleEndian = require( '@stdlib/assert-is-little-endian' );\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nmodule.exports = indices;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Uint32Array = require( '@stdlib/array-uint32' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar indices = require( './indices.js' );\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n*\n* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.\n*\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {uinteger32} high - higher order word (unsigned 32-bit integer)\n* @param {uinteger32} low - lower order word (unsigned 32-bit integer)\n* @returns {number} floating-point number\n*\n* @example\n* var v = fromWords( 1774486211, 2479577218 );\n* // returns 3.14e201\n*\n* @example\n* var v = fromWords( 3221823995, 1413754136 );\n* // returns -3.141592653589793\n*\n* @example\n* var v = fromWords( 0, 0 );\n* // returns 0.0\n*\n* @example\n* var v = fromWords( 2147483648, 0 );\n* // returns -0.0\n*\n* @example\n* var v = fromWords( 2146959360, 0 );\n* // returns NaN\n*\n* @example\n* var v = fromWords( 2146435072, 0 );\n* // returns Infinity\n*\n* @example\n* var v = fromWords( 4293918720, 0 );\n* // returns -Infinity\n*/\nfunction fromWords( high, low ) {\n\tUINT32_VIEW[ HIGH ] = high;\n\tUINT32_VIEW[ LOW ] = low;\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromWords;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @module @stdlib/number-float64-base-from-words\n*\n* @example\n* var fromWords = require( '@stdlib/number-float64-base-from-words' );\n*\n* var v = fromWords( 1774486211, 2479577218 );\n* // returns 3.14e201\n*\n* v = fromWords( 3221823995, 1413754136 );\n* // returns -3.141592653589793\n*\n* v = fromWords( 0, 0 );\n* // returns 0.0\n*\n* v = fromWords( 2147483648, 0 );\n* // returns -0.0\n*\n* v = fromWords( 2146959360, 0 );\n* // returns NaN\n*\n* v = fromWords( 2146435072, 0 );\n* // returns Infinity\n*\n* v = fromWords( 4293918720, 0 );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nvar fromWords = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = fromWords;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar SIGN_MASK = require( '@stdlib/constants-float64-high-word-sign-mask' );\nvar ABS_MASK = require( '@stdlib/constants-float64-high-word-abs-mask' );\nvar toWords = require( '@stdlib/number-float64-base-to-words' );\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar fromWords = require( '@stdlib/number-float64-base-from-words' );\n\n\n// VARIABLES //\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ];\n\n\n// MAIN //\n\n/**\n* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.\n*\n* @param {number} x - number from which to derive a magnitude\n* @param {number} y - number from which to derive a sign\n* @returns {number} a double-precision floating-point number\n*\n* @example\n* var z = copysign( -3.14, 10.0 );\n* // returns 3.14\n*\n* @example\n* var z = copysign( 3.14, -1.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( 1.0, -0.0 );\n* // returns -1.0\n*\n* @example\n* var z = copysign( -3.14, -0.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( -0.0, 1.0 );\n* // returns 0.0\n*/\nfunction copysign( x, y ) {\n\tvar hx;\n\tvar hy;\n\n\t// Split `x` into higher and lower order words:\n\ttoWords.assign( x, WORDS, 1, 0 );\n\thx = WORDS[ 0 ];\n\n\t// Turn off the sign bit of `x`:\n\thx &= ABS_MASK;\n\n\t// Extract the higher order word from `y`:\n\thy = getHighWord( y );\n\n\t// Leave only the sign bit of `y` turned on:\n\thy &= SIGN_MASK;\n\n\t// Copy the sign bit of `y` to `x`:\n\thx |= hy;\n\n\t// Return a new value having the same magnitude as `x`, but with the sign of `y`:\n\treturn fromWords( hx, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\n\nmodule.exports = copysign;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.\n*\n* @module @stdlib/math-base-special-copysign\n*\n* @example\n* var copysign = require( '@stdlib/math-base-special-copysign' );\n*\n* var z = copysign( -3.14, 10.0 );\n* // returns 3.14\n*\n* z = copysign( 3.14, -1.0 );\n* // returns -3.14\n*\n* z = copysign( 1.0, -0.0 );\n* // returns -1.0\n*\n* z = copysign( -3.14, -0.0 );\n* // returns -3.14\n*\n* z = copysign( -0.0, 1.0 );\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive double-precision floating-point normal number.\n*\n* @module @stdlib/constants-float64-smallest-normal\n* @type {number}\n*\n* @example\n* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants-float64-smallest-normal' );\n* // returns 2.2250738585072014e-308\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive double-precision floating-point normal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{1023-1}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000001 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default 2.2250738585072014e-308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_SMALLEST_NORMAL;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the absolute value of a double-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} absolute value\n*\n* @example\n* var v = abs( -1.0 );\n* // returns 1.0\n*\n* @example\n* var v = abs( 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = abs( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( NaN );\n* // returns NaN\n*/\nfunction abs( x ) {\n\treturn Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math\n}\n\n\n// EXPORTS //\n\nmodule.exports = abs;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an absolute value of a double-precision floating-point number.\n*\n* @module @stdlib/math-base-special-abs\n*\n* @example\n* var abs = require( '@stdlib/math-base-special-abs' );\n*\n* var v = abs( -1.0 );\n* // returns 1.0\n*\n* v = abs( 2.0 );\n* // returns 2.0\n*\n* v = abs( 0.0 );\n* // returns 0.0\n*\n* v = abs( -0.0 );\n* // returns 0.0\n*\n* v = abs( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar abs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = abs;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants-float64-smallest-normal' );\nvar isInfinite = require( '@stdlib/math-base-assert-is-infinite' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar abs = require( '@stdlib/math-base-special-abs' );\n\n\n// VARIABLES //\n\n// (1<<52)\nvar SCALAR = 4503599627370496;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\) and assigns results to a provided output array.\n*\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var pow = require( '@stdlib/math-base-special-pow' );\n*\n* var out = normalize( 3.14e-319, [ 0.0, 0 ], 1, 0 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( 0.0, [ 0.0, 0 ], 1, 0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* var PINF = require( '@stdlib/constants-float64-pinf' );\n*\n* var out = normalize( PINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* var NINF = require( '@stdlib/constants-float64-ninf' );\n*\n* var out = normalize( NINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( NaN, [ 0.0, 0 ], 1, 0 );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( x, out, stride, offset ) {\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {\n\t\tout[ offset ] = x * SCALAR;\n\t\tout[ offset + stride ] = -52;\n\t\treturn out;\n\t}\n\tout[ offset ] = x;\n\tout[ offset + stride ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalize;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fcn = require( './assign.js' );\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @param {number} x - input value\n* @returns {NumberArray} output array\n*\n* @example\n* var pow = require( '@stdlib/math-base-special-pow' );\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var PINF = require( '@stdlib/constants-float64-pinf' );\n*\n* var out = normalize( PINF );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* var NINF = require( '@stdlib/constants-float64-ninf' );\n*\n* var out = normalize( NINF );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( x ) {\n\treturn fcn( x, [ 0.0, 0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalize;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @module @stdlib/number-float64-base-normalize\n*\n* @example\n* var normalize = require( '@stdlib/number-float64-base-normalize' );\n* var pow = require( '@stdlib/math-base-special-pow' );\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0, exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var normalize = require( '@stdlib/number-float64-base-normalize' );\n*\n* var out = new Float64Array( 2 );\n*\n* var v = normalize.assign( 3.14e-319, out, 1, 0 );\n* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-exponent-mask\n* @type {uinteger32}\n*\n* @example\n* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/constants-float64-high-word-exponent-mask' );\n* // returns 2146435072\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2146435072 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7ff00000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar EXP_MASK = require( '@stdlib/constants-float64-high-word-exponent-mask' );\nvar BIAS = require( '@stdlib/constants-float64-exponent-bias' );\n\n\n// MAIN //\n\n/**\n* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {integer32} unbiased exponent\n*\n* @example\n* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307\n* // returns -1019\n*\n* @example\n* var exp = exponent( -3.14 );\n* // returns 1\n*\n* @example\n* var exp = exponent( 0.0 );\n* // returns -1023\n*\n* @example\n* var exp = exponent( NaN );\n* // returns 1024\n*/\nfunction exponent( x ) {\n\t// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:\n\tvar high = getHighWord( x );\n\n\t// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:\n\thigh = ( high & EXP_MASK ) >>> 20;\n\n\t// Remove the bias and return:\n\treturn (high - BIAS)|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = exponent;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.\n*\n* @module @stdlib/number-float64-base-exponent\n*\n* @example\n* var exponent = require( '@stdlib/number-float64-base-exponent' );\n*\n* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307\n* // returns -1019\n*\n* exp = exponent( -3.14 );\n* // returns 1\n*\n* exp = exponent( 0.0 );\n* // returns -1023\n*\n* exp = exponent( NaN );\n* // returns 1024\n*/\n\n// MODULES //\n\nvar exponent = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = exponent;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// NOTES //\n\n/*\n* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).\n*/\n\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar BIAS = require( '@stdlib/constants-float64-exponent-bias' );\nvar MAX_EXPONENT = require( '@stdlib/constants-float64-max-base2-exponent' );\nvar MAX_SUBNORMAL_EXPONENT = require( '@stdlib/constants-float64-max-base2-exponent-subnormal' );\nvar MIN_SUBNORMAL_EXPONENT = require( '@stdlib/constants-float64-min-base2-exponent-subnormal' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isInfinite = require( '@stdlib/math-base-assert-is-infinite' );\nvar copysign = require( '@stdlib/math-base-special-copysign' );\nvar normalize = require( '@stdlib/number-float64-base-normalize' );\nvar floatExp = require( '@stdlib/number-float64-base-exponent' );\nvar toWords = require( '@stdlib/number-float64-base-to-words' );\nvar fromWords = require( '@stdlib/number-float64-base-from-words' );\n\n\n// VARIABLES //\n\n// 1/(1<<52) = 1/(2**52) = 1/4503599627370496\nvar TWO52_INV = 2.220446049250313e-16;\n\n// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223\nvar CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation\n\n// Normalization workspace:\nvar FRAC = [ 0.0, 0.0 ]; // WARNING: not thread safe\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Multiplies a double-precision floating-point number by an integer power of two.\n*\n* @param {number} frac - fraction\n* @param {integer} exp - exponent\n* @returns {number} double-precision floating-point number\n*\n* @example\n* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8\n* // returns 4.0\n*\n* @example\n* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)\n* // returns 1.0\n*\n* @example\n* var x = ldexp( 0.0, 20 );\n* // returns 0.0\n*\n* @example\n* var x = ldexp( -0.0, 39 );\n* // returns -0.0\n*\n* @example\n* var x = ldexp( NaN, -101 );\n* // returns NaN\n*\n* @example\n* var x = ldexp( Infinity, 11 );\n* // returns Infinity\n*\n* @example\n* var x = ldexp( -Infinity, -118 );\n* // returns -Infinity\n*/\nfunction ldexp( frac, exp ) {\n\tvar high;\n\tvar m;\n\tif (\n\t\tfrac === 0.0 || // handles +-0\n\t\tisnan( frac ) ||\n\t\tisInfinite( frac )\n\t) {\n\t\treturn frac;\n\t}\n\t// Normalize the input fraction:\n\tnormalize( FRAC, frac );\n\tfrac = FRAC[ 0 ];\n\texp += FRAC[ 1 ];\n\n\t// Extract the exponent from `frac` and add it to `exp`:\n\texp += floatExp( frac );\n\n\t// Check for underflow/overflow...\n\tif ( exp < MIN_SUBNORMAL_EXPONENT ) {\n\t\treturn copysign( 0.0, frac );\n\t}\n\tif ( exp > MAX_EXPONENT ) {\n\t\tif ( frac < 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn PINF;\n\t}\n\t// Check for a subnormal and scale accordingly to retain precision...\n\tif ( exp <= MAX_SUBNORMAL_EXPONENT ) {\n\t\texp += 52;\n\t\tm = TWO52_INV;\n\t} else {\n\t\tm = 1.0;\n\t}\n\t// Split the fraction into higher and lower order words:\n\ttoWords( WORDS, frac );\n\thigh = WORDS[ 0 ];\n\n\t// Clear the exponent bits within the higher order word:\n\thigh &= CLEAR_EXP_MASK;\n\n\t// Set the exponent bits to the new exponent:\n\thigh |= ((exp+BIAS) << 20);\n\n\t// Create a new floating-point number:\n\treturn m * fromWords( high, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\n\nmodule.exports = ldexp;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Multiply a double-precision floating-point number by an integer power of two.\n*\n* @module @stdlib/math-base-special-ldexp\n*\n* @example\n* var ldexp = require( '@stdlib/math-base-special-ldexp' );\n*\n* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8\n* // returns 4.0\n*\n* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)\n* // returns 1.0\n*\n* x = ldexp( 0.0, 20 );\n* // returns 0.0\n*\n* x = ldexp( -0.0, 39 );\n* // returns -0.0\n*\n* x = ldexp( NaN, -101 );\n* // returns NaN\n*\n* x = ldexp( Infinity, 11 );\n* // returns Infinity\n*\n* x = ldexp( -Infinity, -118 );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nvar ldexp = require( './ldexp.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ldexp;\n", "function dset(obj, keys, val) {\n\tkeys.split && (keys=keys.split('.'));\n\tvar i=0, l=keys.length, t=obj, x, k;\n\twhile (i < l) {\n\t\tk = keys[i++];\n\t\tif (k === '__proto__' || k === 'constructor' || k === 'prototype') break;\n\t\tt = t[k] = (i === l) ? val : (typeof(x=t[k])===typeof(keys)) ? x : (keys[i]*0 !== 0 || !!~(''+keys[i]).indexOf('.')) ? {} : [];\n\t}\n}\n\nexports.dset = dset;", "import get from 'dlv'\n\nexport function unset(obj, prop) {\n  if (get(obj, prop)) {\n    var segs = prop.split('.')\n    var last = segs.pop()\n    while (segs.length && segs[segs.length - 1].slice(-1) === '\\\\') {\n      last = segs.pop().slice(0, -1) + '.' + last\n    }\n    while (segs.length) obj = obj[(prop = segs.shift())]\n    return delete obj[last]\n  }\n  return true\n}\n", "import { Transformer } from './store'\nimport MD5 from 'tiny-hashes/md5'\nimport get from 'dlv'\nimport ldexp from '@stdlib/math-base-special-ldexp'\nimport { dset } from 'dset';\nimport { unset } from './unset'\n\nexport type KeyTarget = Record<string, string[]>\n\nexport interface TransformerConfig {\n  allow?: KeyTarget\n  drop?: KeyTarget\n  sample?: TransformerConfigSample\n  map?: Record<string, TransformerConfigMap>\n}\n\nexport interface TransformerConfigSample {\n  percent: number\n  path: string\n}\n\nexport interface TransformerConfigMap {\n  set?: any\n  copy?: string\n  move?: string\n  to_string?: boolean\n}\n\nexport default function transform(payload: any, transformers: Transformer[]): any {\n  const transformedPayload: any = payload\n\n  for (const transformer of transformers) {\n    switch (transformer.type) {\n      case 'drop':\n        return null\n      case 'drop_properties':\n        dropProperties(transformedPayload, transformer.config)\n        break\n      case 'allow_properties':\n        allowProperties(transformedPayload, transformer.config)\n        break\n      case 'sample_event':\n        if (sampleEvent(transformedPayload, transformer.config)) {\n          break\n        }\n        return null\n      case 'map_properties':\n        mapProperties(transformedPayload, transformer.config)\n        break\n      case 'hash_properties':\n        // Not yet supported, but don't throw an error. Just ignore.\n        break\n      default:\n        throw new Error(`Transformer of type \"${transformer.type}\" is unsupported.`)\n    }\n  }\n\n  return transformedPayload\n}\n\n// dropProperties removes all specified props from the object.\nfunction dropProperties(payload: any, config: TransformerConfig) {\n  filterProperties(payload, config.drop, (matchedObj, dropList) => {\n    dropList.forEach(k => delete matchedObj[k])\n  })\n}\n\n// allowProperties ONLY allows the specific targets within the keys. (e.g. \"a.foo\": [\"bar\", \"baz\"]\n// on {a: {foo: {bar: 1, baz: 2}, other: 3}} will not have any drops, as it only looks inside a.foo\nfunction allowProperties(payload: any, config: TransformerConfig) {\n  filterProperties(payload, config.allow, (matchedObj, preserveList) => {\n    Object.keys(matchedObj).forEach(key => {\n      if (!preserveList.includes(key)) {\n        delete matchedObj[key]\n      }\n    })\n  })\n}\n\nfunction filterProperties(payload: any, ruleSet: KeyTarget, filterCb: (matchedObject: any, targets: string[]) => void) {\n  Object.entries(ruleSet).forEach(([key, targets]) => {\n    const filter = (obj: any) => {\n      // Can only act on objects.\n      if (typeof obj !== 'object' || obj === null) {\n        return\n      }\n      \n      filterCb(obj, targets)\n    }\n\n    // If key is empty, it refers to the top-level object.\n    const matchedObject = key === '' ? payload : get(payload, key)\n\n    if (Array.isArray(matchedObject)) {\n      matchedObject.forEach(filter)\n    } else {\n      filter(matchedObject)\n    }\n  })\n}\n\nfunction mapProperties(payload: any, config: TransformerConfig) {\n  // Some configs might try to modify or read from a field multiple times. We will only ever read\n  // values as they were before any modifications began. Thus, if you try to override e.g.\n  // {a: {b: 1}} with set(a, 'b', 2) (which results in {a: {b: 2}}) and then try to copy a.b into\n  // a.c, you will get {a: {b: 2, c:1}} and NOT {a: {b:2, c:2}}. This prevents map evaluation\n  // order from mattering, and === what server-side does.\n  // See: https://github.com/segmentio/tsub/blob/661695a63b60b90471796e667458f076af788c19/transformers/map_properties.go#L179-L200\n  const initialPayload = JSON.parse(JSON.stringify(payload))\n\n  for (const key in config.map) {\n    if (!config.map.hasOwnProperty(key)) {\n      continue\n    }\n\n    const actionMap: TransformerConfigMap = config.map[key]\n\n    // Can't manipulate non-objects. Check that the parent is one. Strip the last .field\n    // from the string.\n    const splitKey = key.split('.')\n    let parent\n    if (splitKey.length > 1) {\n      splitKey.pop()\n      parent = get(initialPayload, splitKey.join('.'))\n    } else {\n      parent = payload\n    }\n\n    if (typeof parent !== 'object') {\n      continue\n    }\n\n    // These actions are exclusive to each other.\n    if (actionMap.copy) {\n      const valueToCopy = get(initialPayload, actionMap.copy)\n      if (valueToCopy !== undefined) {\n        dset(payload, key, valueToCopy)\n      }\n    } else if (actionMap.move) {\n      const valueToMove = get(initialPayload, actionMap.move)\n      if (valueToMove !== undefined) {\n        dset(payload, key, valueToMove)\n      }\n\n      unset(payload, actionMap.move)\n    }\n    // Have to check only if property exists, as null, undefined, and other vals could be explicitly set.\n    else if (actionMap.hasOwnProperty('set')) {\n      dset(payload, key, actionMap.set)\n    }\n\n    // to_string is not exclusive and can be paired with other actions. Final action.\n    if (actionMap.to_string) {\n      const valueToString = get(payload, key)\n\n      // Do not string arrays and objects. Do not double-encode strings.\n      if (\n        typeof valueToString === 'string' ||\n        (typeof valueToString === 'object' && valueToString !== null)\n      ) {\n        continue\n      }\n\n      // TODO: Check stringifier in Golang for parity.\n      if (valueToString !== undefined) {\n        dset(payload, key, JSON.stringify(valueToString))\n      } else {\n        // TODO: Check this behavior.\n        dset(payload, key, 'undefined')\n      }\n    }\n  }\n}\n\nfunction sampleEvent(payload: any, config: TransformerConfig): boolean {\n  if (config.sample.percent <= 0) {\n    return false\n  } else if (config.sample.percent >= 1) {\n    return true\n  }\n\n  // If we're not filtering deterministically, just use raw percentage.\n  if (!config.sample.path) {\n    return samplePercent(config.sample.percent)\n  }\n\n  // Otherwise, use a deterministic hash.\n  return sampleConsistentPercent(payload, config)\n}\n\nfunction samplePercent(percent: number): boolean {\n  // Math.random returns [0, 1) => 0.0<>0.9999...\n  return Math.random() <= percent\n}\n\n// sampleConsistentPercent converts an input string of bytes into a consistent uniform\n// continuous distribution of [0.0, 1.0]. This is based on\n// http://mumble.net/~campbell/tmp/random_real.c, but using the digest\n// result of the input value as the random information.\n\n// IMPORTANT - This function needs to === the Golang implementation to ensure that the two return the same vals!\n// See: https://github.com/segmentio/sampler/blob/65cb04132305a04fcd4bcaef67d57fbe40c30241/sampler.go#L13-L38\n\n// Since AJS supports IE9+ (typed arrays were introduced in IE10) we're doing some manual array math.\n// This could be done directly with strings, but arrays are easier to reason about/have better function support.\nfunction sampleConsistentPercent(payload: any, config: TransformerConfig): boolean {\n  const field = get(payload, config.sample.path)\n\n  // Operate off of JSON bytes. TODO: Validate all type behavior, esp. strings.\n  const digest: number[] = MD5(JSON.stringify(field))\n  let exponent = -64\n\n  // Manually maintain 64-bit int as an array.\n  let significand: number[] = []\n\n  // Left-shift and OR for first 8 bytes of digest. (8 bytes * 8 = 64 bits)\n  consumeDigest(digest.slice(0, 8), significand)\n\n  let leadingZeros = 0\n  for (let i = 0; i < 64; i++) {\n    if (significand[i] === 1) {\n      break\n    }\n\n    leadingZeros++\n  }\n\n  if (leadingZeros !== 0) {\n    // Use the last 8 bytes of the digest, same as before.\n    const val: number[] = []\n    consumeDigest(digest.slice(9, 16), val)\n\n    exponent -= leadingZeros\n    // Left-shift away leading zeros in significand.\n    significand.splice(0, leadingZeros)\n\n    // Right-shift val by 64 minus leading zeros and push into significand.\n    val.splice(64 - leadingZeros)\n    significand = significand.concat(val)\n  }\n\n  // Flip 64th bit\n  significand[63] = significand[63] === 0 ? 1 : 0\n\n  // Convert our manual binary into a JS num (binary arr => binary string => psuedo-int) and run the ldexp!\n  return ldexp(parseInt(significand.join(''), 2), exponent) < config.sample.percent\n}\n\n// Array byte filler helper\nfunction consumeDigest(digest: number[], arr: number[]) {\n  for (let i = 0; i < 8; i++) {\n    let remainder = digest[i]\n    for (let binary = 128; binary >= 1; binary /= 2) {\n      if (remainder - binary >= 0) {\n        remainder -= binary\n        arr.push(1)\n      } else {\n        arr.push(0)\n      }\n    }\n  }\n}\n", "import * as Store from './store'\nimport get from 'dlv'\n\nexport default function matches(event, matcher: Store.Matcher): boolean {\n  if (!matcher) {\n    throw new Error('No matcher supplied!')\n  }\n\n  switch (matcher.type) {\n    case 'all':\n      return all()\n    case 'fql':\n      return fql(matcher.ir, event)\n    default:\n      throw new Error(`Matcher of type ${matcher.type} unsupported.`)\n  }\n}\n\nfunction all(): boolean {\n  return true\n}\n\nfunction fql(ir: Store.Matcher['ir'], event): boolean {\n  if (!ir) {\n    return false\n  }\n\n  try {\n    ir = JSON.parse(ir)\n  } catch (e) {\n    throw new Error(`Failed to JSON.parse FQL intermediate representation \"${ir}\": ${e}`)\n  }\n\n  const result = fqlEvaluate(ir, event)\n  if (typeof result !== 'boolean') {\n    // An error was returned, or a lowercase, typeof, or similar function was run alone. Nothing to evaluate.\n    return false\n  }\n\n  return result\n}\n\n// FQL is 100% type strict in Go. Show no mercy to types which do not comply.\nfunction fqlEvaluate(ir, event) {\n  // If the given ir chunk is not an array, then we should check the single given path or value for literally `true`.\n  if (!Array.isArray(ir)) {\n    return getValue(ir, event) === true\n  }\n\n  // Otherwise, it is a sequence of ordered steps to follow to reach our solution!\n  const item = ir[0]\n  switch (item) {\n    /*** Unary cases ***/\n    // '!' => Invert the result\n    case '!':\n      return !fqlEvaluate(ir[1], event)\n\n    /*** Binary cases ***/\n    // 'or' => Any condition being true returns true\n    case 'or':\n      for (let i = 1; i < ir.length; i++) {\n        if (fqlEvaluate(ir[i], event)) {\n          return true\n        }\n      }\n      return false\n    // 'and' => Any condition being false returns false\n    case 'and':\n      for (let i = 1; i < ir.length; i++) {\n        if (!fqlEvaluate(ir[i], event)) {\n          return false\n        }\n      }\n      return true\n    // Equivalence comparisons\n    case '=':\n    case '!=':\n      return compareItems(getValue(ir[1], event), getValue(ir[2], event), item, event)\n    // Numerical comparisons\n    case '<=':\n    case '<':\n    case '>':\n    case '>=':\n      // Compare the two values with the given operator.\n      return compareNumbers(getValue(ir[1], event), getValue(ir[2], event), item, event)\n    // item in [list]' => Checks whether item is in list\n    case 'in':\n      return checkInList(getValue(ir[1], event), getValue(ir[2], event), event)\n\n    /*** Functions ***/\n    // 'contains(str1, str2)' => The first string has a substring of the second string\n    case 'contains':\n      return contains(getValue(ir[1], event), getValue(ir[2], event))\n    // 'match(str, match)' => The given string matches the provided glob matcher\n    case 'match':\n      return match(getValue(ir[1], event), getValue(ir[2], event))\n    // 'lowercase(str)' => Returns a lowercased string, null if the item is not a string\n    case 'lowercase':\n      const target = getValue(ir[1], event)\n      if (typeof target !== 'string') {\n        return null\n      }\n      return target.toLowerCase()\n    // 'typeof(val)' => Returns the FQL type of the value\n    case 'typeof':\n      // TODO: Do we need mapping to allow for universal comparisons? e.g. Object -> JSON, Array -> List, Floats?\n      return typeof getValue(ir[1], event)\n    // 'length(val)' => Returns the length of an array or string, NaN if neither\n    case 'length':\n      return length(getValue(ir[1], event))\n    // If nothing hit, we or the IR messed up somewhere.\n    default:\n      throw new Error(`FQL IR could not evaluate for token: ${item}`)\n  }\n}\n\nfunction getValue(item, event) {\n  // If item is an array, leave it as-is.\n  if (Array.isArray(item)) {\n    return item\n  }\n\n  // If item is an object, it has the form of `{\"value\": VAL}`\n  if (typeof item === 'object') {\n    return item.value\n  }\n\n  // Otherwise, it's an event path, e.g. \"properties.email\"\n  return get(event, item)\n}\n\nfunction checkInList(item, list, event): boolean {\n  return list.find(it => getValue(it, event) === item) !== undefined\n}\n\nfunction compareNumbers(first, second, operator, event): boolean {\n  // Check if it's more IR (such as a length() function)\n  if (isIR(first)) {\n    first = fqlEvaluate(first, event)\n  }\n\n  if (isIR(second)) {\n    second = fqlEvaluate(second, event)\n  }\n\n  if (typeof first !== 'number' || typeof second !== 'number') {\n    return false\n  }\n\n  // Reminder: NaN is not comparable to any other number (including NaN) and will always return false as desired.\n  switch (operator) {\n    // '<=' => The first number is less than or equal to the second.\n    case '<=':\n      return first <= second\n    // '>=' => The first number is greater than or equal to the second\n    case '>=':\n      return first >= second\n    // '<' The first number is less than the second.\n    case '<':\n      return first < second\n    // '>' The first number is greater than the second.\n    case '>':\n      return first > second\n    default:\n      throw new Error(`Invalid operator in compareNumbers: ${operator}`)\n  }\n}\n\nfunction compareItems(first, second, operator, event): boolean {\n  // Check if it's more IR (such as a lowercase() function)\n  if (isIR(first)) {\n    first = fqlEvaluate(first, event)\n  }\n\n  if (isIR(second)) {\n    second = fqlEvaluate(second, event)\n  }\n\n  if (typeof first === 'object' && typeof second === 'object') {\n    first = JSON.stringify(first)\n    second = JSON.stringify(second)\n  }\n\n  // Objects with the exact same contents AND order ARE considered identical. (Don't compare by reference)\n  // Even in Go, this MUST be the same byte order.\n  // e.g. {a: 1, b:2} === {a: 1, b:2} BUT {a:1, b:2} !== {b:2, a:1}\n  // Maybe later we'll use a stable stringifier, but we're matching server-side behavior for now.\n  switch (operator) {\n    // '=' => The two following items are exactly identical\n    case '=':\n      return first === second\n    // '!=' => The two following items are NOT exactly identical.\n    case '!=':\n      return first !== second\n    default:\n      throw new Error(`Invalid operator in compareItems: ${operator}`)\n  }\n}\n\nfunction contains(first, second): boolean {\n  if (typeof first !== 'string' || typeof second !== 'string') {\n    return false\n  }\n\n  return first.indexOf(second) !== -1\n}\n\nfunction match(str, glob): boolean {\n  if (typeof str !== 'string' || typeof glob !== 'string') {\n    return false\n  }\n\n  return globMatches(glob, str)\n}\n\nfunction length(item) {\n  // Match server-side behavior.\n  if (item === null) {\n    return 0\n  }\n\n  // Type-check to avoid returning .length of an object\n  if (!Array.isArray(item) && typeof item !== 'string') {\n    return NaN\n  }\n\n  return item.length\n}\n\n// This is a heuristic technically speaking, but should be close enough. The odds of someone trying to test\n// a func with identical IR notation is pretty low.\nfunction isIR(value): boolean {\n  // TODO: This can be better checked by checking if this is a {\"value\": THIS}\n  if (!Array.isArray(value)) {\n    return false\n  }\n\n  // Function checks\n  if (\n    (value[0] === 'lowercase' || value[0] === 'length' || value[0] === 'typeof') &&\n    value.length === 2\n  ) {\n    return true\n  }\n\n  if ((value[0] === 'contains' || value[0] === 'match') && value.length === 3) {\n    return true\n  }\n\n  return false\n}\n\n// Any reputable glob matcher is designed to work on filesystems and doesn't allow the override of the separator\n// character \"/\". This is problematic since our server-side representation e.g. evaluates \"match('ab/c', 'a*)\"\n// as TRUE, whereas any glob matcher for JS available does false. So we're rewriting it here.\n// See: https://github.com/segmentio/glob/blob/master/glob.go\nfunction globMatches(pattern, str): boolean {\n  Pattern: while (pattern.length > 0) {\n    let star\n    let chunk\n    ;({ star, chunk, pattern } = scanChunk(pattern))\n    if (star && chunk === '') {\n      // Trailing * matches rest of string\n      return true\n    }\n\n    // Look for match at current position\n    let { t, ok, err } = matchChunk(chunk, str)\n    if (err) {\n      return false\n    }\n\n    // If we're the last chunk, make sure we've exhausted the str\n    // otherwise we'll give a false result even if we could still match\n    // using the star\n    if (ok && (t.length === 0 || pattern.length > 0)) {\n      str = t\n      continue\n    }\n\n    if (star) {\n      // Look for match, skipping i+1 bytes.\n      for (let i = 0; i < str.length; i++) {\n        ;({ t, ok, err } = matchChunk(chunk, str.slice(i + 1)))\n        if (ok) {\n          // If we're the last chunk, make sure we exhausted the str.\n          if (pattern.length === 0 && t.length > 0) {\n            continue\n          }\n\n          str = t\n          continue Pattern\n        }\n\n        if (err) {\n          return false\n        }\n      }\n    }\n\n    return false\n  }\n\n  return str.length === 0\n}\n\nfunction scanChunk(pattern): any {\n  const result = {\n    star: false,\n    chunk: '',\n    pattern: '',\n  }\n\n  while (pattern.length > 0 && pattern[0] === '*') {\n    pattern = pattern.slice(1)\n    result.star = true\n  }\n\n  let inRange = false\n  let i\n\n  Scan: for (i = 0; i < pattern.length; i++) {\n    switch (pattern[i]) {\n      case '\\\\':\n        // Error check handled in matchChunk: bad pattern.\n        if (i + 1 < pattern.length) {\n          i++\n        }\n        break\n      case '[':\n        inRange = true\n        break\n      case ']':\n        inRange = false\n        break\n      case '*':\n        if (!inRange) {\n          break Scan\n        }\n    }\n  }\n\n  result.chunk = pattern.slice(0, i)\n  result.pattern = pattern.slice(i)\n  return result\n}\n\n// matchChunk checks whether chunk matches the beginning of s.\n// If so, it returns the remainder of s (after the match).\n// Chunk is all single-character operators: literals, char classes, and ?.\nfunction matchChunk(chunk, str): any {\n  const result = {\n    t: '',\n    ok: false,\n    err: false,\n  }\n\n  while (chunk.length > 0) {\n    if (str.length === 0) {\n      return result\n    }\n\n    switch (chunk[0]) {\n      case '[':\n        const char = str[0]\n        str = str.slice(1)\n        chunk = chunk.slice(1)\n\n        let notNegated = true\n        if (chunk.length > 0 && chunk[0] === '^') {\n          notNegated = false\n          chunk = chunk.slice(1)\n        }\n\n        // Parse all ranges\n        let foundMatch = false\n        let nRange = 0\n        while (true) {\n          if (chunk.length > 0 && chunk[0] === ']' && nRange > 0) {\n            chunk = chunk.slice(1)\n            break\n          }\n\n          let lo = ''\n          let hi = ''\n          let err\n          ;({ char: lo, newChunk: chunk, err } = getEsc(chunk))\n          if (err) {\n            return result\n          }\n\n          hi = lo\n          if (chunk[0] === '-') {\n            ;({ char: hi, newChunk: chunk, err } = getEsc(chunk.slice(1)))\n            if (err) {\n              return result\n            }\n          }\n\n          if (lo <= char && char <= hi) {\n            foundMatch = true\n          }\n\n          nRange++\n        }\n\n        if (foundMatch !== notNegated) {\n          return result\n        }\n        break\n      case '?':\n        str = str.slice(1)\n        chunk = chunk.slice(1)\n        break\n      case '\\\\':\n        chunk = chunk.slice(1)\n        if (chunk.length === 0) {\n          result.err = true\n          return result\n        }\n      // Fallthrough, missing break intentional.\n      default:\n        if (chunk[0] !== str[0]) {\n          return result\n        }\n        str = str.slice(1)\n        chunk = chunk.slice(1)\n    }\n  }\n\n  result.t = str\n  result.ok = true\n  result.err = false\n  return result\n}\n\n// getEsc gets a possibly-escaped character from chunk, for a character class.\nfunction getEsc(chunk): any {\n  const result = {\n    char: '',\n    newChunk: '',\n    err: false,\n  }\n\n  if (chunk.length === 0 || chunk[0] === '-' || chunk[0] === ']') {\n    result.err = true\n    return result\n  }\n\n  if (chunk[0] === '\\\\') {\n    chunk = chunk.slice(1)\n    if (chunk.length === 0) {\n      result.err = true\n      return result\n    }\n  }\n\n  // Unlike Go, JS strings operate on characters instead of bytes.\n  // This is why we aren't copying over the GetRuneFromString stuff.\n  result.char = chunk[0]\n  result.newChunk = chunk.slice(1)\n  if (result.newChunk.length === 0) {\n    result.err = true\n  }\n\n  return result\n}\n", "import { TransformerConfig } from './transformers'\n\nexport interface Rule {\n  scope: string\n  target_type: string\n  matchers: Matcher[]\n  transformers: Transformer[][]\n  destinationName?: string\n}\n\nexport interface Matcher {\n  type: string\n  ir: string\n}\n\nexport interface Transformer {\n  type: string\n  config?: TransformerConfig\n}\n\nexport default class Store {\n  private readonly rules = []\n\n  constructor(rules?: Rule[]) {\n    this.rules = rules || []\n  }\n\n  public getRulesByDestinationName(destinationName: string): Rule[] {\n    const rules: Rule[] = []\n    for (const rule of this.rules) {\n      // Rules with no destinationName are global (workspace || workspace::source)\n      if (rule.destinationName === destinationName || rule.destinationName === undefined) {\n        rules.push(rule)\n      }\n    }\n\n    return rules\n  }\n}\n", "export { default as transform } from './transformers'\nexport { default as matches } from './matchers'\nexport { default as Store } from './store'\n", "import * as tsub from '@segment/tsub'\nimport { Matcher, Rule } from '@segment/tsub/dist/store'\nimport { DestinationMiddlewareFunction } from '../middleware'\n\n// TODO: update tsub definition\ntype RoutingRuleMatcher = Matcher & {\n  config?: {\n    expr: string\n  }\n}\n\nexport type RoutingRule = Rule & {\n  matchers: RoutingRuleMatcher[]\n}\n\nexport const tsubMiddleware =\n  (rules: RoutingRule[]): DestinationMiddlewareFunction =>\n  ({ payload, integration, next }): void => {\n    const store = new tsub.Store(rules)\n    const rulesToApply = store.getRulesByDestinationName(integration)\n\n    rulesToApply.forEach((rule) => {\n      const { matchers, transformers } = rule\n\n      for (let i = 0; i < matchers.length; i++) {\n        if (tsub.matches(payload.obj, matchers[i])) {\n          payload.obj = tsub.transform(payload.obj, transformers[i])\n\n          if (payload.obj === null) {\n            return next(null)\n          }\n        }\n      }\n    })\n\n    next(payload)\n  }\n"],
  "mappings": "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",
  "names": ["PI", "s", "b", "c", "d", "h", "words", "j", "unescape", "encodeURI", "a", "length", "charCodeAt", "i", "k", "toString", "Math", "sin", "obj", "key", "def", "p", "undef", "split", "length", "require_lib", "Number", "require_lib", "Number", "require_lib", "require_lib", "require_lib", "require_lib", "require_lib", "require_main", "require_lib", "require_lib", "require_lib", "require_lib", "require_main", "require_lib", "require_main", "require_lib", "require_main", "require_lib", "require_main", "require_lib", "require_polyfill", "require_lib", "require_main", "require_lib", "require_lib", "require_main", "require_lib", "require_uint32array", "require_polyfill", "require_lib", "require_main", "require_lib", "require_main", "require_lib", "require_float64array", "require_polyfill", "require_lib", "require_main", "require_lib", "require_lib", "require_main", "require_lib", "require_uint8array", "require_polyfill", "require_lib", "require_main", "require_lib", "require_lib", "require_main", "require_lib", "require_uint16array", "require_polyfill", "require_lib", "Uint8Array", "Uint16Array", "require_main", "require_lib", "Uint32Array", "Float64Array", "require_main", "require_lib", "require_main", "Uint32Array", "Float64Array", "require_lib", "require_indices", "require_main", "Uint32Array", "Float64Array", "require_lib", "require_main", "require_lib", "require_lib", "require_main", "require_lib", "require_assign", "require_main", "require_lib", "require_lib", "require_main", "require_lib", "require_lib", "transform", "matches", "Store"]
}
