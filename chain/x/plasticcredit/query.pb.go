// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: empowerchain/plasticcredit/query.proto

package plasticcredit

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryIssuersRequest struct {
	Pagination query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QueryIssuersRequest) Reset()         { *m = QueryIssuersRequest{} }
func (m *QueryIssuersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIssuersRequest) ProtoMessage()    {}
func (*QueryIssuersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{2}
}
func (m *QueryIssuersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIssuersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIssuersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIssuersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIssuersRequest.Merge(m, src)
}
func (m *QueryIssuersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIssuersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIssuersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIssuersRequest proto.InternalMessageInfo

func (m *QueryIssuersRequest) GetPagination() query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return query.PageRequest{}
}

type QueryIssuersResponse struct {
	Issuers    []Issuer           `protobuf:"bytes,1,rep,name=issuers,proto3" json:"issuers"`
	Pagination query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QueryIssuersResponse) Reset()         { *m = QueryIssuersResponse{} }
func (m *QueryIssuersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIssuersResponse) ProtoMessage()    {}
func (*QueryIssuersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{3}
}
func (m *QueryIssuersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIssuersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIssuersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIssuersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIssuersResponse.Merge(m, src)
}
func (m *QueryIssuersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIssuersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIssuersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIssuersResponse proto.InternalMessageInfo

func (m *QueryIssuersResponse) GetIssuers() []Issuer {
	if m != nil {
		return m.Issuers
	}
	return nil
}

func (m *QueryIssuersResponse) GetPagination() query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return query.PageResponse{}
}

type QueryIssuerRequest struct {
	IssuerId uint64 `protobuf:"varint,1,opt,name=issuer_id,json=issuerId,proto3" json:"issuer_id,omitempty"`
}

func (m *QueryIssuerRequest) Reset()         { *m = QueryIssuerRequest{} }
func (m *QueryIssuerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIssuerRequest) ProtoMessage()    {}
func (*QueryIssuerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{4}
}
func (m *QueryIssuerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIssuerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIssuerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIssuerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIssuerRequest.Merge(m, src)
}
func (m *QueryIssuerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIssuerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIssuerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIssuerRequest proto.InternalMessageInfo

func (m *QueryIssuerRequest) GetIssuerId() uint64 {
	if m != nil {
		return m.IssuerId
	}
	return 0
}

type QueryIssuerResponse struct {
	Issuer Issuer `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer"`
}

func (m *QueryIssuerResponse) Reset()         { *m = QueryIssuerResponse{} }
func (m *QueryIssuerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIssuerResponse) ProtoMessage()    {}
func (*QueryIssuerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{5}
}
func (m *QueryIssuerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIssuerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIssuerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIssuerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIssuerResponse.Merge(m, src)
}
func (m *QueryIssuerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIssuerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIssuerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIssuerResponse proto.InternalMessageInfo

func (m *QueryIssuerResponse) GetIssuer() Issuer {
	if m != nil {
		return m.Issuer
	}
	return Issuer{}
}

type QueryApplicantsRequest struct {
	Pagination query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QueryApplicantsRequest) Reset()         { *m = QueryApplicantsRequest{} }
func (m *QueryApplicantsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryApplicantsRequest) ProtoMessage()    {}
func (*QueryApplicantsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{6}
}
func (m *QueryApplicantsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryApplicantsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryApplicantsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryApplicantsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryApplicantsRequest.Merge(m, src)
}
func (m *QueryApplicantsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryApplicantsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryApplicantsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryApplicantsRequest proto.InternalMessageInfo

func (m *QueryApplicantsRequest) GetPagination() query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return query.PageRequest{}
}

type QueryApplicantsResponse struct {
	Applicants []Applicant        `protobuf:"bytes,1,rep,name=applicants,proto3" json:"applicants"`
	Pagination query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QueryApplicantsResponse) Reset()         { *m = QueryApplicantsResponse{} }
func (m *QueryApplicantsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryApplicantsResponse) ProtoMessage()    {}
func (*QueryApplicantsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{7}
}
func (m *QueryApplicantsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryApplicantsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryApplicantsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryApplicantsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryApplicantsResponse.Merge(m, src)
}
func (m *QueryApplicantsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryApplicantsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryApplicantsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryApplicantsResponse proto.InternalMessageInfo

func (m *QueryApplicantsResponse) GetApplicants() []Applicant {
	if m != nil {
		return m.Applicants
	}
	return nil
}

func (m *QueryApplicantsResponse) GetPagination() query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return query.PageResponse{}
}

type QueryApplicantRequest struct {
	ApplicantId uint64 `protobuf:"varint,1,opt,name=applicant_id,json=applicantId,proto3" json:"applicant_id,omitempty"`
}

func (m *QueryApplicantRequest) Reset()         { *m = QueryApplicantRequest{} }
func (m *QueryApplicantRequest) String() string { return proto.CompactTextString(m) }
func (*QueryApplicantRequest) ProtoMessage()    {}
func (*QueryApplicantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{8}
}
func (m *QueryApplicantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryApplicantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryApplicantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryApplicantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryApplicantRequest.Merge(m, src)
}
func (m *QueryApplicantRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryApplicantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryApplicantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryApplicantRequest proto.InternalMessageInfo

func (m *QueryApplicantRequest) GetApplicantId() uint64 {
	if m != nil {
		return m.ApplicantId
	}
	return 0
}

type QueryApplicantResponse struct {
	Applicant Applicant `protobuf:"bytes,1,opt,name=applicant,proto3" json:"applicant"`
}

func (m *QueryApplicantResponse) Reset()         { *m = QueryApplicantResponse{} }
func (m *QueryApplicantResponse) String() string { return proto.CompactTextString(m) }
func (*QueryApplicantResponse) ProtoMessage()    {}
func (*QueryApplicantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{9}
}
func (m *QueryApplicantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryApplicantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryApplicantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryApplicantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryApplicantResponse.Merge(m, src)
}
func (m *QueryApplicantResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryApplicantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryApplicantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryApplicantResponse proto.InternalMessageInfo

func (m *QueryApplicantResponse) GetApplicant() Applicant {
	if m != nil {
		return m.Applicant
	}
	return Applicant{}
}

type QueryCreditTypesRequest struct {
	Pagination query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QueryCreditTypesRequest) Reset()         { *m = QueryCreditTypesRequest{} }
func (m *QueryCreditTypesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCreditTypesRequest) ProtoMessage()    {}
func (*QueryCreditTypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{10}
}
func (m *QueryCreditTypesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCreditTypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCreditTypesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCreditTypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCreditTypesRequest.Merge(m, src)
}
func (m *QueryCreditTypesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCreditTypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCreditTypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCreditTypesRequest proto.InternalMessageInfo

func (m *QueryCreditTypesRequest) GetPagination() query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return query.PageRequest{}
}

type QueryCreditTypesResponse struct {
	CreditTypes []CreditType       `protobuf:"bytes,1,rep,name=credit_types,json=creditTypes,proto3" json:"credit_types"`
	Pagination  query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QueryCreditTypesResponse) Reset()         { *m = QueryCreditTypesResponse{} }
func (m *QueryCreditTypesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCreditTypesResponse) ProtoMessage()    {}
func (*QueryCreditTypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{11}
}
func (m *QueryCreditTypesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCreditTypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCreditTypesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCreditTypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCreditTypesResponse.Merge(m, src)
}
func (m *QueryCreditTypesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCreditTypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCreditTypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCreditTypesResponse proto.InternalMessageInfo

func (m *QueryCreditTypesResponse) GetCreditTypes() []CreditType {
	if m != nil {
		return m.CreditTypes
	}
	return nil
}

func (m *QueryCreditTypesResponse) GetPagination() query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return query.PageResponse{}
}

type QueryCreditTypeRequest struct {
	CreditTypeAbbreviation string `protobuf:"bytes,1,opt,name=credit_type_abbreviation,json=creditTypeAbbreviation,proto3" json:"credit_type_abbreviation,omitempty"`
}

func (m *QueryCreditTypeRequest) Reset()         { *m = QueryCreditTypeRequest{} }
func (m *QueryCreditTypeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCreditTypeRequest) ProtoMessage()    {}
func (*QueryCreditTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{12}
}
func (m *QueryCreditTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCreditTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCreditTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCreditTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCreditTypeRequest.Merge(m, src)
}
func (m *QueryCreditTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCreditTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCreditTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCreditTypeRequest proto.InternalMessageInfo

func (m *QueryCreditTypeRequest) GetCreditTypeAbbreviation() string {
	if m != nil {
		return m.CreditTypeAbbreviation
	}
	return ""
}

type QueryCreditTypeResponse struct {
	CreditType CreditType `protobuf:"bytes,1,opt,name=credit_type,json=creditType,proto3" json:"credit_type"`
}

func (m *QueryCreditTypeResponse) Reset()         { *m = QueryCreditTypeResponse{} }
func (m *QueryCreditTypeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCreditTypeResponse) ProtoMessage()    {}
func (*QueryCreditTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{13}
}
func (m *QueryCreditTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCreditTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCreditTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCreditTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCreditTypeResponse.Merge(m, src)
}
func (m *QueryCreditTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCreditTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCreditTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCreditTypeResponse proto.InternalMessageInfo

func (m *QueryCreditTypeResponse) GetCreditType() CreditType {
	if m != nil {
		return m.CreditType
	}
	return CreditType{}
}

type QueryProjectsRequest struct {
	Pagination query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QueryProjectsRequest) Reset()         { *m = QueryProjectsRequest{} }
func (m *QueryProjectsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProjectsRequest) ProtoMessage()    {}
func (*QueryProjectsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{14}
}
func (m *QueryProjectsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProjectsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProjectsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProjectsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProjectsRequest.Merge(m, src)
}
func (m *QueryProjectsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProjectsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProjectsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProjectsRequest proto.InternalMessageInfo

func (m *QueryProjectsRequest) GetPagination() query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return query.PageRequest{}
}

type QueryProjectsResponse struct {
	Projects   []Project          `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects"`
	Pagination query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QueryProjectsResponse) Reset()         { *m = QueryProjectsResponse{} }
func (m *QueryProjectsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProjectsResponse) ProtoMessage()    {}
func (*QueryProjectsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{15}
}
func (m *QueryProjectsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProjectsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProjectsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProjectsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProjectsResponse.Merge(m, src)
}
func (m *QueryProjectsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProjectsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProjectsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProjectsResponse proto.InternalMessageInfo

func (m *QueryProjectsResponse) GetProjects() []Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

func (m *QueryProjectsResponse) GetPagination() query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return query.PageResponse{}
}

type QueryProjectRequest struct {
	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (m *QueryProjectRequest) Reset()         { *m = QueryProjectRequest{} }
func (m *QueryProjectRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProjectRequest) ProtoMessage()    {}
func (*QueryProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{16}
}
func (m *QueryProjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProjectRequest.Merge(m, src)
}
func (m *QueryProjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProjectRequest proto.InternalMessageInfo

func (m *QueryProjectRequest) GetProjectId() uint64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

type QueryProjectResponse struct {
	Project Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project"`
}

func (m *QueryProjectResponse) Reset()         { *m = QueryProjectResponse{} }
func (m *QueryProjectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProjectResponse) ProtoMessage()    {}
func (*QueryProjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{17}
}
func (m *QueryProjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProjectResponse.Merge(m, src)
}
func (m *QueryProjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProjectResponse proto.InternalMessageInfo

func (m *QueryProjectResponse) GetProject() Project {
	if m != nil {
		return m.Project
	}
	return Project{}
}

type QueryCreditCollectionRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryCreditCollectionRequest) Reset()         { *m = QueryCreditCollectionRequest{} }
func (m *QueryCreditCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCreditCollectionRequest) ProtoMessage()    {}
func (*QueryCreditCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{18}
}
func (m *QueryCreditCollectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCreditCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCreditCollectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCreditCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCreditCollectionRequest.Merge(m, src)
}
func (m *QueryCreditCollectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCreditCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCreditCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCreditCollectionRequest proto.InternalMessageInfo

func (m *QueryCreditCollectionRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryCreditCollectionResponse struct {
	CreditCollection CreditCollection `protobuf:"bytes,1,opt,name=credit_collection,json=creditCollection,proto3" json:"credit_collection"`
}

func (m *QueryCreditCollectionResponse) Reset()         { *m = QueryCreditCollectionResponse{} }
func (m *QueryCreditCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCreditCollectionResponse) ProtoMessage()    {}
func (*QueryCreditCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{19}
}
func (m *QueryCreditCollectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCreditCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCreditCollectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCreditCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCreditCollectionResponse.Merge(m, src)
}
func (m *QueryCreditCollectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCreditCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCreditCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCreditCollectionResponse proto.InternalMessageInfo

func (m *QueryCreditCollectionResponse) GetCreditCollection() CreditCollection {
	if m != nil {
		return m.CreditCollection
	}
	return CreditCollection{}
}

type QueryCreditBalancesRequest struct {
	Pagination query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QueryCreditBalancesRequest) Reset()         { *m = QueryCreditBalancesRequest{} }
func (m *QueryCreditBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCreditBalancesRequest) ProtoMessage()    {}
func (*QueryCreditBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{20}
}
func (m *QueryCreditBalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCreditBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCreditBalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCreditBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCreditBalancesRequest.Merge(m, src)
}
func (m *QueryCreditBalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCreditBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCreditBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCreditBalancesRequest proto.InternalMessageInfo

func (m *QueryCreditBalancesRequest) GetPagination() query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return query.PageRequest{}
}

type QueryCreditBalancesResponse struct {
	CreditBalances []CreditBalance    `protobuf:"bytes,1,rep,name=credit_balances,json=creditBalances,proto3" json:"credit_balances"`
	Pagination     query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QueryCreditBalancesResponse) Reset()         { *m = QueryCreditBalancesResponse{} }
func (m *QueryCreditBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCreditBalancesResponse) ProtoMessage()    {}
func (*QueryCreditBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{21}
}
func (m *QueryCreditBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCreditBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCreditBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCreditBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCreditBalancesResponse.Merge(m, src)
}
func (m *QueryCreditBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCreditBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCreditBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCreditBalancesResponse proto.InternalMessageInfo

func (m *QueryCreditBalancesResponse) GetCreditBalances() []CreditBalance {
	if m != nil {
		return m.CreditBalances
	}
	return nil
}

func (m *QueryCreditBalancesResponse) GetPagination() query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return query.PageResponse{}
}

type QueryCreditBalanceRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryCreditBalanceRequest) Reset()         { *m = QueryCreditBalanceRequest{} }
func (m *QueryCreditBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCreditBalanceRequest) ProtoMessage()    {}
func (*QueryCreditBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{22}
}
func (m *QueryCreditBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCreditBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCreditBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCreditBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCreditBalanceRequest.Merge(m, src)
}
func (m *QueryCreditBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCreditBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCreditBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCreditBalanceRequest proto.InternalMessageInfo

func (m *QueryCreditBalanceRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryCreditBalanceRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryCreditBalanceResponse struct {
	Balance CreditBalance `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance"`
}

func (m *QueryCreditBalanceResponse) Reset()         { *m = QueryCreditBalanceResponse{} }
func (m *QueryCreditBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCreditBalanceResponse) ProtoMessage()    {}
func (*QueryCreditBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{23}
}
func (m *QueryCreditBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCreditBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCreditBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCreditBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCreditBalanceResponse.Merge(m, src)
}
func (m *QueryCreditBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCreditBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCreditBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCreditBalanceResponse proto.InternalMessageInfo

func (m *QueryCreditBalanceResponse) GetBalance() CreditBalance {
	if m != nil {
		return m.Balance
	}
	return CreditBalance{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "empowerchain.plasticcredit.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "empowerchain.plasticcredit.QueryParamsResponse")
	proto.RegisterType((*QueryIssuersRequest)(nil), "empowerchain.plasticcredit.QueryIssuersRequest")
	proto.RegisterType((*QueryIssuersResponse)(nil), "empowerchain.plasticcredit.QueryIssuersResponse")
	proto.RegisterType((*QueryIssuerRequest)(nil), "empowerchain.plasticcredit.QueryIssuerRequest")
	proto.RegisterType((*QueryIssuerResponse)(nil), "empowerchain.plasticcredit.QueryIssuerResponse")
	proto.RegisterType((*QueryApplicantsRequest)(nil), "empowerchain.plasticcredit.QueryApplicantsRequest")
	proto.RegisterType((*QueryApplicantsResponse)(nil), "empowerchain.plasticcredit.QueryApplicantsResponse")
	proto.RegisterType((*QueryApplicantRequest)(nil), "empowerchain.plasticcredit.QueryApplicantRequest")
	proto.RegisterType((*QueryApplicantResponse)(nil), "empowerchain.plasticcredit.QueryApplicantResponse")
	proto.RegisterType((*QueryCreditTypesRequest)(nil), "empowerchain.plasticcredit.QueryCreditTypesRequest")
	proto.RegisterType((*QueryCreditTypesResponse)(nil), "empowerchain.plasticcredit.QueryCreditTypesResponse")
	proto.RegisterType((*QueryCreditTypeRequest)(nil), "empowerchain.plasticcredit.QueryCreditTypeRequest")
	proto.RegisterType((*QueryCreditTypeResponse)(nil), "empowerchain.plasticcredit.QueryCreditTypeResponse")
	proto.RegisterType((*QueryProjectsRequest)(nil), "empowerchain.plasticcredit.QueryProjectsRequest")
	proto.RegisterType((*QueryProjectsResponse)(nil), "empowerchain.plasticcredit.QueryProjectsResponse")
	proto.RegisterType((*QueryProjectRequest)(nil), "empowerchain.plasticcredit.QueryProjectRequest")
	proto.RegisterType((*QueryProjectResponse)(nil), "empowerchain.plasticcredit.QueryProjectResponse")
	proto.RegisterType((*QueryCreditCollectionRequest)(nil), "empowerchain.plasticcredit.QueryCreditCollectionRequest")
	proto.RegisterType((*QueryCreditCollectionResponse)(nil), "empowerchain.plasticcredit.QueryCreditCollectionResponse")
	proto.RegisterType((*QueryCreditBalancesRequest)(nil), "empowerchain.plasticcredit.QueryCreditBalancesRequest")
	proto.RegisterType((*QueryCreditBalancesResponse)(nil), "empowerchain.plasticcredit.QueryCreditBalancesResponse")
	proto.RegisterType((*QueryCreditBalanceRequest)(nil), "empowerchain.plasticcredit.QueryCreditBalanceRequest")
	proto.RegisterType((*QueryCreditBalanceResponse)(nil), "empowerchain.plasticcredit.QueryCreditBalanceResponse")
}

func init() {
	proto.RegisterFile("empowerchain/plasticcredit/query.proto", fileDescriptor_07e89fd14debe1c1)
}

var fileDescriptor_07e89fd14debe1c1 = []byte{
	// 1167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x5d, 0x6f, 0x1b, 0x45,
	0x14, 0xcd, 0x94, 0x36, 0x89, 0x6f, 0x4a, 0x69, 0x87, 0x50, 0xc2, 0xb6, 0x35, 0x65, 0x11, 0xe1,
	0x43, 0xb0, 0x13, 0xdb, 0xf9, 0xe4, 0xa3, 0xb4, 0x4e, 0x4b, 0x65, 0xa0, 0xaa, 0xb1, 0x90, 0xa8,
	0xe0, 0x21, 0x5a, 0xaf, 0x17, 0x67, 0x2b, 0x7b, 0x77, 0xeb, 0xdd, 0xb4, 0x54, 0x96, 0x25, 0xc4,
	0x2f, 0x40, 0xe2, 0x1f, 0xf0, 0x80, 0x04, 0x12, 0x42, 0x42, 0x20, 0x24, 0x1e, 0x78, 0xe0, 0x01,
	0xf5, 0x8d, 0x4a, 0x7d, 0x41, 0x3c, 0x20, 0x94, 0xf0, 0x43, 0x90, 0x67, 0xee, 0xec, 0xec, 0xda,
	0x89, 0xbd, 0x6b, 0x25, 0x4f, 0xb1, 0xc7, 0x73, 0xee, 0x3d, 0xe7, 0xdc, 0xd9, 0xd9, 0xa3, 0xc0,
	0xa2, 0xdd, 0xf6, 0xbd, 0x7b, 0x76, 0xc7, 0xda, 0x36, 0x1d, 0x97, 0xf9, 0x2d, 0x33, 0x08, 0x1d,
	0xcb, 0xea, 0xd8, 0x0d, 0x27, 0x64, 0x77, 0x76, 0xec, 0xce, 0x7d, 0xc3, 0xef, 0x78, 0xa1, 0x47,
	0xb5, 0xf8, 0x3e, 0x23, 0xb1, 0x4f, 0x7b, 0xc5, 0xf2, 0x82, 0xb6, 0x17, 0xb0, 0xba, 0x19, 0xd8,
	0x02, 0xc4, 0xee, 0x16, 0xea, 0x76, 0x68, 0x16, 0x98, 0x6f, 0x36, 0x1d, 0xd7, 0x0c, 0x1d, 0xcf,
	0x15, 0x75, 0xb4, 0x51, 0xfd, 0xc2, 0xfb, 0xbe, 0x1d, 0xe0, 0xbe, 0xf9, 0xa6, 0xd7, 0xf4, 0xf8,
	0x47, 0xd6, 0xff, 0x84, 0xab, 0xe7, 0x9b, 0x9e, 0xd7, 0x6c, 0xd9, 0xcc, 0xf4, 0x1d, 0x66, 0xba,
	0xae, 0x17, 0xf2, 0xd2, 0x88, 0xd1, 0xe7, 0x81, 0x7e, 0xd0, 0xef, 0x5e, 0x35, 0x3b, 0x66, 0x3b,
	0xa8, 0xd9, 0x77, 0x76, 0xec, 0x20, 0xd4, 0x3f, 0x82, 0x27, 0x13, 0xab, 0x81, 0xef, 0xb9, 0x81,
	0x4d, 0x2f, 0xc3, 0xb4, 0xcf, 0x57, 0x16, 0xc8, 0x45, 0xf2, 0xd2, 0x5c, 0x51, 0x37, 0x0e, 0x56,
	0x68, 0x08, 0x6c, 0xf9, 0xf8, 0x83, 0x7f, 0x9e, 0x9d, 0xaa, 0x21, 0x4e, 0xb7, 0xb0, 0x70, 0x25,
	0x08, 0x76, 0xec, 0x8e, 0xec, 0x47, 0xdf, 0x07, 0x50, 0xaa, 0xb1, 0xf8, 0xa2, 0x21, 0x2c, 0x32,
	0xfa, 0x16, 0x19, 0xc2, 0x57, 0xb4, 0xc8, 0xa8, 0x9a, 0x4d, 0x1b, 0xb1, 0xd8, 0x20, 0x86, 0xd7,
	0xbf, 0x25, 0x30, 0x9f, 0xec, 0x82, 0xfc, 0xcb, 0x30, 0xe3, 0x88, 0xa5, 0x05, 0x72, 0xf1, 0xb1,
	0x71, 0x02, 0x04, 0x1a, 0xeb, 0x4b, 0x20, 0xbd, 0x91, 0xa0, 0x7a, 0x8c, 0x53, 0x7d, 0x71, 0x2c,
	0x55, 0x41, 0x60, 0x1f, 0xae, 0x05, 0xf4, 0x5f, 0x34, 0x93, 0x7e, 0x9c, 0x83, 0x9c, 0xe8, 0xb7,
	0xe5, 0x34, 0xb8, 0x1d, 0xc7, 0x6b, 0xb3, 0x62, 0xa1, 0xd2, 0x88, 0x86, 0x23, 0x21, 0x6a, 0x38,
	0x62, 0x4b, 0x9a, 0xe1, 0x24, 0xb4, 0x21, 0x4e, 0xff, 0x14, 0xce, 0xf2, 0xc2, 0x57, 0x7c, 0xbf,
	0xe5, 0x58, 0xa6, 0x1b, 0x1e, 0xd1, 0x7c, 0x7e, 0x26, 0xf0, 0xf4, 0x50, 0x23, 0x54, 0xf1, 0x1e,
	0x80, 0x19, 0xad, 0xe2, 0x94, 0x5e, 0x18, 0xa5, 0x24, 0xaa, 0x21, 0x1b, 0x29, 0xf8, 0x61, 0xcf,
	0xea, 0x75, 0x78, 0x2a, 0x49, 0x5b, 0xda, 0xf3, 0x1c, 0x9c, 0x8c, 0xba, 0xaa, 0x89, 0xcd, 0x45,
	0x6b, 0x95, 0x86, 0x6e, 0x0d, 0x7a, 0x1b, 0x29, 0xae, 0x40, 0x2e, 0xda, 0x88, 0xd6, 0x66, 0x12,
	0xac, 0xd0, 0x7a, 0x13, 0x7d, 0xdd, 0xe4, 0x3b, 0x3f, 0xec, 0x5f, 0x0d, 0x47, 0x33, 0xc1, 0x5f,
	0x09, 0x2c, 0x0c, 0x77, 0x42, 0x41, 0x37, 0xe1, 0xa4, 0xa0, 0xba, 0xc5, 0x2f, 0x27, 0x1c, 0xe2,
	0xe2, 0x28, 0x4d, 0xaa, 0x0c, 0x36, 0x9b, 0xb3, 0x54, 0xe1, 0xc3, 0x1e, 0x63, 0x0d, 0x47, 0xa1,
	0x9a, 0x4a, 0x93, 0xd6, 0x61, 0x21, 0xc6, 0x7c, 0xcb, 0xac, 0xd7, 0x3b, 0xf6, 0x5d, 0x47, 0x59,
	0x96, 0xab, 0x9d, 0x55, 0xbc, 0xae, 0xc4, 0x7e, 0xd5, 0xb7, 0x87, 0x9c, 0x8f, 0xec, 0xb8, 0x01,
	0x73, 0xb1, 0xa2, 0x91, 0xf5, 0x59, 0xdc, 0x00, 0xd5, 0x55, 0x6f, 0xe0, 0xdd, 0x56, 0xed, 0x78,
	0xb7, 0x6d, 0xeb, 0xa8, 0x1e, 0xd1, 0xef, 0x09, 0x9e, 0x75, 0xd5, 0x06, 0xe5, 0x5c, 0x83, 0x59,
	0x1f, 0xd7, 0x70, 0xb2, 0xcf, 0x8f, 0x7c, 0x0b, 0x88, 0xbd, 0xd8, 0x22, 0x82, 0x1e, 0xf6, 0x4c,
	0x97, 0xe5, 0x0b, 0x4b, 0xd4, 0x97, 0xa6, 0x5c, 0x00, 0xc0, 0x8e, 0xea, 0xb1, 0xcc, 0xe1, 0x4a,
	0xa5, 0xa1, 0x7f, 0x92, 0xf4, 0x32, 0xd2, 0xb8, 0x09, 0x33, 0xb8, 0x09, 0x8d, 0xcc, 0x20, 0x51,
	0x22, 0xf5, 0x65, 0x38, 0x1f, 0x3b, 0x12, 0x9b, 0x5e, 0xab, 0x65, 0x5b, 0x7d, 0xae, 0x92, 0xdb,
	0x3c, 0x9c, 0x68, 0xd8, 0xae, 0xd7, 0xc6, 0x93, 0x25, 0xbe, 0xe8, 0x9f, 0x13, 0xb8, 0x70, 0x00,
	0x0c, 0xc9, 0x6d, 0xc1, 0x19, 0x3c, 0x4f, 0x56, 0xf4, 0x23, 0xd2, 0x7c, 0x75, 0xfc, 0xa9, 0x52,
	0x05, 0x91, 0xef, 0x69, 0x6b, 0x60, 0x5d, 0xbf, 0x0d, 0x5a, 0x8c, 0x41, 0xd9, 0x6c, 0x99, 0xae,
	0x75, 0x54, 0x17, 0xc9, 0x1f, 0x04, 0xce, 0xed, 0xdb, 0x0c, 0xc5, 0xde, 0x82, 0x27, 0x50, 0x6c,
	0x1d, 0x7f, 0xc2, 0x43, 0xf7, 0xf2, 0x78, 0xa9, 0x58, 0x0c, 0xbb, 0x9e, 0xb2, 0x12, 0x1d, 0x0e,
	0xfb, 0x00, 0x5e, 0x87, 0x67, 0x86, 0x75, 0xc4, 0x46, 0xed, 0xdd, 0x73, 0xf1, 0xcd, 0x9c, 0xab,
	0x89, 0x2f, 0xea, 0x00, 0x1c, 0x8b, 0x1f, 0x80, 0xe6, 0x7e, 0xee, 0xc7, 0x5e, 0x16, 0x33, 0x68,
	0x04, 0x5a, 0x9f, 0xd9, 0x07, 0x89, 0x2f, 0xfe, 0x7d, 0x06, 0x4e, 0xf0, 0x4e, 0xf4, 0x6b, 0x02,
	0xd3, 0x22, 0xad, 0x51, 0x63, 0x54, 0xb9, 0xe1, 0xa0, 0xa8, 0xb1, 0xd4, 0xfb, 0x85, 0x00, 0x7d,
	0xed, 0x8b, 0x47, 0xff, 0x7d, 0x75, 0xac, 0x40, 0x19, 0x4b, 0x84, 0xda, 0x11, 0x09, 0x57, 0x24,
	0x47, 0xfa, 0x0d, 0x81, 0x19, 0xcc, 0x73, 0x74, 0x7c, 0xd7, 0x64, 0xbe, 0xd4, 0x96, 0xd2, 0x03,
	0x90, 0xe7, 0x3a, 0xe7, 0x59, 0xa4, 0x4b, 0xa9, 0x79, 0xca, 0x80, 0xf8, 0x03, 0x81, 0x69, 0x51,
	0x2d, 0x85, 0x9b, 0x89, 0xd8, 0xa7, 0xb1, 0xd4, 0xfb, 0x91, 0xe5, 0x55, 0xce, 0xf2, 0x12, 0x7d,
	0x33, 0x2b, 0x4b, 0xd6, 0x8d, 0xf2, 0x65, 0x8f, 0xfe, 0x48, 0x00, 0x54, 0x14, 0xa3, 0xc5, 0xb1,
	0x2c, 0x86, 0x02, 0xa2, 0x56, 0xca, 0x84, 0x41, 0xf6, 0x6f, 0x70, 0xf6, 0x2b, 0xb4, 0x94, 0x9a,
	0x7d, 0x2c, 0xdb, 0xfd, 0x46, 0x20, 0x17, 0xd5, 0xa4, 0x85, 0xf4, 0xfd, 0x25, 0xe5, 0x62, 0x16,
	0x08, 0x32, 0x7e, 0x97, 0x33, 0xbe, 0x4a, 0xcb, 0x13, 0x30, 0x66, 0xdd, 0x78, 0x46, 0xec, 0xd1,
	0x5f, 0x08, 0xcc, 0xc5, 0xe2, 0x13, 0x1d, 0x6f, 0xe1, 0x70, 0xac, 0xd3, 0x96, 0xb3, 0x81, 0x50,
	0xc6, 0x5b, 0x5c, 0xc6, 0x1a, 0x5d, 0x49, 0x2d, 0x43, 0xfc, 0x79, 0x8d, 0x07, 0x3a, 0xfa, 0x27,
	0x01, 0x50, 0x65, 0x53, 0x9c, 0x97, 0xa1, 0xa4, 0xa5, 0x95, 0x32, 0x61, 0x90, 0xf6, 0x2d, 0x4e,
	0xbb, 0x46, 0xab, 0x13, 0xd1, 0x66, 0xdd, 0x83, 0xb2, 0x5d, 0x8f, 0x7e, 0x47, 0x60, 0x56, 0x26,
	0x1d, 0x3a, 0xfe, 0xb2, 0x18, 0xc8, 0x5e, 0x5a, 0x21, 0x03, 0x02, 0xb5, 0x6c, 0x70, 0x2d, 0x25,
	0x5a, 0x48, 0x7f, 0x0f, 0x4a, 0x7e, 0x3f, 0x11, 0x98, 0xc1, 0x7a, 0x29, 0x6e, 0xc2, 0x64, 0x22,
	0xd2, 0x96, 0xd2, 0x03, 0x90, 0xe9, 0x3b, 0x9c, 0xe9, 0x65, 0x7a, 0x29, 0x33, 0x53, 0xd6, 0x55,
	0xe1, 0xab, 0x47, 0x1f, 0x11, 0x38, 0x3d, 0x98, 0x41, 0xe8, 0x7a, 0xca, 0x73, 0x30, 0x14, 0x9f,
	0xb4, 0x8d, 0x09, 0x90, 0x13, 0x3f, 0xc5, 0xe2, 0x8f, 0xca, 0x5b, 0x01, 0xeb, 0xf2, 0xb7, 0x75,
	0x8f, 0xfe, 0x4e, 0xe0, 0x54, 0x32, 0xbb, 0xd0, 0xd5, 0x94, 0xcc, 0x06, 0x92, 0x95, 0xb6, 0x96,
	0x19, 0x87, 0x7a, 0xde, 0xe6, 0x7a, 0x36, 0xe8, 0x5a, 0x46, 0x3d, 0x32, 0x52, 0xf5, 0x1f, 0xe8,
	0xc7, 0x13, 0xb5, 0xe9, 0x4a, 0x36, 0x2e, 0x52, 0xc2, 0x6a, 0x56, 0x18, 0x2a, 0xb8, 0xc9, 0x15,
	0x54, 0xe8, 0xf5, 0x09, 0x15, 0xb0, 0x2e, 0x8f, 0x54, 0x3d, 0x39, 0x96, 0x72, 0xf5, 0xc1, 0x6e,
	0x9e, 0x3c, 0xdc, 0xcd, 0x93, 0x7f, 0x77, 0xf3, 0xe4, 0xcb, 0xbd, 0xfc, 0xd4, 0xc3, 0xbd, 0xfc,
	0xd4, 0x5f, 0x7b, 0xf9, 0xa9, 0x8f, 0x57, 0x9b, 0x4e, 0xb8, 0xbd, 0x53, 0x37, 0x2c, 0xaf, 0xcd,
	0xae, 0x89, 0xfa, 0x55, 0x51, 0x39, 0xd9, 0xee, 0xb3, 0x64, 0xc3, 0xfa, 0x34, 0xff, 0x7f, 0x59,
	0xe9, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0x91, 0x5e, 0x58, 0xfd, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	Issuers(ctx context.Context, in *QueryIssuersRequest, opts ...grpc.CallOption) (*QueryIssuersResponse, error)
	Issuer(ctx context.Context, in *QueryIssuerRequest, opts ...grpc.CallOption) (*QueryIssuerResponse, error)
	Applicants(ctx context.Context, in *QueryApplicantsRequest, opts ...grpc.CallOption) (*QueryApplicantsResponse, error)
	Applicant(ctx context.Context, in *QueryApplicantRequest, opts ...grpc.CallOption) (*QueryApplicantResponse, error)
	CreditTypes(ctx context.Context, in *QueryCreditTypesRequest, opts ...grpc.CallOption) (*QueryCreditTypesResponse, error)
	CreditType(ctx context.Context, in *QueryCreditTypeRequest, opts ...grpc.CallOption) (*QueryCreditTypeResponse, error)
	Projects(ctx context.Context, in *QueryProjectsRequest, opts ...grpc.CallOption) (*QueryProjectsResponse, error)
	Project(ctx context.Context, in *QueryProjectRequest, opts ...grpc.CallOption) (*QueryProjectResponse, error)
	CreditCollection(ctx context.Context, in *QueryCreditCollectionRequest, opts ...grpc.CallOption) (*QueryCreditCollectionResponse, error)
	CreditBalances(ctx context.Context, in *QueryCreditBalancesRequest, opts ...grpc.CallOption) (*QueryCreditBalancesResponse, error)
	CreditBalance(ctx context.Context, in *QueryCreditBalanceRequest, opts ...grpc.CallOption) (*QueryCreditBalanceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.plasticcredit.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Issuers(ctx context.Context, in *QueryIssuersRequest, opts ...grpc.CallOption) (*QueryIssuersResponse, error) {
	out := new(QueryIssuersResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.plasticcredit.Query/Issuers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Issuer(ctx context.Context, in *QueryIssuerRequest, opts ...grpc.CallOption) (*QueryIssuerResponse, error) {
	out := new(QueryIssuerResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.plasticcredit.Query/Issuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Applicants(ctx context.Context, in *QueryApplicantsRequest, opts ...grpc.CallOption) (*QueryApplicantsResponse, error) {
	out := new(QueryApplicantsResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.plasticcredit.Query/Applicants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Applicant(ctx context.Context, in *QueryApplicantRequest, opts ...grpc.CallOption) (*QueryApplicantResponse, error) {
	out := new(QueryApplicantResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.plasticcredit.Query/Applicant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreditTypes(ctx context.Context, in *QueryCreditTypesRequest, opts ...grpc.CallOption) (*QueryCreditTypesResponse, error) {
	out := new(QueryCreditTypesResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.plasticcredit.Query/CreditTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreditType(ctx context.Context, in *QueryCreditTypeRequest, opts ...grpc.CallOption) (*QueryCreditTypeResponse, error) {
	out := new(QueryCreditTypeResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.plasticcredit.Query/CreditType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Projects(ctx context.Context, in *QueryProjectsRequest, opts ...grpc.CallOption) (*QueryProjectsResponse, error) {
	out := new(QueryProjectsResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.plasticcredit.Query/Projects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Project(ctx context.Context, in *QueryProjectRequest, opts ...grpc.CallOption) (*QueryProjectResponse, error) {
	out := new(QueryProjectResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.plasticcredit.Query/Project", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreditCollection(ctx context.Context, in *QueryCreditCollectionRequest, opts ...grpc.CallOption) (*QueryCreditCollectionResponse, error) {
	out := new(QueryCreditCollectionResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.plasticcredit.Query/CreditCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreditBalances(ctx context.Context, in *QueryCreditBalancesRequest, opts ...grpc.CallOption) (*QueryCreditBalancesResponse, error) {
	out := new(QueryCreditBalancesResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.plasticcredit.Query/CreditBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreditBalance(ctx context.Context, in *QueryCreditBalanceRequest, opts ...grpc.CallOption) (*QueryCreditBalanceResponse, error) {
	out := new(QueryCreditBalanceResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.plasticcredit.Query/CreditBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	Issuers(context.Context, *QueryIssuersRequest) (*QueryIssuersResponse, error)
	Issuer(context.Context, *QueryIssuerRequest) (*QueryIssuerResponse, error)
	Applicants(context.Context, *QueryApplicantsRequest) (*QueryApplicantsResponse, error)
	Applicant(context.Context, *QueryApplicantRequest) (*QueryApplicantResponse, error)
	CreditTypes(context.Context, *QueryCreditTypesRequest) (*QueryCreditTypesResponse, error)
	CreditType(context.Context, *QueryCreditTypeRequest) (*QueryCreditTypeResponse, error)
	Projects(context.Context, *QueryProjectsRequest) (*QueryProjectsResponse, error)
	Project(context.Context, *QueryProjectRequest) (*QueryProjectResponse, error)
	CreditCollection(context.Context, *QueryCreditCollectionRequest) (*QueryCreditCollectionResponse, error)
	CreditBalances(context.Context, *QueryCreditBalancesRequest) (*QueryCreditBalancesResponse, error)
	CreditBalance(context.Context, *QueryCreditBalanceRequest) (*QueryCreditBalanceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Issuers(ctx context.Context, req *QueryIssuersRequest) (*QueryIssuersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Issuers not implemented")
}
func (*UnimplementedQueryServer) Issuer(ctx context.Context, req *QueryIssuerRequest) (*QueryIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Issuer not implemented")
}
func (*UnimplementedQueryServer) Applicants(ctx context.Context, req *QueryApplicantsRequest) (*QueryApplicantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Applicants not implemented")
}
func (*UnimplementedQueryServer) Applicant(ctx context.Context, req *QueryApplicantRequest) (*QueryApplicantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Applicant not implemented")
}
func (*UnimplementedQueryServer) CreditTypes(ctx context.Context, req *QueryCreditTypesRequest) (*QueryCreditTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditTypes not implemented")
}
func (*UnimplementedQueryServer) CreditType(ctx context.Context, req *QueryCreditTypeRequest) (*QueryCreditTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditType not implemented")
}
func (*UnimplementedQueryServer) Projects(ctx context.Context, req *QueryProjectsRequest) (*QueryProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Projects not implemented")
}
func (*UnimplementedQueryServer) Project(ctx context.Context, req *QueryProjectRequest) (*QueryProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Project not implemented")
}
func (*UnimplementedQueryServer) CreditCollection(ctx context.Context, req *QueryCreditCollectionRequest) (*QueryCreditCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditCollection not implemented")
}
func (*UnimplementedQueryServer) CreditBalances(ctx context.Context, req *QueryCreditBalancesRequest) (*QueryCreditBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditBalances not implemented")
}
func (*UnimplementedQueryServer) CreditBalance(ctx context.Context, req *QueryCreditBalanceRequest) (*QueryCreditBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditBalance not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.plasticcredit.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Issuers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIssuersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Issuers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.plasticcredit.Query/Issuers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Issuers(ctx, req.(*QueryIssuersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Issuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Issuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.plasticcredit.Query/Issuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Issuer(ctx, req.(*QueryIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Applicants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryApplicantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Applicants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.plasticcredit.Query/Applicants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Applicants(ctx, req.(*QueryApplicantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Applicant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryApplicantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Applicant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.plasticcredit.Query/Applicant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Applicant(ctx, req.(*QueryApplicantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreditTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCreditTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreditTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.plasticcredit.Query/CreditTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreditTypes(ctx, req.(*QueryCreditTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreditType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCreditTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreditType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.plasticcredit.Query/CreditType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreditType(ctx, req.(*QueryCreditTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Projects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Projects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.plasticcredit.Query/Projects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Projects(ctx, req.(*QueryProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Project_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Project(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.plasticcredit.Query/Project",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Project(ctx, req.(*QueryProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreditCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCreditCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreditCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.plasticcredit.Query/CreditCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreditCollection(ctx, req.(*QueryCreditCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreditBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCreditBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreditBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.plasticcredit.Query/CreditBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreditBalances(ctx, req.(*QueryCreditBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreditBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCreditBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreditBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.plasticcredit.Query/CreditBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreditBalance(ctx, req.(*QueryCreditBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "empowerchain.plasticcredit.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Issuers",
			Handler:    _Query_Issuers_Handler,
		},
		{
			MethodName: "Issuer",
			Handler:    _Query_Issuer_Handler,
		},
		{
			MethodName: "Applicants",
			Handler:    _Query_Applicants_Handler,
		},
		{
			MethodName: "Applicant",
			Handler:    _Query_Applicant_Handler,
		},
		{
			MethodName: "CreditTypes",
			Handler:    _Query_CreditTypes_Handler,
		},
		{
			MethodName: "CreditType",
			Handler:    _Query_CreditType_Handler,
		},
		{
			MethodName: "Projects",
			Handler:    _Query_Projects_Handler,
		},
		{
			MethodName: "Project",
			Handler:    _Query_Project_Handler,
		},
		{
			MethodName: "CreditCollection",
			Handler:    _Query_CreditCollection_Handler,
		},
		{
			MethodName: "CreditBalances",
			Handler:    _Query_CreditBalances_Handler,
		},
		{
			MethodName: "CreditBalance",
			Handler:    _Query_CreditBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "empowerchain/plasticcredit/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryIssuersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIssuersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIssuersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryIssuersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIssuersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIssuersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Issuers) > 0 {
		for iNdEx := len(m.Issuers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Issuers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIssuerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIssuerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIssuerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IssuerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.IssuerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIssuerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIssuerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIssuerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Issuer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryApplicantsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryApplicantsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryApplicantsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryApplicantsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryApplicantsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryApplicantsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Applicants) > 0 {
		for iNdEx := len(m.Applicants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Applicants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryApplicantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryApplicantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryApplicantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApplicantId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ApplicantId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryApplicantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryApplicantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryApplicantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Applicant.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCreditTypesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCreditTypesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCreditTypesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCreditTypesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCreditTypesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCreditTypesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.CreditTypes) > 0 {
		for iNdEx := len(m.CreditTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CreditTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCreditTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCreditTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCreditTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CreditTypeAbbreviation) > 0 {
		i -= len(m.CreditTypeAbbreviation)
		copy(dAtA[i:], m.CreditTypeAbbreviation)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CreditTypeAbbreviation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCreditTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCreditTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCreditTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CreditType.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryProjectsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProjectsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProjectsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryProjectsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProjectsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProjectsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Projects) > 0 {
		for iNdEx := len(m.Projects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Projects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryProjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProjectId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryProjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Project.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCreditCollectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCreditCollectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCreditCollectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCreditCollectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCreditCollectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCreditCollectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CreditCollection.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCreditBalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCreditBalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCreditBalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCreditBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCreditBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCreditBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.CreditBalances) > 0 {
		for iNdEx := len(m.CreditBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CreditBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCreditBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCreditBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCreditBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCreditBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCreditBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCreditBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryIssuersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryIssuersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Issuers) > 0 {
		for _, e := range m.Issuers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryIssuerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IssuerId != 0 {
		n += 1 + sovQuery(uint64(m.IssuerId))
	}
	return n
}

func (m *QueryIssuerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Issuer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryApplicantsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryApplicantsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Applicants) > 0 {
		for _, e := range m.Applicants {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryApplicantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApplicantId != 0 {
		n += 1 + sovQuery(uint64(m.ApplicantId))
	}
	return n
}

func (m *QueryApplicantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Applicant.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCreditTypesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCreditTypesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CreditTypes) > 0 {
		for _, e := range m.CreditTypes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCreditTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CreditTypeAbbreviation)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCreditTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CreditType.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryProjectsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryProjectsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Projects) > 0 {
		for _, e := range m.Projects {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryProjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectId != 0 {
		n += 1 + sovQuery(uint64(m.ProjectId))
	}
	return n
}

func (m *QueryProjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Project.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCreditCollectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCreditCollectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CreditCollection.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCreditBalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCreditBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CreditBalances) > 0 {
		for _, e := range m.CreditBalances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCreditBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCreditBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Balance.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIssuersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIssuersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIssuersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIssuersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIssuersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIssuersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuers = append(m.Issuers, Issuer{})
			if err := m.Issuers[len(m.Issuers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIssuerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIssuerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIssuerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerId", wireType)
			}
			m.IssuerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIssuerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIssuerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIssuerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Issuer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryApplicantsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryApplicantsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryApplicantsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryApplicantsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryApplicantsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryApplicantsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applicants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applicants = append(m.Applicants, Applicant{})
			if err := m.Applicants[len(m.Applicants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryApplicantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryApplicantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryApplicantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicantId", wireType)
			}
			m.ApplicantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplicantId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryApplicantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryApplicantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryApplicantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applicant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Applicant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCreditTypesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCreditTypesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCreditTypesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCreditTypesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCreditTypesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCreditTypesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreditTypes = append(m.CreditTypes, CreditType{})
			if err := m.CreditTypes[len(m.CreditTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCreditTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCreditTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCreditTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditTypeAbbreviation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreditTypeAbbreviation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCreditTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCreditTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCreditTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreditType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProjectsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProjectsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProjectsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProjectsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProjectsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProjectsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Projects = append(m.Projects, Project{})
			if err := m.Projects[len(m.Projects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			m.ProjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Project.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCreditCollectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCreditCollectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCreditCollectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCreditCollectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCreditCollectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCreditCollectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditCollection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreditCollection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCreditBalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCreditBalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCreditBalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCreditBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCreditBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCreditBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreditBalances = append(m.CreditBalances, CreditBalance{})
			if err := m.CreditBalances[len(m.CreditBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCreditBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCreditBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCreditBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCreditBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCreditBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCreditBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
