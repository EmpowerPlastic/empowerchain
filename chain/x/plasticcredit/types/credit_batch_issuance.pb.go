// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: empowerchain/plasticcredit/credit_batch_issuance.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreditBatchIssuance struct {
	ProjectId      uint64        `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TotalAmount    *CreditAmount `protobuf:"bytes,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	CreditData     []*ProvenData `protobuf:"bytes,3,rep,name=credit_data,json=creditData,proto3" json:"credit_data,omitempty"`
	AdditionalData []*ProvenData `protobuf:"bytes,4,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty"`
}

func (m *CreditBatchIssuance) Reset()         { *m = CreditBatchIssuance{} }
func (m *CreditBatchIssuance) String() string { return proto.CompactTextString(m) }
func (*CreditBatchIssuance) ProtoMessage()    {}
func (*CreditBatchIssuance) Descriptor() ([]byte, []int) {
	return fileDescriptor_886b2ab143553289, []int{0}
}
func (m *CreditBatchIssuance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreditBatchIssuance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreditBatchIssuance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreditBatchIssuance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditBatchIssuance.Merge(m, src)
}
func (m *CreditBatchIssuance) XXX_Size() int {
	return m.Size()
}
func (m *CreditBatchIssuance) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditBatchIssuance.DiscardUnknown(m)
}

var xxx_messageInfo_CreditBatchIssuance proto.InternalMessageInfo

func (m *CreditBatchIssuance) GetProjectId() uint64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *CreditBatchIssuance) GetTotalAmount() *CreditAmount {
	if m != nil {
		return m.TotalAmount
	}
	return nil
}

func (m *CreditBatchIssuance) GetCreditData() []*ProvenData {
	if m != nil {
		return m.CreditData
	}
	return nil
}

func (m *CreditBatchIssuance) GetAdditionalData() []*ProvenData {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

func init() {
	proto.RegisterType((*CreditBatchIssuance)(nil), "empowerchain.plasticcredit.CreditBatchIssuance")
}

func init() {
	proto.RegisterFile("empowerchain/plasticcredit/credit_batch_issuance.proto", fileDescriptor_886b2ab143553289)
}

var fileDescriptor_886b2ab143553289 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4b, 0xcd, 0x2d, 0xc8,
	0x2f, 0x4f, 0x2d, 0x4a, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x2f, 0xc8, 0x49, 0x2c, 0x2e, 0xc9, 0x4c,
	0x4e, 0x2e, 0x4a, 0x4d, 0xc9, 0x2c, 0xd1, 0x87, 0x50, 0xf1, 0x49, 0x89, 0x25, 0xc9, 0x19, 0xf1,
	0x99, 0xc5, 0xc5, 0xa5, 0x89, 0x79, 0xc9, 0xa9, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x52,
	0xc8, 0xfa, 0xf4, 0x50, 0xf4, 0x49, 0xe9, 0x11, 0x36, 0x33, 0x31, 0x37, 0xbf, 0x34, 0xaf, 0x04,
	0x62, 0x96, 0x94, 0x0e, 0x1e, 0xf5, 0x05, 0x45, 0xf9, 0x65, 0xa9, 0x79, 0xf1, 0x29, 0x89, 0x25,
	0x89, 0x10, 0xd5, 0x4a, 0xb3, 0x99, 0xb8, 0x84, 0x9d, 0xc1, 0x92, 0x4e, 0x20, 0x87, 0x79, 0x42,
	0xdd, 0x25, 0x24, 0xcb, 0xc5, 0x55, 0x50, 0x94, 0x9f, 0x95, 0x9a, 0x5c, 0x12, 0x9f, 0x99, 0x22,
	0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x12, 0xc4, 0x09, 0x15, 0xf1, 0x4c, 0x11, 0xf2, 0xe6, 0xe2, 0x29,
	0xc9, 0x2f, 0x49, 0xcc, 0x81, 0x5a, 0x2d, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x6d, 0xa4, 0xa1, 0x87,
	0xdb, 0x1f, 0x7a, 0x10, 0x5b, 0x1c, 0xc1, 0xea, 0x83, 0xb8, 0xc1, 0xba, 0x21, 0x1c, 0x21, 0x77,
	0x2e, 0x6e, 0xa8, 0x47, 0x40, 0x0e, 0x93, 0x60, 0x56, 0x60, 0xd6, 0xe0, 0x36, 0x52, 0xc3, 0x67,
	0x56, 0x00, 0xd8, 0x1f, 0x2e, 0x89, 0x25, 0x89, 0x41, 0x5c, 0x10, 0x21, 0x10, 0x5b, 0xc8, 0x9f,
	0x8b, 0x3f, 0x31, 0x25, 0x25, 0xb3, 0x24, 0x33, 0x3f, 0x2f, 0x31, 0x07, 0x62, 0x18, 0x0b, 0x49,
	0x86, 0xf1, 0x21, 0xb4, 0x83, 0xf8, 0x4e, 0x21, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7,
	0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c,
	0xc7, 0x10, 0x65, 0x95, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x8f, 0x12,
	0xe0, 0x28, 0x9c, 0x0a, 0xb4, 0xf0, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0x07, 0xbd,
	0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x72, 0xc7, 0x05, 0x35, 0x2e, 0x02, 0x00, 0x00,
}

func (m *CreditBatchIssuance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreditBatchIssuance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreditBatchIssuance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdditionalData) > 0 {
		for iNdEx := len(m.AdditionalData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdditionalData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCreditBatchIssuance(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CreditData) > 0 {
		for iNdEx := len(m.CreditData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CreditData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCreditBatchIssuance(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TotalAmount != nil {
		{
			size, err := m.TotalAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCreditBatchIssuance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProjectId != 0 {
		i = encodeVarintCreditBatchIssuance(dAtA, i, uint64(m.ProjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCreditBatchIssuance(dAtA []byte, offset int, v uint64) int {
	offset -= sovCreditBatchIssuance(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreditBatchIssuance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectId != 0 {
		n += 1 + sovCreditBatchIssuance(uint64(m.ProjectId))
	}
	if m.TotalAmount != nil {
		l = m.TotalAmount.Size()
		n += 1 + l + sovCreditBatchIssuance(uint64(l))
	}
	if len(m.CreditData) > 0 {
		for _, e := range m.CreditData {
			l = e.Size()
			n += 1 + l + sovCreditBatchIssuance(uint64(l))
		}
	}
	if len(m.AdditionalData) > 0 {
		for _, e := range m.AdditionalData {
			l = e.Size()
			n += 1 + l + sovCreditBatchIssuance(uint64(l))
		}
	}
	return n
}

func sovCreditBatchIssuance(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCreditBatchIssuance(x uint64) (n int) {
	return sovCreditBatchIssuance(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreditBatchIssuance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCreditBatchIssuance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreditBatchIssuance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreditBatchIssuance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			m.ProjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreditBatchIssuance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreditBatchIssuance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCreditBatchIssuance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCreditBatchIssuance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalAmount == nil {
				m.TotalAmount = &CreditAmount{}
			}
			if err := m.TotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreditBatchIssuance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCreditBatchIssuance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCreditBatchIssuance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreditData = append(m.CreditData, &ProvenData{})
			if err := m.CreditData[len(m.CreditData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreditBatchIssuance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCreditBatchIssuance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCreditBatchIssuance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalData = append(m.AdditionalData, &ProvenData{})
			if err := m.AdditionalData[len(m.AdditionalData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCreditBatchIssuance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCreditBatchIssuance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCreditBatchIssuance(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCreditBatchIssuance
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCreditBatchIssuance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCreditBatchIssuance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCreditBatchIssuance
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCreditBatchIssuance
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCreditBatchIssuance
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCreditBatchIssuance        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCreditBatchIssuance          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCreditBatchIssuance = fmt.Errorf("proto: unexpected end of group")
)
