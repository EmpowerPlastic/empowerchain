// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: empowerchain/plasticcredit/credit_balance.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreditBalance struct {
	Owner   string        `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Balance *CreditAmount `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (m *CreditBalance) Reset()         { *m = CreditBalance{} }
func (m *CreditBalance) String() string { return proto.CompactTextString(m) }
func (*CreditBalance) ProtoMessage()    {}
func (*CreditBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a37bb5a8d062ecd, []int{0}
}
func (m *CreditBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreditBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreditBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreditBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditBalance.Merge(m, src)
}
func (m *CreditBalance) XXX_Size() int {
	return m.Size()
}
func (m *CreditBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditBalance.DiscardUnknown(m)
}

var xxx_messageInfo_CreditBalance proto.InternalMessageInfo

func (m *CreditBalance) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CreditBalance) GetBalance() *CreditAmount {
	if m != nil {
		return m.Balance
	}
	return nil
}

type BatchDenomToCreditBalance struct {
	BatchDenom     string           `protobuf:"bytes,1,opt,name=batch_denom,json=batchDenom,proto3" json:"batch_denom,omitempty"`
	CreditBalances []*CreditBalance `protobuf:"bytes,2,rep,name=credit_balances,json=creditBalances,proto3" json:"credit_balances,omitempty"`
}

func (m *BatchDenomToCreditBalance) Reset()         { *m = BatchDenomToCreditBalance{} }
func (m *BatchDenomToCreditBalance) String() string { return proto.CompactTextString(m) }
func (*BatchDenomToCreditBalance) ProtoMessage()    {}
func (*BatchDenomToCreditBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a37bb5a8d062ecd, []int{1}
}
func (m *BatchDenomToCreditBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchDenomToCreditBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchDenomToCreditBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchDenomToCreditBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchDenomToCreditBalance.Merge(m, src)
}
func (m *BatchDenomToCreditBalance) XXX_Size() int {
	return m.Size()
}
func (m *BatchDenomToCreditBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchDenomToCreditBalance.DiscardUnknown(m)
}

var xxx_messageInfo_BatchDenomToCreditBalance proto.InternalMessageInfo

func (m *BatchDenomToCreditBalance) GetBatchDenom() string {
	if m != nil {
		return m.BatchDenom
	}
	return ""
}

func (m *BatchDenomToCreditBalance) GetCreditBalances() []*CreditBalance {
	if m != nil {
		return m.CreditBalances
	}
	return nil
}

func init() {
	proto.RegisterType((*CreditBalance)(nil), "empowerchain.plasticcredit.CreditBalance")
	proto.RegisterType((*BatchDenomToCreditBalance)(nil), "empowerchain.plasticcredit.BatchDenomToCreditBalance")
}

func init() {
	proto.RegisterFile("empowerchain/plasticcredit/credit_balance.proto", fileDescriptor_2a37bb5a8d062ecd)
}

var fileDescriptor_2a37bb5a8d062ecd = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4f, 0xcd, 0x2d, 0xc8,
	0x2f, 0x4f, 0x2d, 0x4a, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x2f, 0xc8, 0x49, 0x2c, 0x2e, 0xc9, 0x4c,
	0x4e, 0x2e, 0x4a, 0x4d, 0xc9, 0x2c, 0xd1, 0x87, 0x50, 0xf1, 0x49, 0x89, 0x39, 0x89, 0x79, 0xc9,
	0xa9, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x52, 0xc8, 0x1a, 0xf4, 0x50, 0x34, 0x48, 0xe9,
	0x11, 0x36, 0x2c, 0x31, 0x37, 0xbf, 0x34, 0xaf, 0x04, 0x62, 0x96, 0x52, 0x26, 0x17, 0xaf, 0x33,
	0x58, 0xd8, 0x09, 0x62, 0x85, 0x90, 0x08, 0x17, 0x6b, 0x7e, 0x79, 0x5e, 0x6a, 0x91, 0x04, 0xa3,
	0x02, 0xa3, 0x06, 0x67, 0x10, 0x84, 0x23, 0xe4, 0xc4, 0xc5, 0x0e, 0x75, 0x83, 0x04, 0x93, 0x02,
	0xa3, 0x06, 0xb7, 0x91, 0x86, 0x1e, 0x6e, 0x47, 0xe8, 0x41, 0x4c, 0x74, 0x04, 0xdb, 0x13, 0x04,
	0xd3, 0xa8, 0x34, 0x81, 0x91, 0x4b, 0xd2, 0x29, 0xb1, 0x24, 0x39, 0xc3, 0x25, 0x35, 0x2f, 0x3f,
	0x37, 0x24, 0x1f, 0xd5, 0x5e, 0x79, 0x2e, 0xee, 0x24, 0x90, 0x64, 0x7c, 0x0a, 0x48, 0x16, 0x6a,
	0x3b, 0x57, 0x12, 0x5c, 0xbd, 0x50, 0x10, 0x17, 0x3f, 0x6a, 0x68, 0x14, 0x4b, 0x30, 0x29, 0x30,
	0x6b, 0x70, 0x1b, 0x69, 0x12, 0x76, 0x0a, 0xd4, 0x92, 0x20, 0xbe, 0x64, 0x64, 0x6e, 0xb1, 0x53,
	0xc8, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1,
	0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x59, 0xa5, 0x67, 0x96, 0x64,
	0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xa2, 0xc6, 0x0f, 0x0a, 0xa7, 0x02, 0x2d, 0x84, 0x4b, 0x2a,
	0x0b, 0x52, 0x8b, 0x93, 0xd8, 0xc0, 0x41, 0x6b, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xfc,
	0x5d, 0x2a, 0xd9, 0x01, 0x00, 0x00,
}

func (m *CreditBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreditBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreditBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Balance != nil {
		{
			size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCreditBalance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintCreditBalance(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchDenomToCreditBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchDenomToCreditBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchDenomToCreditBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CreditBalances) > 0 {
		for iNdEx := len(m.CreditBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CreditBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCreditBalance(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BatchDenom) > 0 {
		i -= len(m.BatchDenom)
		copy(dAtA[i:], m.BatchDenom)
		i = encodeVarintCreditBalance(dAtA, i, uint64(len(m.BatchDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCreditBalance(dAtA []byte, offset int, v uint64) int {
	offset -= sovCreditBalance(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreditBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovCreditBalance(uint64(l))
	}
	if m.Balance != nil {
		l = m.Balance.Size()
		n += 1 + l + sovCreditBalance(uint64(l))
	}
	return n
}

func (m *BatchDenomToCreditBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BatchDenom)
	if l > 0 {
		n += 1 + l + sovCreditBalance(uint64(l))
	}
	if len(m.CreditBalances) > 0 {
		for _, e := range m.CreditBalances {
			l = e.Size()
			n += 1 + l + sovCreditBalance(uint64(l))
		}
	}
	return n
}

func sovCreditBalance(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCreditBalance(x uint64) (n int) {
	return sovCreditBalance(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreditBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCreditBalance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreditBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreditBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreditBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCreditBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCreditBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreditBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCreditBalance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCreditBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Balance == nil {
				m.Balance = &CreditAmount{}
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCreditBalance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCreditBalance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchDenomToCreditBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCreditBalance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchDenomToCreditBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchDenomToCreditBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreditBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCreditBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCreditBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreditBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCreditBalance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCreditBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreditBalances = append(m.CreditBalances, &CreditBalance{})
			if err := m.CreditBalances[len(m.CreditBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCreditBalance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCreditBalance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCreditBalance(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCreditBalance
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCreditBalance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCreditBalance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCreditBalance
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCreditBalance
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCreditBalance
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCreditBalance        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCreditBalance          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCreditBalance = fmt.Errorf("proto: unexpected end of group")
)
