// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: empowerchain/plasticcredit/types.proto

package plasticcredit

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProjectStatus int32

const (
	ProjectStatus_NEW       ProjectStatus = 0
	ProjectStatus_APPROVED  ProjectStatus = 1
	ProjectStatus_REJECTED  ProjectStatus = 2
	ProjectStatus_SUSPENDED ProjectStatus = 3
)

var ProjectStatus_name = map[int32]string{
	0: "NEW",
	1: "APPROVED",
	2: "REJECTED",
	3: "SUSPENDED",
}

var ProjectStatus_value = map[string]int32{
	"NEW":       0,
	"APPROVED":  1,
	"REJECTED":  2,
	"SUSPENDED": 3,
}

func (x ProjectStatus) String() string {
	return proto.EnumName(ProjectStatus_name, int32(x))
}

func (ProjectStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{0}
}

// Params defines the parameters for the module.
type Params struct {
	// issuer_creator is the address that is allowed to create new issuers
	// defaults to the governance account, but can be changed by governance (to, for instance, a DAO/group/multisig)
	IssuerCreator string `protobuf:"bytes,1,opt,name=issuer_creator,json=issuerCreator,proto3" json:"issuer_creator,omitempty"`
	// credit_class_creation_fee is the fee that is charged for creating a new credit class
	// defaults to 50 $MPWR, but can be changed by governance
	CreditClassCreationFee types.Coin `protobuf:"bytes,2,opt,name=credit_class_creation_fee,json=creditClassCreationFee,proto3" json:"credit_class_creation_fee"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetIssuerCreator() string {
	if m != nil {
		return m.IssuerCreator
	}
	return ""
}

func (m *Params) GetCreditClassCreationFee() types.Coin {
	if m != nil {
		return m.CreditClassCreationFee
	}
	return types.Coin{}
}

type IDCounters struct {
	NextIssuerId    uint64 `protobuf:"varint,1,opt,name=next_issuer_id,json=nextIssuerId,proto3" json:"next_issuer_id,omitempty"`
	NextApplicantId uint64 `protobuf:"varint,2,opt,name=next_applicant_id,json=nextApplicantId,proto3" json:"next_applicant_id,omitempty"`
	NextProjectId   uint64 `protobuf:"varint,3,opt,name=next_project_id,json=nextProjectId,proto3" json:"next_project_id,omitempty"`
}

func (m *IDCounters) Reset()         { *m = IDCounters{} }
func (m *IDCounters) String() string { return proto.CompactTextString(m) }
func (*IDCounters) ProtoMessage()    {}
func (*IDCounters) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{1}
}
func (m *IDCounters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDCounters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDCounters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDCounters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDCounters.Merge(m, src)
}
func (m *IDCounters) XXX_Size() int {
	return m.Size()
}
func (m *IDCounters) XXX_DiscardUnknown() {
	xxx_messageInfo_IDCounters.DiscardUnknown(m)
}

var xxx_messageInfo_IDCounters proto.InternalMessageInfo

func (m *IDCounters) GetNextIssuerId() uint64 {
	if m != nil {
		return m.NextIssuerId
	}
	return 0
}

func (m *IDCounters) GetNextApplicantId() uint64 {
	if m != nil {
		return m.NextApplicantId
	}
	return 0
}

func (m *IDCounters) GetNextProjectId() uint64 {
	if m != nil {
		return m.NextProjectId
	}
	return 0
}

type Issuer struct {
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Admin       string `protobuf:"bytes,4,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (m *Issuer) Reset()         { *m = Issuer{} }
func (m *Issuer) String() string { return proto.CompactTextString(m) }
func (*Issuer) ProtoMessage()    {}
func (*Issuer) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{2}
}
func (m *Issuer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Issuer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Issuer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Issuer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issuer.Merge(m, src)
}
func (m *Issuer) XXX_Size() int {
	return m.Size()
}
func (m *Issuer) XXX_DiscardUnknown() {
	xxx_messageInfo_Issuer.DiscardUnknown(m)
}

var xxx_messageInfo_Issuer proto.InternalMessageInfo

func (m *Issuer) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Issuer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Issuer) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Issuer) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

type Applicant struct {
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Admin       string `protobuf:"bytes,4,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (m *Applicant) Reset()         { *m = Applicant{} }
func (m *Applicant) String() string { return proto.CompactTextString(m) }
func (*Applicant) ProtoMessage()    {}
func (*Applicant) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{3}
}
func (m *Applicant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Applicant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Applicant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Applicant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Applicant.Merge(m, src)
}
func (m *Applicant) XXX_Size() int {
	return m.Size()
}
func (m *Applicant) XXX_DiscardUnknown() {
	xxx_messageInfo_Applicant.DiscardUnknown(m)
}

var xxx_messageInfo_Applicant proto.InternalMessageInfo

func (m *Applicant) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Applicant) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Applicant) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Applicant) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

type CreditClass struct {
	// abbreviation is the short-hand name *and* the identifier for a credit class
	Abbreviation string `protobuf:"bytes,1,opt,name=abbreviation,proto3" json:"abbreviation,omitempty"`
	IssuerId     uint64 `protobuf:"varint,2,opt,name=issuer_id,json=issuerId,proto3" json:"issuer_id,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CreditClass) Reset()         { *m = CreditClass{} }
func (m *CreditClass) String() string { return proto.CompactTextString(m) }
func (*CreditClass) ProtoMessage()    {}
func (*CreditClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{4}
}
func (m *CreditClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreditClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreditClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreditClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditClass.Merge(m, src)
}
func (m *CreditClass) XXX_Size() int {
	return m.Size()
}
func (m *CreditClass) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditClass.DiscardUnknown(m)
}

var xxx_messageInfo_CreditClass proto.InternalMessageInfo

func (m *CreditClass) GetAbbreviation() string {
	if m != nil {
		return m.Abbreviation
	}
	return ""
}

func (m *CreditClass) GetIssuerId() uint64 {
	if m != nil {
		return m.IssuerId
	}
	return 0
}

func (m *CreditClass) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Project struct {
	Id                      uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ApplicantId             uint64        `protobuf:"varint,2,opt,name=applicant_id,json=applicantId,proto3" json:"applicant_id,omitempty"`
	CreditClassAbbreviation string        `protobuf:"bytes,3,opt,name=credit_class_abbreviation,json=creditClassAbbreviation,proto3" json:"credit_class_abbreviation,omitempty"`
	Name                    string        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Status                  ProjectStatus `protobuf:"varint,5,opt,name=status,proto3,enum=empowerchain.plasticcredit.ProjectStatus" json:"status,omitempty"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{5}
}
func (m *Project) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Project.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return m.Size()
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Project) GetApplicantId() uint64 {
	if m != nil {
		return m.ApplicantId
	}
	return 0
}

func (m *Project) GetCreditClassAbbreviation() string {
	if m != nil {
		return m.CreditClassAbbreviation
	}
	return ""
}

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetStatus() ProjectStatus {
	if m != nil {
		return m.Status
	}
	return ProjectStatus_NEW
}

type CreditCollection struct {
	// denominator of the credit, store key
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// ID of a project related to the collection
	ProjectId uint64 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Total amount of active and retired credits for the collection
	TotalAmount CreditAmount `protobuf:"bytes,3,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount"`
	// IPFS URI of the metadata
	MetadataUris []string `protobuf:"bytes,4,rep,name=metadata_uris,json=metadataUris,proto3" json:"metadata_uris,omitempty"`
}

func (m *CreditCollection) Reset()         { *m = CreditCollection{} }
func (m *CreditCollection) String() string { return proto.CompactTextString(m) }
func (*CreditCollection) ProtoMessage()    {}
func (*CreditCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{6}
}
func (m *CreditCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreditCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreditCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreditCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditCollection.Merge(m, src)
}
func (m *CreditCollection) XXX_Size() int {
	return m.Size()
}
func (m *CreditCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditCollection.DiscardUnknown(m)
}

var xxx_messageInfo_CreditCollection proto.InternalMessageInfo

func (m *CreditCollection) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *CreditCollection) GetProjectId() uint64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *CreditCollection) GetTotalAmount() CreditAmount {
	if m != nil {
		return m.TotalAmount
	}
	return CreditAmount{}
}

func (m *CreditCollection) GetMetadataUris() []string {
	if m != nil {
		return m.MetadataUris
	}
	return nil
}

type CreditBalance struct {
	// Address of the credits owner, part of compound key
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// denominator of the credit, apart of compound key
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// Number of active and retired credits
	Balance CreditAmount `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance"`
}

func (m *CreditBalance) Reset()         { *m = CreditBalance{} }
func (m *CreditBalance) String() string { return proto.CompactTextString(m) }
func (*CreditBalance) ProtoMessage()    {}
func (*CreditBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{7}
}
func (m *CreditBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreditBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreditBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreditBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditBalance.Merge(m, src)
}
func (m *CreditBalance) XXX_Size() int {
	return m.Size()
}
func (m *CreditBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditBalance.DiscardUnknown(m)
}

var xxx_messageInfo_CreditBalance proto.InternalMessageInfo

func (m *CreditBalance) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CreditBalance) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *CreditBalance) GetBalance() CreditAmount {
	if m != nil {
		return m.Balance
	}
	return CreditAmount{}
}

type CreditAmount struct {
	Active  uint64 `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	Retired uint64 `protobuf:"varint,2,opt,name=retired,proto3" json:"retired,omitempty"`
}

func (m *CreditAmount) Reset()         { *m = CreditAmount{} }
func (m *CreditAmount) String() string { return proto.CompactTextString(m) }
func (*CreditAmount) ProtoMessage()    {}
func (*CreditAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{8}
}
func (m *CreditAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreditAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreditAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreditAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditAmount.Merge(m, src)
}
func (m *CreditAmount) XXX_Size() int {
	return m.Size()
}
func (m *CreditAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditAmount.DiscardUnknown(m)
}

var xxx_messageInfo_CreditAmount proto.InternalMessageInfo

func (m *CreditAmount) GetActive() uint64 {
	if m != nil {
		return m.Active
	}
	return 0
}

func (m *CreditAmount) GetRetired() uint64 {
	if m != nil {
		return m.Retired
	}
	return 0
}

type ProvenData struct {
	Uri  string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *ProvenData) Reset()         { *m = ProvenData{} }
func (m *ProvenData) String() string { return proto.CompactTextString(m) }
func (*ProvenData) ProtoMessage()    {}
func (*ProvenData) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{9}
}
func (m *ProvenData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProvenData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProvenData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProvenData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvenData.Merge(m, src)
}
func (m *ProvenData) XXX_Size() int {
	return m.Size()
}
func (m *ProvenData) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvenData.DiscardUnknown(m)
}

var xxx_messageInfo_ProvenData proto.InternalMessageInfo

func (m *ProvenData) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *ProvenData) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterEnum("empowerchain.plasticcredit.ProjectStatus", ProjectStatus_name, ProjectStatus_value)
	proto.RegisterType((*Params)(nil), "empowerchain.plasticcredit.Params")
	proto.RegisterType((*IDCounters)(nil), "empowerchain.plasticcredit.IDCounters")
	proto.RegisterType((*Issuer)(nil), "empowerchain.plasticcredit.Issuer")
	proto.RegisterType((*Applicant)(nil), "empowerchain.plasticcredit.Applicant")
	proto.RegisterType((*CreditClass)(nil), "empowerchain.plasticcredit.CreditClass")
	proto.RegisterType((*Project)(nil), "empowerchain.plasticcredit.Project")
	proto.RegisterType((*CreditCollection)(nil), "empowerchain.plasticcredit.CreditCollection")
	proto.RegisterType((*CreditBalance)(nil), "empowerchain.plasticcredit.CreditBalance")
	proto.RegisterType((*CreditAmount)(nil), "empowerchain.plasticcredit.CreditAmount")
	proto.RegisterType((*ProvenData)(nil), "empowerchain.plasticcredit.ProvenData")
}

func init() {
	proto.RegisterFile("empowerchain/plasticcredit/types.proto", fileDescriptor_697986914fd4dd11)
}

var fileDescriptor_697986914fd4dd11 = []byte{
	// 817 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xbf, 0x8f, 0xe3, 0x44,
	0x14, 0x8e, 0x93, 0x6c, 0xf6, 0xf2, 0x92, 0x2c, 0x61, 0xb4, 0x3a, 0xb2, 0x8b, 0xc8, 0x06, 0x83,
	0x4e, 0xcb, 0x49, 0xd8, 0xba, 0x45, 0xa2, 0xb8, 0x06, 0xb2, 0x8e, 0x11, 0xa1, 0x38, 0x8c, 0x97,
	0x03, 0xe9, 0x9a, 0x68, 0x6c, 0xcf, 0x65, 0x07, 0xd9, 0x1e, 0x6b, 0x66, 0xb2, 0x77, 0x34, 0x48,
	0x34, 0xd4, 0x94, 0x74, 0xd0, 0xd3, 0xd2, 0xd3, 0x5e, 0xc7, 0x89, 0x8a, 0x0a, 0xa1, 0xdd, 0x7f,
	0x04, 0xcd, 0x0f, 0xdf, 0x3a, 0xfc, 0x3a, 0x89, 0xe6, 0xba, 0x79, 0x6f, 0xbe, 0xf7, 0xde, 0xf7,
	0xde, 0xf7, 0xc6, 0x86, 0x5b, 0xa4, 0xa8, 0xd8, 0x23, 0xc2, 0xd3, 0x73, 0x4c, 0x4b, 0xbf, 0xca,
	0xb1, 0x90, 0x34, 0x4d, 0x39, 0xc9, 0xa8, 0xf4, 0xe5, 0x97, 0x15, 0x11, 0x5e, 0xc5, 0x99, 0x64,
	0xe8, 0xb0, 0x89, 0xf3, 0xb6, 0x70, 0x87, 0xfb, 0x6b, 0xb6, 0x66, 0x1a, 0xe6, 0xab, 0x93, 0x89,
	0x38, 0x3c, 0x48, 0x99, 0x28, 0x98, 0x58, 0x99, 0x0b, 0x63, 0xd8, 0xab, 0xa3, 0x35, 0x63, 0xeb,
	0x9c, 0xf8, 0xda, 0x4a, 0x36, 0x0f, 0x7d, 0x49, 0x0b, 0x22, 0x24, 0x2e, 0x2a, 0x0b, 0x98, 0x1a,
	0xb8, 0x9f, 0x60, 0x41, 0xfc, 0x8b, 0x3b, 0x09, 0x91, 0xf8, 0x8e, 0x9f, 0x32, 0x55, 0x59, 0xdd,
	0xbb, 0x3f, 0x3a, 0xd0, 0x8b, 0x30, 0xc7, 0x85, 0x40, 0xef, 0xc1, 0x1e, 0x15, 0x62, 0x43, 0xf8,
	0x2a, 0xe5, 0x04, 0x4b, 0xc6, 0x27, 0xce, 0xcc, 0x39, 0xee, 0x9f, 0x4e, 0x7e, 0xfd, 0xe9, 0xed,
	0x7d, 0x5b, 0x75, 0x9e, 0x65, 0x9c, 0x08, 0x71, 0x26, 0x39, 0x2d, 0xd7, 0xf1, 0xc8, 0xe0, 0x03,
	0x03, 0x47, 0x0f, 0xe0, 0xc0, 0xf4, 0xb1, 0x4a, 0x73, 0x2c, 0x84, 0x49, 0x43, 0x59, 0xb9, 0x7a,
	0x48, 0xc8, 0xa4, 0x3d, 0x73, 0x8e, 0x07, 0x27, 0x07, 0x9e, 0x4d, 0xa4, 0xf8, 0x78, 0x96, 0x8f,
	0x17, 0x30, 0x5a, 0x9e, 0x76, 0x9f, 0xfc, 0x7e, 0xd4, 0x8a, 0x6f, 0x9a, 0x0c, 0x81, 0x4a, 0x10,
	0xd8, 0xf8, 0x0f, 0x08, 0xb9, 0xdb, 0xfd, 0xee, 0x87, 0xa3, 0x96, 0xfb, 0x8d, 0x03, 0xb0, 0x5c,
	0x04, 0x6c, 0x53, 0x4a, 0xc2, 0x05, 0x7a, 0x13, 0xf6, 0x4a, 0xf2, 0x58, 0xae, 0x2c, 0x6d, 0x9a,
	0x69, 0xc6, 0xdd, 0x78, 0xa8, 0xbc, 0x4b, 0xed, 0x5c, 0x66, 0xe8, 0x36, 0xbc, 0xac, 0x51, 0xb8,
	0xaa, 0x72, 0x9a, 0xe2, 0x52, 0x2a, 0x60, 0x5b, 0x03, 0x5f, 0x52, 0x17, 0xf3, 0xda, 0xbf, 0xcc,
	0xd0, 0x2d, 0xd0, 0x2e, 0x35, 0xea, 0x2f, 0x48, 0xaa, 0x91, 0x1d, 0x8d, 0x1c, 0x29, 0x77, 0x64,
	0xbc, 0xcb, 0xcc, 0xfd, 0x0a, 0x7a, 0x26, 0x3f, 0xda, 0x83, 0xf6, 0xb3, 0xba, 0x6d, 0x9a, 0x21,
	0x04, 0xdd, 0x12, 0x17, 0xa6, 0xdf, 0x7e, 0xac, 0xcf, 0x68, 0x06, 0x83, 0x8c, 0x88, 0x94, 0xd3,
	0x4a, 0xb5, 0xa3, 0x33, 0xf6, 0xe3, 0xa6, 0x0b, 0x79, 0xb0, 0x83, 0xb3, 0x82, 0x96, 0x93, 0xee,
	0x73, 0x46, 0x6e, 0x60, 0xee, 0xd7, 0x0e, 0xf4, 0x9f, 0xf1, 0x7e, 0x41, 0x1c, 0x12, 0x18, 0x04,
	0xd7, 0x62, 0x21, 0x17, 0x86, 0x38, 0x49, 0x38, 0xb9, 0xa0, 0x5a, 0x34, 0xb3, 0x3c, 0xf1, 0x96,
	0x0f, 0xbd, 0x0a, 0xfd, 0x6b, 0xad, 0x8c, 0x04, 0x37, 0x68, 0xad, 0x53, 0xcd, 0xba, 0x73, 0xcd,
	0xda, 0xfd, 0xc5, 0x81, 0x5d, 0x3b, 0xf5, 0xbf, 0x75, 0xf9, 0x3a, 0x0c, 0xff, 0x41, 0xd2, 0x01,
	0x6e, 0xc8, 0x79, 0xf7, 0x2f, 0x1b, 0xb9, 0x45, 0xd0, 0xd4, 0x79, 0xa5, 0xb1, 0x70, 0xf3, 0x26,
	0xd7, 0x9a, 0x4e, 0xb7, 0x31, 0xc4, 0x39, 0xf4, 0x84, 0xc4, 0x72, 0x23, 0x26, 0x3b, 0x33, 0xe7,
	0x78, 0xef, 0xe4, 0x2d, 0xef, 0xdf, 0x1f, 0xb3, 0x67, 0x79, 0x9f, 0xe9, 0x80, 0xd8, 0x06, 0xba,
	0x3f, 0x3b, 0x30, 0xb6, 0x63, 0x63, 0x79, 0x4e, 0x52, 0x5d, 0x6b, 0x1f, 0x76, 0x32, 0x52, 0xb2,
	0xc2, 0x0e, 0xcd, 0x18, 0xe8, 0x35, 0x80, 0xc6, 0x1e, 0x9a, 0xf6, 0xfa, 0x55, 0xbd, 0x83, 0xe8,
	0x13, 0x18, 0x4a, 0x26, 0x71, 0xbe, 0xc2, 0x85, 0x7a, 0x10, 0xba, 0x9f, 0xc1, 0xc9, 0xf1, 0x7f,
	0x51, 0x32, 0x85, 0xe7, 0x1a, 0x6f, 0x1f, 0xdc, 0x40, 0xe7, 0x30, 0x2e, 0xf4, 0x06, 0x8c, 0x0a,
	0x22, 0x71, 0x86, 0x25, 0x5e, 0x6d, 0x38, 0x15, 0x93, 0xee, 0xac, 0xa3, 0x44, 0xac, 0x9d, 0xf7,
	0x39, 0x15, 0xee, 0xf7, 0x0e, 0x8c, 0x4c, 0xa2, 0x53, 0x9c, 0xe3, 0x32, 0x25, 0x6a, 0x73, 0xd8,
	0xa3, 0x92, 0x3c, 0xff, 0x83, 0x61, 0x60, 0xd7, 0xed, 0xb6, 0x9b, 0xed, 0x7e, 0x08, 0xbb, 0x89,
	0x49, 0xf8, 0x3f, 0x5b, 0xa9, 0xc3, 0xdd, 0xf7, 0x61, 0xd8, 0xbc, 0x46, 0x37, 0xa1, 0x87, 0x53,
	0x49, 0x2f, 0x88, 0xdd, 0x1e, 0x6b, 0xa1, 0x09, 0xec, 0x72, 0x22, 0x29, 0x27, 0xf5, 0x74, 0x6b,
	0xd3, 0x3d, 0x01, 0x88, 0x38, 0xbb, 0x20, 0xe5, 0x02, 0x4b, 0x8c, 0xc6, 0xd0, 0xd9, 0x70, 0x6a,
	0xc5, 0x51, 0x47, 0xb5, 0x1c, 0xe7, 0x58, 0x9c, 0xd7, 0x2f, 0x4c, 0x9d, 0x6f, 0x07, 0x30, 0xda,
	0x92, 0x1c, 0xed, 0x42, 0xe7, 0x5e, 0xf8, 0xf9, 0xb8, 0x85, 0x86, 0x70, 0x63, 0x1e, 0x45, 0xf1,
	0xc7, 0x9f, 0x85, 0x8b, 0xb1, 0xa3, 0xac, 0x38, 0xfc, 0x28, 0x0c, 0x3e, 0x0d, 0x17, 0xe3, 0x36,
	0x1a, 0x41, 0xff, 0xec, 0xfe, 0x59, 0x14, 0xde, 0x5b, 0x84, 0x8b, 0x71, 0xe7, 0x34, 0x7a, 0x72,
	0x39, 0x75, 0x9e, 0x5e, 0x4e, 0x9d, 0x3f, 0x2e, 0xa7, 0xce, 0xb7, 0x57, 0xd3, 0xd6, 0xd3, 0xab,
	0x69, 0xeb, 0xb7, 0xab, 0x69, 0xeb, 0xc1, 0xbb, 0x6b, 0x2a, 0xcf, 0x37, 0x89, 0x97, 0xb2, 0xc2,
	0x0f, 0xcd, 0x5c, 0x22, 0x33, 0x11, 0x7f, 0xeb, 0xcf, 0xf3, 0x78, 0xfb, 0xdf, 0x93, 0xf4, 0xf4,
	0x87, 0xfe, 0x9d, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x20, 0x42, 0x4b, 0xb1, 0xa0, 0x06, 0x00,
	0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CreditClassCreationFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.IssuerCreator) > 0 {
		i -= len(m.IssuerCreator)
		copy(dAtA[i:], m.IssuerCreator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IssuerCreator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IDCounters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDCounters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDCounters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextProjectId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NextProjectId))
		i--
		dAtA[i] = 0x18
	}
	if m.NextApplicantId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NextApplicantId))
		i--
		dAtA[i] = 0x10
	}
	if m.NextIssuerId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NextIssuerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Issuer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Issuer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Issuer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Applicant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Applicant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Applicant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreditClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreditClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreditClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IssuerId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IssuerId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Abbreviation) > 0 {
		i -= len(m.Abbreviation)
		copy(dAtA[i:], m.Abbreviation)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Abbreviation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Project) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Project) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CreditClassAbbreviation) > 0 {
		i -= len(m.CreditClassAbbreviation)
		copy(dAtA[i:], m.CreditClassAbbreviation)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CreditClassAbbreviation)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ApplicantId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ApplicantId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreditCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreditCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreditCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetadataUris) > 0 {
		for iNdEx := len(m.MetadataUris) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MetadataUris[iNdEx])
			copy(dAtA[i:], m.MetadataUris[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.MetadataUris[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.TotalAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ProjectId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ProjectId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreditBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreditBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreditBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreditAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreditAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreditAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Retired != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Retired))
		i--
		dAtA[i] = 0x10
	}
	if m.Active != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Active))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProvenData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProvenData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProvenData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IssuerCreator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.CreditClassCreationFee.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *IDCounters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextIssuerId != 0 {
		n += 1 + sovTypes(uint64(m.NextIssuerId))
	}
	if m.NextApplicantId != 0 {
		n += 1 + sovTypes(uint64(m.NextApplicantId))
	}
	if m.NextProjectId != 0 {
		n += 1 + sovTypes(uint64(m.NextProjectId))
	}
	return n
}

func (m *Issuer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Applicant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreditClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Abbreviation)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.IssuerId != 0 {
		n += 1 + sovTypes(uint64(m.IssuerId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Project) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.ApplicantId != 0 {
		n += 1 + sovTypes(uint64(m.ApplicantId))
	}
	l = len(m.CreditClassAbbreviation)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	return n
}

func (m *CreditCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ProjectId != 0 {
		n += 1 + sovTypes(uint64(m.ProjectId))
	}
	l = m.TotalAmount.Size()
	n += 1 + l + sovTypes(uint64(l))
	if len(m.MetadataUris) > 0 {
		for _, s := range m.MetadataUris {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreditBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Balance.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *CreditAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Active != 0 {
		n += 1 + sovTypes(uint64(m.Active))
	}
	if m.Retired != 0 {
		n += 1 + sovTypes(uint64(m.Retired))
	}
	return n
}

func (m *ProvenData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditClassCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreditClassCreationFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDCounters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDCounters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDCounters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextIssuerId", wireType)
			}
			m.NextIssuerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextIssuerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextApplicantId", wireType)
			}
			m.NextApplicantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextApplicantId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextProjectId", wireType)
			}
			m.NextProjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextProjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Issuer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Issuer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Issuer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Applicant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Applicant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Applicant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreditClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreditClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreditClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abbreviation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abbreviation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerId", wireType)
			}
			m.IssuerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicantId", wireType)
			}
			m.ApplicantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplicantId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditClassAbbreviation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreditClassAbbreviation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProjectStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreditCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreditCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreditCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			m.ProjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUris", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUris = append(m.MetadataUris, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreditBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreditBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreditBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreditAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreditAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreditAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			m.Active = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Active |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retired", wireType)
			}
			m.Retired = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retired |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvenData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvenData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvenData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
