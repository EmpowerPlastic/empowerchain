// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: empowerchain/certificates/events.proto

package certificates

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventCreateCertificate is an event emitted when a new certificate is created
type EventCreateCertificate struct {
	CertificateId   uint64 `protobuf:"varint,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	Issuer          string `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Owner           string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	CertificateType string `protobuf:"bytes,4,opt,name=certificate_type,json=certificateType,proto3" json:"certificate_type,omitempty"`
	AdditionalData  string `protobuf:"bytes,5,opt,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty"`
}

func (m *EventCreateCertificate) Reset()         { *m = EventCreateCertificate{} }
func (m *EventCreateCertificate) String() string { return proto.CompactTextString(m) }
func (*EventCreateCertificate) ProtoMessage()    {}
func (*EventCreateCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee2866c80198642, []int{0}
}
func (m *EventCreateCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateCertificate.Merge(m, src)
}
func (m *EventCreateCertificate) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateCertificate proto.InternalMessageInfo

func (m *EventCreateCertificate) GetCertificateId() uint64 {
	if m != nil {
		return m.CertificateId
	}
	return 0
}

func (m *EventCreateCertificate) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *EventCreateCertificate) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventCreateCertificate) GetCertificateType() string {
	if m != nil {
		return m.CertificateType
	}
	return ""
}

func (m *EventCreateCertificate) GetAdditionalData() string {
	if m != nil {
		return m.AdditionalData
	}
	return ""
}

func init() {
	proto.RegisterType((*EventCreateCertificate)(nil), "empowerchain.certificates.EventCreateCertificate")
}

func init() {
	proto.RegisterFile("empowerchain/certificates/events.proto", fileDescriptor_6ee2866c80198642)
}

var fileDescriptor_6ee2866c80198642 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4b, 0xcd, 0x2d, 0xc8,
	0x2f, 0x4f, 0x2d, 0x4a, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x4f, 0x4e, 0x2d, 0x2a, 0xc9, 0x4c, 0xcb,
	0x4c, 0x4e, 0x2c, 0x49, 0x2d, 0xd6, 0x4f, 0x2d, 0x4b, 0xcd, 0x2b, 0x29, 0xd6, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x92, 0x44, 0x56, 0xa7, 0x87, 0xac, 0x4e, 0x4a, 0x32, 0x39, 0xbf, 0x38, 0x37,
	0xbf, 0x38, 0x1e, 0xac, 0x50, 0x1f, 0xc2, 0x81, 0xe8, 0x52, 0xfa, 0xca, 0xc8, 0x25, 0xe6, 0x0a,
	0x32, 0xc6, 0xb9, 0x28, 0x35, 0xb1, 0x24, 0xd5, 0x19, 0xa1, 0x4d, 0x48, 0x95, 0x8b, 0x0f, 0xc9,
	0x94, 0xf8, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x96, 0x20, 0x5e, 0x24, 0x51, 0xcf, 0x14,
	0x21, 0x03, 0x2e, 0xb6, 0xcc, 0xe2, 0xe2, 0xd2, 0xd4, 0x22, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x4e,
	0x27, 0x89, 0x4b, 0x5b, 0x74, 0x45, 0xa0, 0x76, 0x38, 0xa6, 0xa4, 0x14, 0xa5, 0x16, 0x17, 0x07,
	0x97, 0x14, 0x65, 0xe6, 0xa5, 0x07, 0x41, 0xd5, 0x09, 0xe9, 0x71, 0xb1, 0xe6, 0x97, 0xe7, 0xa5,
	0x16, 0x49, 0x30, 0x13, 0xd0, 0x00, 0x51, 0x26, 0xa4, 0xc9, 0x25, 0x80, 0xec, 0x90, 0x92, 0xca,
	0x82, 0x54, 0x09, 0x16, 0x90, 0xd6, 0x20, 0x7e, 0x24, 0xf1, 0x90, 0xca, 0x82, 0x54, 0x21, 0x75,
	0x2e, 0xfe, 0xc4, 0x94, 0x94, 0xcc, 0x92, 0xcc, 0xfc, 0xbc, 0xc4, 0x9c, 0xf8, 0x94, 0xc4, 0x92,
	0x44, 0x09, 0x56, 0xb0, 0x4a, 0x3e, 0x84, 0xb0, 0x4b, 0x62, 0x49, 0xa2, 0x93, 0xff, 0x89, 0x47,
	0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85,
	0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x99, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9,
	0x25, 0xe7, 0xe7, 0xea, 0xbb, 0x42, 0x82, 0x34, 0x20, 0x27, 0xb1, 0xb8, 0x24, 0x33, 0x59, 0x1f,
	0x25, 0x26, 0x2a, 0x50, 0xe2, 0x22, 0x89, 0x0d, 0x1c, 0x9e, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x85, 0x88, 0x3b, 0x83, 0xaf, 0x01, 0x00, 0x00,
}

func (m *EventCreateCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdditionalData) > 0 {
		i -= len(m.AdditionalData)
		copy(dAtA[i:], m.AdditionalData)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AdditionalData)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CertificateType) > 0 {
		i -= len(m.CertificateType)
		copy(dAtA[i:], m.CertificateType)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CertificateType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x12
	}
	if m.CertificateId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CertificateId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCreateCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CertificateId != 0 {
		n += 1 + sovEvents(uint64(m.CertificateId))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CertificateType)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.AdditionalData)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCreateCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateId", wireType)
			}
			m.CertificateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertificateId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificateType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
