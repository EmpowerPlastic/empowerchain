// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: empowerchain/certificates/types.proto

package certificates

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CertificateType int32

const (
	CertificateType_CREDIT_RETIREMENT CertificateType = 0
)

var CertificateType_name = map[int32]string{
	0: "CREDIT_RETIREMENT",
}

var CertificateType_value = map[string]int32{
	"CREDIT_RETIREMENT": 0,
}

func (x CertificateType) String() string {
	return proto.EnumName(CertificateType_name, int32(x))
}

func (CertificateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0a365aa5bcd5025b, []int{0}
}

// Params defines the parameters for the module.
type Params struct {
	AllowedIssuers []string `protobuf:"bytes,1,rep,name=allowed_issuers,json=allowedIssuers,proto3" json:"allowed_issuers,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a365aa5bcd5025b, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetAllowedIssuers() []string {
	if m != nil {
		return m.AllowedIssuers
	}
	return nil
}

type Certificate struct {
	Id             uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type           CertificateType   `protobuf:"varint,2,opt,name=type,proto3,enum=empowerchain.certificates.CertificateType" json:"type,omitempty"`
	Owner          string            `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Issuer         string            `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	AdditionalData []*AdditionalData `protobuf:"bytes,5,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a365aa5bcd5025b, []int{1}
}
func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(m, src)
}
func (m *Certificate) XXX_Size() int {
	return m.Size()
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

func (m *Certificate) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Certificate) GetType() CertificateType {
	if m != nil {
		return m.Type
	}
	return CertificateType_CREDIT_RETIREMENT
}

func (m *Certificate) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Certificate) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *Certificate) GetAdditionalData() []*AdditionalData {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

type AdditionalData struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *AdditionalData) Reset()         { *m = AdditionalData{} }
func (m *AdditionalData) String() string { return proto.CompactTextString(m) }
func (*AdditionalData) ProtoMessage()    {}
func (*AdditionalData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a365aa5bcd5025b, []int{2}
}
func (m *AdditionalData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdditionalData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdditionalData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdditionalData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdditionalData.Merge(m, src)
}
func (m *AdditionalData) XXX_Size() int {
	return m.Size()
}
func (m *AdditionalData) XXX_DiscardUnknown() {
	xxx_messageInfo_AdditionalData.DiscardUnknown(m)
}

var xxx_messageInfo_AdditionalData proto.InternalMessageInfo

func (m *AdditionalData) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AdditionalData) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type IDCounters struct {
	NextCertificateId uint64 `protobuf:"varint,1,opt,name=next_certificate_id,json=nextCertificateId,proto3" json:"next_certificate_id,omitempty"`
}

func (m *IDCounters) Reset()         { *m = IDCounters{} }
func (m *IDCounters) String() string { return proto.CompactTextString(m) }
func (*IDCounters) ProtoMessage()    {}
func (*IDCounters) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a365aa5bcd5025b, []int{3}
}
func (m *IDCounters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDCounters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDCounters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDCounters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDCounters.Merge(m, src)
}
func (m *IDCounters) XXX_Size() int {
	return m.Size()
}
func (m *IDCounters) XXX_DiscardUnknown() {
	xxx_messageInfo_IDCounters.DiscardUnknown(m)
}

var xxx_messageInfo_IDCounters proto.InternalMessageInfo

func (m *IDCounters) GetNextCertificateId() uint64 {
	if m != nil {
		return m.NextCertificateId
	}
	return 0
}

func init() {
	proto.RegisterEnum("empowerchain.certificates.CertificateType", CertificateType_name, CertificateType_value)
	proto.RegisterType((*Params)(nil), "empowerchain.certificates.Params")
	proto.RegisterType((*Certificate)(nil), "empowerchain.certificates.Certificate")
	proto.RegisterType((*AdditionalData)(nil), "empowerchain.certificates.AdditionalData")
	proto.RegisterType((*IDCounters)(nil), "empowerchain.certificates.IDCounters")
}

func init() {
	proto.RegisterFile("empowerchain/certificates/types.proto", fileDescriptor_0a365aa5bcd5025b)
}

var fileDescriptor_0a365aa5bcd5025b = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x6b, 0xd4, 0x4e,
	0x18, 0xc7, 0x93, 0xfd, 0x07, 0x3b, 0x85, 0x6c, 0x3b, 0xbf, 0xfd, 0x41, 0xda, 0x43, 0x1a, 0x16,
	0x84, 0x58, 0x30, 0x63, 0x2b, 0x82, 0x88, 0x08, 0xdb, 0xdd, 0x1c, 0x72, 0x50, 0xeb, 0xb8, 0x27,
	0x2f, 0x61, 0x92, 0x4c, 0xd3, 0xc1, 0x24, 0x13, 0x32, 0x93, 0x6e, 0xf7, 0x5d, 0x08, 0x5e, 0x3c,
	0xfa, 0x22, 0x7c, 0x11, 0x1e, 0x8b, 0x27, 0x8f, 0xb2, 0xfb, 0x46, 0x64, 0x33, 0xa1, 0x66, 0x05,
	0xeb, 0x6d, 0x1e, 0x9e, 0xcf, 0x77, 0x66, 0x9e, 0x0f, 0x0f, 0x78, 0x40, 0xb3, 0x82, 0x2f, 0x69,
	0x19, 0x5d, 0x11, 0x96, 0xa3, 0x88, 0x96, 0x92, 0x5d, 0xb2, 0x88, 0x48, 0x2a, 0x90, 0x5c, 0x15,
	0x54, 0xb8, 0x45, 0xc9, 0x25, 0x87, 0x87, 0x6d, 0xcc, 0x6d, 0x63, 0x47, 0xe3, 0x84, 0x27, 0xbc,
	0xa6, 0xd0, 0xf6, 0xa4, 0x02, 0x47, 0x87, 0x11, 0x17, 0x19, 0x17, 0x81, 0x6a, 0xa8, 0xa2, 0x69,
	0x1d, 0x27, 0x9c, 0x27, 0x29, 0x45, 0x75, 0x15, 0x56, 0x97, 0x48, 0xb2, 0x8c, 0x0a, 0x49, 0xb2,
	0xa2, 0x01, 0x2c, 0x85, 0xa3, 0x90, 0x08, 0x8a, 0xae, 0x4f, 0x43, 0x2a, 0xc9, 0x29, 0x8a, 0x38,
	0xcb, 0x55, 0x7f, 0xf2, 0x16, 0x0c, 0x2e, 0x48, 0x49, 0x32, 0x01, 0xa7, 0x60, 0x44, 0xd2, 0x94,
	0x2f, 0x69, 0x1c, 0x30, 0x21, 0x2a, 0x5a, 0x0a, 0x53, 0xb7, 0xbb, 0xce, 0xf0, 0xdc, 0xfc, 0xfe,
	0xf5, 0xd1, 0xb8, 0x79, 0x75, 0x1a, 0xc7, 0x25, 0x15, 0xe2, 0x9d, 0x2c, 0x59, 0x9e, 0x60, 0xa3,
	0x09, 0xf8, 0x8a, 0x7f, 0xde, 0xfb, 0xfc, 0xe5, 0x58, 0x9b, 0x7c, 0xea, 0x80, 0xbd, 0xd9, 0xef,
	0xa9, 0xa0, 0x01, 0x3a, 0x2c, 0x36, 0x75, 0x5b, 0x77, 0x7a, 0xb8, 0xc3, 0x62, 0xf8, 0x12, 0xf4,
	0xb6, 0x3a, 0xcc, 0x8e, 0xad, 0x3b, 0xc6, 0xd9, 0x89, 0xfb, 0x57, 0x1d, 0x6e, 0xeb, 0x96, 0xc5,
	0xaa, 0xa0, 0xb8, 0xce, 0x41, 0x17, 0xf4, 0xf9, 0x32, 0xa7, 0xa5, 0xd9, 0xb5, 0xf5, 0x7b, 0xbf,
	0xa7, 0x30, 0xf8, 0x18, 0x0c, 0xd4, 0x40, 0x66, 0xef, 0x1f, 0x81, 0x86, 0x83, 0x18, 0x8c, 0x48,
	0x1c, 0x33, 0xc9, 0x78, 0x4e, 0xd2, 0x20, 0x26, 0x92, 0x98, 0x7d, 0xbb, 0xeb, 0xec, 0x9d, 0x3d,
	0xbc, 0xe7, 0xb3, 0xd3, 0xbb, 0xc4, 0x9c, 0x48, 0x82, 0x0d, 0xb2, 0x53, 0x4f, 0x9e, 0x01, 0x63,
	0x97, 0x80, 0xfb, 0xa0, 0xfb, 0x81, 0xae, 0x6a, 0x31, 0x43, 0xbc, 0x3d, 0xc2, 0x31, 0xe8, 0x5f,
	0x93, 0xb4, 0x52, 0x6a, 0x86, 0x58, 0x15, 0x93, 0x17, 0x00, 0xf8, 0xf3, 0x19, 0xaf, 0x72, 0x49,
	0x4b, 0x01, 0x5d, 0xf0, 0x5f, 0x4e, 0x6f, 0x64, 0xd0, 0x7a, 0x3b, 0xb8, 0xd3, 0x7b, 0xb0, 0x6d,
	0xb5, 0xac, 0xf9, 0xf1, 0x89, 0x03, 0x46, 0x7f, 0x68, 0x84, 0xff, 0x83, 0x83, 0x19, 0xf6, 0xe6,
	0xfe, 0x22, 0xc0, 0xde, 0xc2, 0xc7, 0xde, 0x2b, 0xef, 0xf5, 0x62, 0x5f, 0x3b, 0x7f, 0xf3, 0x6d,
	0x6d, 0xe9, 0xb7, 0x6b, 0x4b, 0xff, 0xb9, 0xb6, 0xf4, 0x8f, 0x1b, 0x4b, 0xbb, 0xdd, 0x58, 0xda,
	0x8f, 0x8d, 0xa5, 0xbd, 0x7f, 0x9a, 0x30, 0x79, 0x55, 0x85, 0x6e, 0xc4, 0x33, 0xe4, 0x29, 0x01,
	0x17, 0x29, 0x11, 0x92, 0x45, 0x68, 0x67, 0xe5, 0x6f, 0x76, 0x96, 0x3e, 0x1c, 0xd4, 0x2b, 0xf6,
	0xe4, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xde, 0xa7, 0xc0, 0x18, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedIssuers) > 0 {
		for iNdEx := len(m.AllowedIssuers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedIssuers[iNdEx])
			copy(dAtA[i:], m.AllowedIssuers[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.AllowedIssuers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Certificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Certificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Certificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdditionalData) > 0 {
		for iNdEx := len(m.AdditionalData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdditionalData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AdditionalData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdditionalData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdditionalData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IDCounters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDCounters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDCounters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextCertificateId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NextCertificateId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllowedIssuers) > 0 {
		for _, s := range m.AllowedIssuers {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Certificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AdditionalData) > 0 {
		for _, e := range m.AdditionalData {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *AdditionalData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *IDCounters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextCertificateId != 0 {
		n += 1 + sovTypes(uint64(m.NextCertificateId))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedIssuers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedIssuers = append(m.AllowedIssuers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Certificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Certificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Certificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CertificateType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalData = append(m.AdditionalData, &AdditionalData{})
			if err := m.AdditionalData[len(m.AdditionalData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdditionalData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdditionalData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdditionalData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDCounters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDCounters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDCounters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextCertificateId", wireType)
			}
			m.NextCertificateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextCertificateId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
