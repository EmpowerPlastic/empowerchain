syntax = "proto3";
package empowerchain.certificates;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "empowerchain/certificates/types.proto";

option go_package = "github.com/EmpowerPlastic/empowerchain/x/certificates";

service Msg {
  // UpdateParams defines a governance operation for updating the x/certificates module parameters.
  // The authority is defined in the keeper.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // CreateCertificate creates a new certificate for the given certificate type owned by the given owner
  rpc CreateCertificate(MsgCreateCertificate) returns (MsgCreateCertificateResponse);
}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // params defines the x/certificates parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

message MsgUpdateParamsResponse {}

message MsgCreateCertificate {
  option (cosmos.msg.v1.signer) = "issuer";

  string issuer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  CertificateType type = 2;
  string owner = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated AdditionalData additional_data = 4;
}

message MsgCreateCertificateResponse {
  uint64 certificate_id = 1;
}