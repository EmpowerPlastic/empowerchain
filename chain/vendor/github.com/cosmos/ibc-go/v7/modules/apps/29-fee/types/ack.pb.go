// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/fee/v1/ack.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// IncentivizedAcknowledgement is the acknowledgement format to be used by applications wrapped in the fee middleware
type IncentivizedAcknowledgement struct {
	// the underlying app acknowledgement bytes
	AppAcknowledgement []byte `protobuf:"bytes,1,opt,name=app_acknowledgement,json=appAcknowledgement,proto3" json:"app_acknowledgement,omitempty" yaml:"app_acknowledgement"`
	// the relayer address which submits the recv packet message
	ForwardRelayerAddress string `protobuf:"bytes,2,opt,name=forward_relayer_address,json=forwardRelayerAddress,proto3" json:"forward_relayer_address,omitempty" yaml:"forward_relayer_address"`
	// success flag of the base application callback
	UnderlyingAppSuccess bool `protobuf:"varint,3,opt,name=underlying_app_success,json=underlyingAppSuccess,proto3" json:"underlying_app_success,omitempty" yaml:"underlying_app_successl"`
}

func (m *IncentivizedAcknowledgement) Reset()         { *m = IncentivizedAcknowledgement{} }
func (m *IncentivizedAcknowledgement) String() string { return proto.CompactTextString(m) }
func (*IncentivizedAcknowledgement) ProtoMessage()    {}
func (*IncentivizedAcknowledgement) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab2834946fb65ea4, []int{0}
}
func (m *IncentivizedAcknowledgement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentivizedAcknowledgement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentivizedAcknowledgement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentivizedAcknowledgement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentivizedAcknowledgement.Merge(m, src)
}
func (m *IncentivizedAcknowledgement) XXX_Size() int {
	return m.Size()
}
func (m *IncentivizedAcknowledgement) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentivizedAcknowledgement.DiscardUnknown(m)
}

var xxx_messageInfo_IncentivizedAcknowledgement proto.InternalMessageInfo

func (m *IncentivizedAcknowledgement) GetAppAcknowledgement() []byte {
	if m != nil {
		return m.AppAcknowledgement
	}
	return nil
}

func (m *IncentivizedAcknowledgement) GetForwardRelayerAddress() string {
	if m != nil {
		return m.ForwardRelayerAddress
	}
	return ""
}

func (m *IncentivizedAcknowledgement) GetUnderlyingAppSuccess() bool {
	if m != nil {
		return m.UnderlyingAppSuccess
	}
	return false
}

func init() {
	proto.RegisterType((*IncentivizedAcknowledgement)(nil), "ibc.applications.fee.v1.IncentivizedAcknowledgement")
}

func init() { proto.RegisterFile("ibc/applications/fee/v1/ack.proto", fileDescriptor_ab2834946fb65ea4) }

var fileDescriptor_ab2834946fb65ea4 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4a, 0xc3, 0x30,
	0x1c, 0xc6, 0xd7, 0x09, 0xa2, 0xc5, 0x53, 0x9d, 0x6e, 0x4c, 0xc8, 0x66, 0x4f, 0xbb, 0xac, 0x61,
	0x8a, 0x88, 0xde, 0xb6, 0x9b, 0xa7, 0x41, 0xbd, 0xc8, 0x2e, 0x25, 0x4d, 0xff, 0xab, 0x61, 0x69,
	0x12, 0x92, 0xb6, 0xa3, 0x3e, 0x85, 0x0f, 0xe1, 0xc3, 0x78, 0xdc, 0xd1, 0xd3, 0x90, 0xed, 0x0d,
	0xf6, 0x04, 0xd2, 0x55, 0x70, 0xca, 0xbc, 0x85, 0xef, 0xfb, 0xf1, 0x23, 0xfc, 0x3f, 0xfb, 0x92,
	0x85, 0x14, 0x13, 0xa5, 0x38, 0xa3, 0x24, 0x65, 0x52, 0x18, 0x3c, 0x05, 0xc0, 0xf9, 0x00, 0x13,
	0x3a, 0xf3, 0x94, 0x96, 0xa9, 0x74, 0x9a, 0x2c, 0xa4, 0xde, 0x2e, 0xe2, 0x4d, 0x01, 0xbc, 0x7c,
	0xd0, 0x6e, 0xc4, 0x32, 0x96, 0x5b, 0x06, 0x97, 0xaf, 0x0a, 0x77, 0xdf, 0xea, 0xf6, 0xc5, 0x83,
	0xa0, 0x20, 0x52, 0x96, 0xb3, 0x17, 0x88, 0x86, 0x74, 0x26, 0xe4, 0x9c, 0x43, 0x14, 0x43, 0x02,
	0x22, 0x75, 0xc6, 0xf6, 0x29, 0x51, 0x2a, 0x20, 0xbf, 0xe3, 0x96, 0xd5, 0xb5, 0x7a, 0x27, 0x23,
	0xb4, 0x59, 0x76, 0xda, 0x05, 0x49, 0xf8, 0xbd, 0xbb, 0x07, 0x72, 0x7d, 0x87, 0x28, 0xf5, 0x57,
	0x38, 0xb1, 0x9b, 0x53, 0xa9, 0xe7, 0x44, 0x47, 0x81, 0x06, 0x4e, 0x0a, 0xd0, 0x01, 0x89, 0x22,
	0x0d, 0xc6, 0xb4, 0xea, 0x5d, 0xab, 0x77, 0x3c, 0x72, 0x37, 0xcb, 0x0e, 0xaa, 0xa4, 0xff, 0x80,
	0xae, 0x7f, 0xf6, 0xdd, 0xf8, 0x55, 0x31, 0xac, 0x72, 0xe7, 0xc9, 0x3e, 0xcf, 0x44, 0x04, 0x9a,
	0x17, 0x4c, 0xc4, 0x41, 0xf9, 0x25, 0x93, 0x51, 0x5a, 0xaa, 0x0f, 0xba, 0x56, 0xef, 0x68, 0x57,
	0xbd, 0x9f, 0xe3, 0xae, 0xdf, 0xf8, 0x69, 0x86, 0x4a, 0x3d, 0x56, 0xf9, 0x68, 0xfc, 0xbe, 0x42,
	0xd6, 0x62, 0x85, 0xac, 0xcf, 0x15, 0xb2, 0x5e, 0xd7, 0xa8, 0xb6, 0x58, 0xa3, 0xda, 0xc7, 0x1a,
	0xd5, 0x26, 0x37, 0x31, 0x4b, 0x9f, 0xb3, 0xd0, 0xa3, 0x32, 0xc1, 0x54, 0x9a, 0x44, 0x1a, 0xcc,
	0x42, 0xda, 0x8f, 0x25, 0xce, 0x6f, 0x71, 0x22, 0xa3, 0x8c, 0x83, 0x29, 0x27, 0x33, 0xf8, 0xea,
	0xae, 0x5f, 0xae, 0x95, 0x16, 0x0a, 0x4c, 0x78, 0xb8, 0x3d, 0xff, 0xf5, 0x57, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xaa, 0xbb, 0x40, 0x71, 0xd2, 0x01, 0x00, 0x00,
}

func (m *IncentivizedAcknowledgement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentivizedAcknowledgement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentivizedAcknowledgement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnderlyingAppSuccess {
		i--
		if m.UnderlyingAppSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ForwardRelayerAddress) > 0 {
		i -= len(m.ForwardRelayerAddress)
		copy(dAtA[i:], m.ForwardRelayerAddress)
		i = encodeVarintAck(dAtA, i, uint64(len(m.ForwardRelayerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppAcknowledgement) > 0 {
		i -= len(m.AppAcknowledgement)
		copy(dAtA[i:], m.AppAcknowledgement)
		i = encodeVarintAck(dAtA, i, uint64(len(m.AppAcknowledgement)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAck(dAtA []byte, offset int, v uint64) int {
	offset -= sovAck(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IncentivizedAcknowledgement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppAcknowledgement)
	if l > 0 {
		n += 1 + l + sovAck(uint64(l))
	}
	l = len(m.ForwardRelayerAddress)
	if l > 0 {
		n += 1 + l + sovAck(uint64(l))
	}
	if m.UnderlyingAppSuccess {
		n += 2
	}
	return n
}

func sovAck(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAck(x uint64) (n int) {
	return sovAck(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IncentivizedAcknowledgement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAck
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentivizedAcknowledgement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentivizedAcknowledgement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppAcknowledgement", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAck
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAck
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppAcknowledgement = append(m.AppAcknowledgement[:0], dAtA[iNdEx:postIndex]...)
			if m.AppAcknowledgement == nil {
				m.AppAcknowledgement = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardRelayerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAck
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAck
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardRelayerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnderlyingAppSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnderlyingAppSuccess = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAck(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAck
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAck(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAck
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAck
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAck
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAck
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAck
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAck
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAck        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAck          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAck = fmt.Errorf("proto: unexpected end of group")
)
