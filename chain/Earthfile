VERSION 0.6
FROM earthly/dind:ubuntu
WORKDIR /empowerchain/chain

docker:
    RUN apt-get update -yq \
        && apt-get install --no-install-recommends -yq \
        wget gnupg ca-certificates gcc g++ make
    RUN wget -qO- https://go.dev/dl/go1.19.4.linux-amd64.tar.gz | tar -v -C /usr/local -xz
    ENV PATH $PATH:/usr/local/go/bin:/root/go/bin

build-prep:
    FROM +docker
    COPY . . # Until https://github.com/earthly/earthly/issues/1230

build:
    ARG EARTHLY_GIT_HASH
    ARG EARTHLY_GIT_SHORT_HASH
    ARG VERSION=dev-$EARTHLY_GIT_SHORT_HASH
    FROM +build-prep
    RUN make VERSION=$VERSION COMMIT=$EARTHLY_GIT_HASH build
    SAVE ARTIFACT build/empowerd AS LOCAL build/empowerd
    SAVE ARTIFACT go.mod AS LOCAL go.mod
    SAVE ARTIFACT go.sum AS LOCAL go.sum

build-all:
    ARG EARTHLY_GIT_HASH
    ARG EARTHLY_GIT_SHORT_HASH
    ARG VERSION=dev-$EARTHLY_GIT_SHORT_HASH
    FROM +build-prep
    RUN make VERSION=$VERSION COMMIT=$EARTHLY_GIT_HASH build-linux-amd64
    SAVE ARTIFACT build/empowerd AS LOCAL build/empowerd-"$VERSION"-linux-amd64
    RUN make VERSION=$VERSION COMMIT=$EARTHLY_GIT_HASH build-linux-arm64
    SAVE ARTIFACT build/empowerd AS LOCAL build/empowerd-"$VERSION"-linux-arm64
    RUN make VERSION=$VERSION COMMIT=$EARTHLY_GIT_HASH build-darwin-amd64
    SAVE ARTIFACT build/empowerd AS LOCAL build/empowerd-"$VERSION"-darwin-amd64
    RUN make VERSION=$VERSION COMMIT=$EARTHLY_GIT_HASH build-darwin-arm64
    SAVE ARTIFACT build/empowerd AS LOCAL build/empowerd-"$VERSION"-darwin-arm64
    RUN make VERSION=$VERSION COMMIT=$EARTHLY_GIT_HASH build-windows-amd64
    SAVE ARTIFACT build/empowerd.exe AS LOCAL build/empowerd-"$VERSION".exe

test:
    FROM +build
    RUN make test

test-with-coverage:
    FROM +build
    RUN make test-with-coverage
    SAVE ARTIFACT coverage.out AS LOCAL coverage.out

test-sim-import-export:
    FROM +build
    make test-sim-import-export

test-sim-after-import:
    FROM +build
    make test-sim-after-import

test-sim-multi-seed-short:
    FROM +build
    RUN make test-sim-multi-seed-short

test-sim-multi-seed-long:
    FROM +build
    make test-sim-multi-seed-long

test-sim-nondeterminism:
    FROM +build
    RUN make test-sim-nondeterminism

smoketest:
    FROM +build
    RUN make smoketest

smoketest-ibc-prep:
    FROM +build
    WORKDIR /workbench
    GIT CLONE --branch v7.1.0 https://github.com/cosmos/gaia gaia
    RUN cd gaia && make install && cd ..
    GIT CLONE --branch andrew/tendermint_v0.37 https://github.com/cosmos/relayer relayer
    RUN cd relayer && make install && cd ..

smoketest-ibc:
    FROM +smoketest-ibc-prep
    WORKDIR /empowerchain/chain
    RUN make smoketest-ibc

lint:
    FROM +build
    RUN make lint

swagger-gen:
    FROM +build-prep
    # Install buf
    RUN BIN="/usr/local/bin" && \
        VERSION="1.12.0" && \
        curl -sSL \
        "https://github.com/bufbuild/buf/releases/download/v${VERSION}/buf-$(uname -s)-$(uname -m)" \
        -o "${BIN}/buf" && \
        chmod +x "${BIN}/buf"
    # Install NodeJS
    RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
        apt-get install -y nodejs
    # Install swagger-combine
    RUN npm install -g swagger-combine
    # Install GoSwagger
    RUN download_url=$(curl -s https://api.github.com/repos/go-swagger/go-swagger/releases/latest | \
        jq -r '.assets[] | select(.name | contains("'"$(uname | tr '[:upper:]' '[:lower:]')"'_amd64")) | .browser_download_url') && \
        curl -o /usr/local/bin/swagger -L'#' "$download_url" && \
        chmod +x /usr/local/bin/swagger
    # Install protoc-gen-swagger
    RUN go install github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger@latest
    RUN make swagger-gen
    RUN cd client/docs/swagger-ui && swagger generate markdown
    SAVE ARTIFACT client/docs/swagger-ui/swagger.yaml AS LOCAL swagger.yaml
    SAVE ARTIFACT client/docs/swagger-ui/markdown.md AS LOCAL swagger.md
